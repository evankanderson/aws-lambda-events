{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Lambda Event Resources \u00b6 This site tries to collect as many resources on AWS Lambda events from schema, examples to code libraries. Objectives of this site Objective is to collect resources on lambda inputs (requests) and outputs (responses) as well as the following: Invocation type (synchronous, asynchronous or polling) Limitations of each type of lambda Input schema Response schema Example events Libraries for typing, data structures, and other utilities Event handlers libraries by language Response handlers by language Documentation and blog posts Code examples Lambda Event Sources \u00b6 Directory of lambda events and resources API Gateway - Http API - synchronously invokes API Gateway - HTTP API - Custom Authorizer - synchronously invokes API Gateway - Rest API - synchronously invokes API Gateway - Rest API - Custom Authorizer - synchronously invokes Alexa Smart Home - synchronously invokes AppSync - Resolver - synchronously invokes AppSync - Custom Authorizer - synchronously invokes Amazon EventBridge - CloudWatch Event - asynchronously invokes CloudWatch Event - Amazon EC2 - asynchronously invokes CloudWatch Logs - asynchronously invokes CloudFormation - Custom Resource - asynchronously invokes CloudFront - Lambda@Edge - synchronously invokes CloudFront - CloudFront Functions - synchronously invokes CodeCommit - asynchronously invokes CodePipeline - Job - asynchronously invokes Amazon Cognito - User Pool - synchronously invokes AWS Cognito - Sync - synchronously invokes AWS Config - asynchronously invokes Amazon Connect - synchronously invokes Amazon DynamoDB - poll-based invokes (synchronously) Application Load Balancer - synchronously invokes AWS IoT - asynchronously invokes AWS IoT - Events - asynchronously invokes Apache Kafka - poll-based invokes (synchronously) Amazon Kinesis - Data Firehose - poll-based invokes (synchronously) Amazon Kinesis - Streams - poll-based invokes (synchronously) Amazon Lex - synchronously invokes Amazon Lex V2 - synchronously invokes Amazon MQ - Active MQ and Rabbit MQ - poll-based invokes (synchronously) Amazon MSK - poll-based invokes (synchronously) S3 - asynchronously invokes S3 - Batch Operations - synchronously invokes S3 - Object Lambda - synchronously invokes Secrets Manager - synchronously invokes Amazon SES - configurable as asynchronously invokes or synchronously invokes Amazon SNS - asynchronously invokes Amazon SQS - asynchronously invokes Amazon WorkMail - asynchronously or synchronously invokes Invokation Types \u00b6 Synchronous Invokes \u00b6 Synchronous invocations are the most straight forward way to invoke your Lambda functions. In this model, your functions execute immediately when you perform the Lambda Invoke API call. For testing, when invoking directly use invoke type of RequestResponse . Asynchronous Invokes \u00b6 Asynchronous invokes place your invoke request in Lambda service queue and we process the requests as they arrive. For testing, when invoking directly use invoke type of Event . Note During asynchronous invokes, the lambda context field clientContext will not be populated. Poll-Based Invokes \u00b6 AWS will manage the poller on your behalf and perform Synchronous invokes of your function with this type of integration. The retry behavior for this model is based on data expiration in the data source. Understanding the Different Ways to Invoke Lambda Functions","title":"AWS Lambda Event Resources"},{"location":"#aws-lambda-event-resources","text":"This site tries to collect as many resources on AWS Lambda events from schema, examples to code libraries. Objectives of this site Objective is to collect resources on lambda inputs (requests) and outputs (responses) as well as the following: Invocation type (synchronous, asynchronous or polling) Limitations of each type of lambda Input schema Response schema Example events Libraries for typing, data structures, and other utilities Event handlers libraries by language Response handlers by language Documentation and blog posts Code examples","title":"AWS Lambda Event Resources"},{"location":"#lambda-event-sources","text":"Directory of lambda events and resources API Gateway - Http API - synchronously invokes API Gateway - HTTP API - Custom Authorizer - synchronously invokes API Gateway - Rest API - synchronously invokes API Gateway - Rest API - Custom Authorizer - synchronously invokes Alexa Smart Home - synchronously invokes AppSync - Resolver - synchronously invokes AppSync - Custom Authorizer - synchronously invokes Amazon EventBridge - CloudWatch Event - asynchronously invokes CloudWatch Event - Amazon EC2 - asynchronously invokes CloudWatch Logs - asynchronously invokes CloudFormation - Custom Resource - asynchronously invokes CloudFront - Lambda@Edge - synchronously invokes CloudFront - CloudFront Functions - synchronously invokes CodeCommit - asynchronously invokes CodePipeline - Job - asynchronously invokes Amazon Cognito - User Pool - synchronously invokes AWS Cognito - Sync - synchronously invokes AWS Config - asynchronously invokes Amazon Connect - synchronously invokes Amazon DynamoDB - poll-based invokes (synchronously) Application Load Balancer - synchronously invokes AWS IoT - asynchronously invokes AWS IoT - Events - asynchronously invokes Apache Kafka - poll-based invokes (synchronously) Amazon Kinesis - Data Firehose - poll-based invokes (synchronously) Amazon Kinesis - Streams - poll-based invokes (synchronously) Amazon Lex - synchronously invokes Amazon Lex V2 - synchronously invokes Amazon MQ - Active MQ and Rabbit MQ - poll-based invokes (synchronously) Amazon MSK - poll-based invokes (synchronously) S3 - asynchronously invokes S3 - Batch Operations - synchronously invokes S3 - Object Lambda - synchronously invokes Secrets Manager - synchronously invokes Amazon SES - configurable as asynchronously invokes or synchronously invokes Amazon SNS - asynchronously invokes Amazon SQS - asynchronously invokes Amazon WorkMail - asynchronously or synchronously invokes","title":"Lambda Event Sources"},{"location":"#invokation-types","text":"","title":"Invokation Types"},{"location":"#synchronous-invokes","text":"Synchronous invocations are the most straight forward way to invoke your Lambda functions. In this model, your functions execute immediately when you perform the Lambda Invoke API call. For testing, when invoking directly use invoke type of RequestResponse .","title":"Synchronous Invokes"},{"location":"#asynchronous-invokes","text":"Asynchronous invokes place your invoke request in Lambda service queue and we process the requests as they arrive. For testing, when invoking directly use invoke type of Event . Note During asynchronous invokes, the lambda context field clientContext will not be populated.","title":"Asynchronous Invokes"},{"location":"#poll-based-invokes","text":"AWS will manage the poller on your behalf and perform Synchronous invokes of your function with this type of integration. The retry behavior for this model is based on data expiration in the data source. Understanding the Different Ways to Invoke Lambda Functions","title":"Poll-Based Invokes"},{"location":"alb/","text":"Application Load Balancer \u00b6 Elastic Load Balancing invokes your Lambda function synchronously with an event that contains the request body and metadata. Limits \u00b6 The Lambda function and target group must be in the same account and in the same Region. The maximum size of the request body that you can send to a Lambda function is 1 MB. For related size limits, see HTTP header limits. The maximum size of the response JSON that the Lambda function can send is 1 MB. WebSockets are not supported. Upgrade requests are rejected with an HTTP 400 code. Local Zones are not supported. Input \u00b6 Input Fields \u00b6 targetGroupArn (String) Target group arn for your Lambda function httpMethod (String) The HTTP method used. Valid values include: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT. path (String) Http request path multiValueQueryStringParameters (Optional, map of string to list of strings) If you enable multi-value headers, the load balancer uses both key values sent by the client and sends you an event that includes query string parameters using multiValueQueryStringParameters queryStringParameters (Optional, map of string to string) Query string parameters sent by the client. headers (Optional, map of string to string) Http header sent by the client. isBase64Encoded (Boolean) A Boolean flag to indicate if the request body is Base64-encoded. body (Optional, string) The request body sent by the client. Getting the correlation id \u00b6 JSON path to correlation id: headers.\"x-amzn-trace-id\" Generating sample events via SAM CLI \u00b6 # Gibhub PR (https://github.com/aws/aws-sam-cli/pull/3670) Example Event \u00b6 Application Load Balance GET request { \"requestContext\" : { \"elb\" : { \"targetGroupArn\" : \"arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/lambda-279XGJDqGZ5rsrHC2Fjr/49e9d65c45c6791a\" } }, \"httpMethod\" : \"GET\" , \"path\" : \"/lambda\" , \"queryStringParameters\" : { \"query\" : \"1234ABCD\" }, \"multiValueQueryStringParameters\" : { \"myKey\" : [ \"val1\" , \"val2\" ] }, \"headers\" : { \"accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\" , \"accept-encoding\" : \"gzip\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"connection\" : \"keep-alive\" , \"host\" : \"lambda-alb-123578498.us-east-2.elb.amazonaws.com\" , \"upgrade-insecure-requests\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" , \"x-amzn-trace-id\" : \"Root=1-5c536348-3d683b8b04734faae651f476\" , \"x-forwarded-for\" : \"72.12.164.125\" , \"x-forwarded-port\" : \"80\" , \"x-forwarded-proto\" : \"http\" , \"x-imforwards\" : \"20\" }, \"body\" : \"Test\" , \"isBase64Encoded\" : false } Response \u00b6 Response Fields \u00b6 isBase64Encoded (Boolean) A Boolean flag to indicate if the response body is Base64-encoded. statusCode (Integer) The HTTP status code. statusDescription (String) The HTTP status description. headers (Optional, map of string to string) Http header to be sent in the response. body (Optional, string) The response body sent by the server. Response Examples \u00b6 Example 200 html response { \"statusCode\" : 200 , \"statusDescription\" : \"200 OK\" , \"isBase64Encoded\" : False , \"headers\" : { \"Content-Type\" : \"text/html\" }, \"body\" : \"<h1>Hello from Lambda!</h1>\" } Note If you enable multi-value headers, you must specify multiple cookies as follows { \"multiValueHeaders\" :{ \"Set-cookie\" :[ \"cookie-name=cookie-value;Domain=myweb.com;Secure;HttpOnly\" , \"cookie-name=cookie-value;Expires=May 8, 2019\" ], \"Content-Type\" :[ \"application/json\" ] } } Libraries \u00b6 Typed Lambda handlers by Language Python - ALBEvent - Pip aws-lambda-powertools Typescript - ALBEvent - NPM @types/aws-lambda Rust - alb/mod.rs - Cargo aws_lambda_events Go - ApplicationLoadBalancerRequest - Crate github.com/aws/aws-lambda-go/events Java - ApplicationLoadBalancerRequestEvent - Maven aws-lambda-java-events DoNet - ApplicationLoadBalancerEvents - NuGet Amazon.Lambda.ApplicationLoadBalancerEvents Event Handlers by Language AWS Lambda Powertools Python - ALBResolver Serverless Java container Code Examples \u00b6 application-load-balancer-serverless-app Reference Docs \u00b6 Using AWS Lambda with an Application Load Balancer ALB - Lambda functions as targets Lambda functions as targets for Application Load Balancers","title":"Application Load Balancer"},{"location":"alb/#application-load-balancer","text":"Elastic Load Balancing invokes your Lambda function synchronously with an event that contains the request body and metadata.","title":"Application Load Balancer"},{"location":"alb/#limits","text":"The Lambda function and target group must be in the same account and in the same Region. The maximum size of the request body that you can send to a Lambda function is 1 MB. For related size limits, see HTTP header limits. The maximum size of the response JSON that the Lambda function can send is 1 MB. WebSockets are not supported. Upgrade requests are rejected with an HTTP 400 code. Local Zones are not supported.","title":"Limits"},{"location":"alb/#input","text":"","title":"Input"},{"location":"alb/#input-fields","text":"targetGroupArn (String) Target group arn for your Lambda function httpMethod (String) The HTTP method used. Valid values include: DELETE, GET, HEAD, OPTIONS, PATCH, POST, and PUT. path (String) Http request path multiValueQueryStringParameters (Optional, map of string to list of strings) If you enable multi-value headers, the load balancer uses both key values sent by the client and sends you an event that includes query string parameters using multiValueQueryStringParameters queryStringParameters (Optional, map of string to string) Query string parameters sent by the client. headers (Optional, map of string to string) Http header sent by the client. isBase64Encoded (Boolean) A Boolean flag to indicate if the request body is Base64-encoded. body (Optional, string) The request body sent by the client.","title":"Input Fields"},{"location":"alb/#getting-the-correlation-id","text":"JSON path to correlation id: headers.\"x-amzn-trace-id\"","title":"Getting the correlation id"},{"location":"alb/#generating-sample-events-via-sam-cli","text":"# Gibhub PR (https://github.com/aws/aws-sam-cli/pull/3670)","title":"Generating sample events via SAM CLI"},{"location":"alb/#example-event","text":"Application Load Balance GET request { \"requestContext\" : { \"elb\" : { \"targetGroupArn\" : \"arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/lambda-279XGJDqGZ5rsrHC2Fjr/49e9d65c45c6791a\" } }, \"httpMethod\" : \"GET\" , \"path\" : \"/lambda\" , \"queryStringParameters\" : { \"query\" : \"1234ABCD\" }, \"multiValueQueryStringParameters\" : { \"myKey\" : [ \"val1\" , \"val2\" ] }, \"headers\" : { \"accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\" , \"accept-encoding\" : \"gzip\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"connection\" : \"keep-alive\" , \"host\" : \"lambda-alb-123578498.us-east-2.elb.amazonaws.com\" , \"upgrade-insecure-requests\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" , \"x-amzn-trace-id\" : \"Root=1-5c536348-3d683b8b04734faae651f476\" , \"x-forwarded-for\" : \"72.12.164.125\" , \"x-forwarded-port\" : \"80\" , \"x-forwarded-proto\" : \"http\" , \"x-imforwards\" : \"20\" }, \"body\" : \"Test\" , \"isBase64Encoded\" : false }","title":"Example Event"},{"location":"alb/#response","text":"","title":"Response"},{"location":"alb/#response-fields","text":"isBase64Encoded (Boolean) A Boolean flag to indicate if the response body is Base64-encoded. statusCode (Integer) The HTTP status code. statusDescription (String) The HTTP status description. headers (Optional, map of string to string) Http header to be sent in the response. body (Optional, string) The response body sent by the server.","title":"Response Fields"},{"location":"alb/#response-examples","text":"Example 200 html response { \"statusCode\" : 200 , \"statusDescription\" : \"200 OK\" , \"isBase64Encoded\" : False , \"headers\" : { \"Content-Type\" : \"text/html\" }, \"body\" : \"<h1>Hello from Lambda!</h1>\" } Note If you enable multi-value headers, you must specify multiple cookies as follows { \"multiValueHeaders\" :{ \"Set-cookie\" :[ \"cookie-name=cookie-value;Domain=myweb.com;Secure;HttpOnly\" , \"cookie-name=cookie-value;Expires=May 8, 2019\" ], \"Content-Type\" :[ \"application/json\" ] } }","title":"Response Examples"},{"location":"alb/#libraries","text":"Typed Lambda handlers by Language Python - ALBEvent - Pip aws-lambda-powertools Typescript - ALBEvent - NPM @types/aws-lambda Rust - alb/mod.rs - Cargo aws_lambda_events Go - ApplicationLoadBalancerRequest - Crate github.com/aws/aws-lambda-go/events Java - ApplicationLoadBalancerRequestEvent - Maven aws-lambda-java-events DoNet - ApplicationLoadBalancerEvents - NuGet Amazon.Lambda.ApplicationLoadBalancerEvents Event Handlers by Language AWS Lambda Powertools Python - ALBResolver Serverless Java container","title":"Libraries"},{"location":"alb/#code-examples","text":"application-load-balancer-serverless-app","title":"Code Examples"},{"location":"alb/#reference-docs","text":"Using AWS Lambda with an Application Load Balancer ALB - Lambda functions as targets Lambda functions as targets for Application Load Balancers","title":"Reference Docs"},{"location":"alexa-smart-home/","text":"Alexa Smart Home \u00b6 Event-driven, synchronous invocation Input \u00b6 Generating sample events via SAM CLI \u00b6 sam local generate-event alexa-smart-home smart-home-control-turn-off-request sam local generate-event alexa-smart-home smart-home-control-turn-on-request Event Example \u00b6 Smart Home Skill V3 request { \"directive\" : { \"header\" : { \"namespace\" : \"Alexa.Discovery\" , \"name\" : \"Discover\" , \"payloadVersion\" : \"3\" , \"messageId\" : \"1bd5d003-31b9-476f-ad03-71d471922820\" }, \"payload\" : { \"scope\" : { \"type\" : \"BearerToken\" } } } } Example Alexa smart home event version 1 { \"header\" : { \"payloadVersion\" : \"1\" , \"namespace\" : \"Control\" , \"name\" : \"SwitchOnOffRequest\" }, \"payload\" : { \"switchControlAction\" : \"TURN_ON\" , \"appliance\" : { \"additionalApplianceDetails\" : { \"key2\" : \"value2\" , \"key1\" : \"value1\" }, \"applianceId\" : \"sampleId\" }, \"accessToken\" : \"sampleAccessToken\" } } Response \u00b6 Smart Home Skill V3 response { \"event\" : { \"header\" : { \"namespace\" : \"Alexa.Discovery\" , \"name\" : \"Discover.Response\" , \"messageId\" : \"b5a1d155-3a97-479e-80fa-913b4afee758\" , \"payloadVersion\" : \"3\" }, \"payload\" : { \"endpoints\" : [ { \"capabilities\" : [ { \"type\" : \"AlexaInterface\" , \"interface\" : \"Alexa\" , \"version\" : \"3\" }, { \"type\" : \"AlexaInterface\" , \"interface\" : \"Alexa.PowerController\" , \"version\" : \"3\" , \"properties\" : { \"supported\" : [ { \"name\" : \"powerState\" } ], \"proactivelyReported\" : false , \"retrievable\" : false } } ], \"description\" : \"Sample Endpoint Description\" , \"displayCategories\" : [ \"OTHER\" ], \"endpointId\" : \"sample-switch-01\" , \"friendlyName\" : \"Sample Switch\" , \"manufacturerName\" : \"Sample Manufacturer\" } ] } } } legacy v1.0 { \"version\" : \"1.0\" , \"response\" : { \"outputSpeech\" : { \"type\" : \"SSML\" , \"ssml\" : \"<speak>Welcome to Premium Facts Sample. To hear a random fact you can say 'Tell me a fact', or to hear about the premium categories for purchase, say 'What can I buy'. For help, say , 'Help me'... So, What can I help you with?</speak>\" }, \"reprompt\" : { \"outputSpeech\" : { \"type\" : \"SSML\" , \"ssml\" : \"<speak>I didn't catch that. What can I help you with?</speak>\" } }, \"shouldEndSession\" : false }, \"userAgent\" : \"ask-node/2.3.0 Node/v8.10.0\" , \"sessionAttributes\" : {} } Libraries \u00b6 Lambda handlers by Language Python SDK Python - alexa smart home example NodeJS Java SDK Serverless - Alexa Smart Home Reference Docs \u00b6 Using AWS Lambda with Alexa Host a Custom Skill as an AWS Lambda Function Alexa Smart Home - Workshop","title":"Alexa Smart Home"},{"location":"alexa-smart-home/#alexa-smart-home","text":"Event-driven, synchronous invocation","title":"Alexa Smart Home"},{"location":"alexa-smart-home/#input","text":"","title":"Input"},{"location":"alexa-smart-home/#generating-sample-events-via-sam-cli","text":"sam local generate-event alexa-smart-home smart-home-control-turn-off-request sam local generate-event alexa-smart-home smart-home-control-turn-on-request","title":"Generating sample events via SAM CLI"},{"location":"alexa-smart-home/#event-example","text":"Smart Home Skill V3 request { \"directive\" : { \"header\" : { \"namespace\" : \"Alexa.Discovery\" , \"name\" : \"Discover\" , \"payloadVersion\" : \"3\" , \"messageId\" : \"1bd5d003-31b9-476f-ad03-71d471922820\" }, \"payload\" : { \"scope\" : { \"type\" : \"BearerToken\" } } } } Example Alexa smart home event version 1 { \"header\" : { \"payloadVersion\" : \"1\" , \"namespace\" : \"Control\" , \"name\" : \"SwitchOnOffRequest\" }, \"payload\" : { \"switchControlAction\" : \"TURN_ON\" , \"appliance\" : { \"additionalApplianceDetails\" : { \"key2\" : \"value2\" , \"key1\" : \"value1\" }, \"applianceId\" : \"sampleId\" }, \"accessToken\" : \"sampleAccessToken\" } }","title":"Event Example"},{"location":"alexa-smart-home/#response","text":"Smart Home Skill V3 response { \"event\" : { \"header\" : { \"namespace\" : \"Alexa.Discovery\" , \"name\" : \"Discover.Response\" , \"messageId\" : \"b5a1d155-3a97-479e-80fa-913b4afee758\" , \"payloadVersion\" : \"3\" }, \"payload\" : { \"endpoints\" : [ { \"capabilities\" : [ { \"type\" : \"AlexaInterface\" , \"interface\" : \"Alexa\" , \"version\" : \"3\" }, { \"type\" : \"AlexaInterface\" , \"interface\" : \"Alexa.PowerController\" , \"version\" : \"3\" , \"properties\" : { \"supported\" : [ { \"name\" : \"powerState\" } ], \"proactivelyReported\" : false , \"retrievable\" : false } } ], \"description\" : \"Sample Endpoint Description\" , \"displayCategories\" : [ \"OTHER\" ], \"endpointId\" : \"sample-switch-01\" , \"friendlyName\" : \"Sample Switch\" , \"manufacturerName\" : \"Sample Manufacturer\" } ] } } } legacy v1.0 { \"version\" : \"1.0\" , \"response\" : { \"outputSpeech\" : { \"type\" : \"SSML\" , \"ssml\" : \"<speak>Welcome to Premium Facts Sample. To hear a random fact you can say 'Tell me a fact', or to hear about the premium categories for purchase, say 'What can I buy'. For help, say , 'Help me'... So, What can I help you with?</speak>\" }, \"reprompt\" : { \"outputSpeech\" : { \"type\" : \"SSML\" , \"ssml\" : \"<speak>I didn't catch that. What can I help you with?</speak>\" } }, \"shouldEndSession\" : false }, \"userAgent\" : \"ask-node/2.3.0 Node/v8.10.0\" , \"sessionAttributes\" : {} }","title":"Response"},{"location":"alexa-smart-home/#libraries","text":"Lambda handlers by Language Python SDK Python - alexa smart home example NodeJS Java SDK Serverless - Alexa Smart Home","title":"Libraries"},{"location":"alexa-smart-home/#reference-docs","text":"Using AWS Lambda with Alexa Host a Custom Skill as an AWS Lambda Function Alexa Smart Home - Workshop","title":"Reference Docs"},{"location":"amazon-msk/","text":"Amazon MSK \u00b6 Amazon Managed Streaming for Apache Kafka (Amazon MSK) is a fully managed service that you can use to build and run applications that use Apache Kafka to process streaming data. Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in batches and provides these to your function as an event payload. Limits \u00b6 The maximum batch size is configurable. (The default is 100 messages.) Lambda can run your function for up to 14 minutes. Input \u00b6 Note Shares the same structure as Self managed Apache Kafka , except for the eventSource field is set to \"aws:msk\". Managed Kafka { \"eventSource\" : \"aws:kafka\" , \"eventSourceArn\" : \"arn:aws:kafka:sa-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\" , \"records\" :{ \"mytopic-0\" :[ { \"topic\" : \"mytopic\" , \"partition\" : \"0\" , \"offset\" : 15 , \"timestamp\" : 1545084650987 , \"timestampType\" : \"CREATE_TIME\" , \"value\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"headers\" :[ { \"headerKey\" :[ 104 , 101 , 97 , 100 , 101 , 114 , 86 , 97 , 108 , 117 , 101 ] } ] } ] } } Another managed Kafka example { \"eventSource\" : \"aws:kafka\" , \"eventSourceArn\" : \"arn:aws:kafka:us-west-2:012345678901:cluster/ExampleMSKCluster/e9f754c6-d29a-4430-a7db-958a19fd2c54-4\" , \"bootstrapServers\" : \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\" , \"records\" : { \"AWSKafkaTopic-0\" : [ { \"topic\" : \"AWSKafkaTopic\" , \"partition\" : 0 , \"offset\" : 0 , \"timestamp\" : 1595035749700 , \"timestampType\" : \"CREATE_TIME\" , \"key\" : \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\" , \"value\" : \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\" , \"headers\" : [ { \"headerKey\" : \"aGVhZGVyVmFsdWU=\" } ] } ] } } Response \u00b6 Libraries \u00b6 Typed Lambda handlers by Language Typescript - MSKEvent - NPM @types/aws-lambda Code examples \u00b6 Amazon MSK AWS Lambda Integration Lab - Code Reference Docs \u00b6 Using Lambda with Amazon MSK Using Amazon MSK as an event source for AWS Lambda","title":"Amazon MSK"},{"location":"amazon-msk/#amazon-msk","text":"Amazon Managed Streaming for Apache Kafka (Amazon MSK) is a fully managed service that you can use to build and run applications that use Apache Kafka to process streaming data. Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in batches and provides these to your function as an event payload.","title":"Amazon MSK"},{"location":"amazon-msk/#limits","text":"The maximum batch size is configurable. (The default is 100 messages.) Lambda can run your function for up to 14 minutes.","title":"Limits"},{"location":"amazon-msk/#input","text":"Note Shares the same structure as Self managed Apache Kafka , except for the eventSource field is set to \"aws:msk\". Managed Kafka { \"eventSource\" : \"aws:kafka\" , \"eventSourceArn\" : \"arn:aws:kafka:sa-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\" , \"records\" :{ \"mytopic-0\" :[ { \"topic\" : \"mytopic\" , \"partition\" : \"0\" , \"offset\" : 15 , \"timestamp\" : 1545084650987 , \"timestampType\" : \"CREATE_TIME\" , \"value\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"headers\" :[ { \"headerKey\" :[ 104 , 101 , 97 , 100 , 101 , 114 , 86 , 97 , 108 , 117 , 101 ] } ] } ] } } Another managed Kafka example { \"eventSource\" : \"aws:kafka\" , \"eventSourceArn\" : \"arn:aws:kafka:us-west-2:012345678901:cluster/ExampleMSKCluster/e9f754c6-d29a-4430-a7db-958a19fd2c54-4\" , \"bootstrapServers\" : \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\" , \"records\" : { \"AWSKafkaTopic-0\" : [ { \"topic\" : \"AWSKafkaTopic\" , \"partition\" : 0 , \"offset\" : 0 , \"timestamp\" : 1595035749700 , \"timestampType\" : \"CREATE_TIME\" , \"key\" : \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\" , \"value\" : \"OGQ1NTk2YjQtMTgxMy00MjM4LWIyNGItNmRhZDhlM2QxYzBj\" , \"headers\" : [ { \"headerKey\" : \"aGVhZGVyVmFsdWU=\" } ] } ] } }","title":"Input"},{"location":"amazon-msk/#response","text":"","title":"Response"},{"location":"amazon-msk/#libraries","text":"Typed Lambda handlers by Language Typescript - MSKEvent - NPM @types/aws-lambda","title":"Libraries"},{"location":"amazon-msk/#code-examples","text":"Amazon MSK AWS Lambda Integration Lab - Code","title":"Code examples"},{"location":"amazon-msk/#reference-docs","text":"Using Lambda with Amazon MSK Using Amazon MSK as an event source for AWS Lambda","title":"Reference Docs"},{"location":"apache-kafka/","text":"Apache Kafka \u00b6 Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in batches and provides these to your function as an event payload. The maximum batch size is configurable. (The default is 100 messages.) Input \u00b6 Note Shares the same structure as Amazon MSK , except for the eventSource field is set to \"aws:SelfManagedKafka\". Self managed kafka example { \"eventSource\" : \"aws:SelfManagedKafka\" , \"bootstrapServers\" : \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\" , \"records\" :{ \"mytopic-0\" :[ { \"topic\" : \"mytopic\" , \"partition\" : \"0\" , \"offset\" : 15 , \"timestamp\" : 1545084650987 , \"timestampType\" : \"CREATE_TIME\" , \"value\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"headers\" :[ { \"headerKey\" :[ 104 , 101 , 97 , 100 , 101 , 114 , 86 , 97 , 108 , 117 , 101 ] } ] } ] } } Response \u00b6 Libraries \u00b6 Go - KafkaEvent Java - KafkaEvent Reference Docs \u00b6 Using Lambda with self-managed Apache Kafka Using self-hosted Apache Kafka as an event source for AWS Lambda","title":"Apache Kafka"},{"location":"apache-kafka/#apache-kafka","text":"Lambda internally polls for new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the messages in batches and provides these to your function as an event payload. The maximum batch size is configurable. (The default is 100 messages.)","title":"Apache Kafka"},{"location":"apache-kafka/#input","text":"Note Shares the same structure as Amazon MSK , except for the eventSource field is set to \"aws:SelfManagedKafka\". Self managed kafka example { \"eventSource\" : \"aws:SelfManagedKafka\" , \"bootstrapServers\" : \"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\" , \"records\" :{ \"mytopic-0\" :[ { \"topic\" : \"mytopic\" , \"partition\" : \"0\" , \"offset\" : 15 , \"timestamp\" : 1545084650987 , \"timestampType\" : \"CREATE_TIME\" , \"value\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"headers\" :[ { \"headerKey\" :[ 104 , 101 , 97 , 100 , 101 , 114 , 86 , 97 , 108 , 117 , 101 ] } ] } ] } }","title":"Input"},{"location":"apache-kafka/#response","text":"","title":"Response"},{"location":"apache-kafka/#libraries","text":"Go - KafkaEvent Java - KafkaEvent","title":"Libraries"},{"location":"apache-kafka/#reference-docs","text":"Using Lambda with self-managed Apache Kafka Using self-hosted Apache Kafka as an event source for AWS Lambda","title":"Reference Docs"},{"location":"appsync-authorizer/","text":"AppSync Authorizer \u00b6 Event driven, invoked synchronously. Limits \u00b6 Lambda authorizers have a timeout of 10 seconds. An authorization token must not exceed 2048 characters A Lambda function must not return more than 5MB of contextual data for resolvers. Input \u00b6 { \"authorizationToken\" : \"BE9DC5E3-D410-4733-AF76-70178092E681\" , \"requestContext\" : { \"apiId\" : \"giy7kumfmvcqvbedntjwjvagii\" , \"accountId\" : \"254688921111\" , \"requestId\" : \"b80ed838-14c6-4500-b4c3-b694c7bef086\" , \"queryString\" : \"mutation MyNewTask($desc: String!) {\\n createTask(description: $desc, owner: \\\"ccc\\\", taskStatus: \\\"cc\\\", title: \\\"ccc\\\") {\\n id\\n }\\n}\\n\" , \"operationName\" : \"MyNewTask\" , \"variables\" : { \"desc\" : \"Foo\" } } } Response \u00b6 isAuthorized (Required, Boolean) A boolean value indicating if the value in authorizationToken is authorized to make calls to the GraphQL API. If this value is true, execution of the GraphQL API continues. If this value is false, an UnauthorizedException is raised deniedFields (Optional, Array) A list of which are forcibly changed to null, even if a value was returned from a resolver. Each item is either a fully qualified field ARN in the form of arn:aws:appsync:us-east-1:111122223333:apis/GraphQLApiId/types/TypeName/fields/FieldName or a short form of TypeName.FieldName . The full ARN form should be used when two APIs share a lambda function authorizer and there might be ambiguity between common types and fields between the two APIs. resolverContext (Optional, Object) A JSON object visible as $ctx.identity.resolverContext in resolver templates. ttlOverride (Optional, Number) The number of seconds that the response should be cached for. If no value is returned, the value from the API (if configured) or the default of 300 seconds (five minutes) is used. If this is 0, the response is not cached. Example response { \"isAuthorized\" : true , \"resolverContext\" : { \"name\" : \"Foo Man\" , \"balance\" : 100 }, \"deniedFields\" : [ \"Mutation.createEvent\" ], \"ttlOverride\" : 15 } Libraries \u00b6 AppSync typed handler and response builder by language Python - AppSyncAuthorizerEvent Code Example \u00b6 app.py from typing import Dict from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.logging.logger import Logger from aws_lambda_powertools.utilities.data_classes.appsync_authorizer_event import ( AppSyncAuthorizerEvent , AppSyncAuthorizerResponse , ) from aws_lambda_powertools.utilities.data_classes.event_source import event_source logger = Logger () def get_user_by_token ( token : str ): \"\"\"Look a user by token\"\"\" ... @logger . inject_lambda_context ( correlation_id_path = correlation_paths . APPSYNC_AUTHORIZER ) @event_source ( data_class = AppSyncAuthorizerEvent ) def lambda_handler ( event : AppSyncAuthorizerEvent , context ) -> Dict : user = get_user_by_token ( event . authorization_token ) if not user : # No user found, return not authorized return AppSyncAuthorizerResponse () . asdict () return AppSyncAuthorizerResponse ( authorize = True , resolver_context = { \"id\" : user . id }, # Only allow admins to delete events deny_fields = None if user . is_admin else [ \"Mutation.deleteEvent\" ], ) . asdict () Reference Docs \u00b6 AppSync Authorizer - AWS_LAMBDA Authorization Amplify - AWS Lambda Authorization Introducing Lambda authorization for AWS AppSync GraphQL APIs","title":"AppSync Authorizer"},{"location":"appsync-authorizer/#appsync-authorizer","text":"Event driven, invoked synchronously.","title":"AppSync Authorizer"},{"location":"appsync-authorizer/#limits","text":"Lambda authorizers have a timeout of 10 seconds. An authorization token must not exceed 2048 characters A Lambda function must not return more than 5MB of contextual data for resolvers.","title":"Limits"},{"location":"appsync-authorizer/#input","text":"{ \"authorizationToken\" : \"BE9DC5E3-D410-4733-AF76-70178092E681\" , \"requestContext\" : { \"apiId\" : \"giy7kumfmvcqvbedntjwjvagii\" , \"accountId\" : \"254688921111\" , \"requestId\" : \"b80ed838-14c6-4500-b4c3-b694c7bef086\" , \"queryString\" : \"mutation MyNewTask($desc: String!) {\\n createTask(description: $desc, owner: \\\"ccc\\\", taskStatus: \\\"cc\\\", title: \\\"ccc\\\") {\\n id\\n }\\n}\\n\" , \"operationName\" : \"MyNewTask\" , \"variables\" : { \"desc\" : \"Foo\" } } }","title":"Input"},{"location":"appsync-authorizer/#response","text":"isAuthorized (Required, Boolean) A boolean value indicating if the value in authorizationToken is authorized to make calls to the GraphQL API. If this value is true, execution of the GraphQL API continues. If this value is false, an UnauthorizedException is raised deniedFields (Optional, Array) A list of which are forcibly changed to null, even if a value was returned from a resolver. Each item is either a fully qualified field ARN in the form of arn:aws:appsync:us-east-1:111122223333:apis/GraphQLApiId/types/TypeName/fields/FieldName or a short form of TypeName.FieldName . The full ARN form should be used when two APIs share a lambda function authorizer and there might be ambiguity between common types and fields between the two APIs. resolverContext (Optional, Object) A JSON object visible as $ctx.identity.resolverContext in resolver templates. ttlOverride (Optional, Number) The number of seconds that the response should be cached for. If no value is returned, the value from the API (if configured) or the default of 300 seconds (five minutes) is used. If this is 0, the response is not cached. Example response { \"isAuthorized\" : true , \"resolverContext\" : { \"name\" : \"Foo Man\" , \"balance\" : 100 }, \"deniedFields\" : [ \"Mutation.createEvent\" ], \"ttlOverride\" : 15 }","title":"Response"},{"location":"appsync-authorizer/#libraries","text":"AppSync typed handler and response builder by language Python - AppSyncAuthorizerEvent","title":"Libraries"},{"location":"appsync-authorizer/#code-example","text":"app.py from typing import Dict from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.logging.logger import Logger from aws_lambda_powertools.utilities.data_classes.appsync_authorizer_event import ( AppSyncAuthorizerEvent , AppSyncAuthorizerResponse , ) from aws_lambda_powertools.utilities.data_classes.event_source import event_source logger = Logger () def get_user_by_token ( token : str ): \"\"\"Look a user by token\"\"\" ... @logger . inject_lambda_context ( correlation_id_path = correlation_paths . APPSYNC_AUTHORIZER ) @event_source ( data_class = AppSyncAuthorizerEvent ) def lambda_handler ( event : AppSyncAuthorizerEvent , context ) -> Dict : user = get_user_by_token ( event . authorization_token ) if not user : # No user found, return not authorized return AppSyncAuthorizerResponse () . asdict () return AppSyncAuthorizerResponse ( authorize = True , resolver_context = { \"id\" : user . id }, # Only allow admins to delete events deny_fields = None if user . is_admin else [ \"Mutation.deleteEvent\" ], ) . asdict ()","title":"Code Example"},{"location":"appsync-authorizer/#reference-docs","text":"AppSync Authorizer - AWS_LAMBDA Authorization Amplify - AWS Lambda Authorization Introducing Lambda authorization for AWS AppSync GraphQL APIs","title":"Reference Docs"},{"location":"appsync-resolver/","text":"AppSync Resolver \u00b6 Event driven, invoked synchronously. Note AppSync Resolver Events can come in various shapes this data class supports both Amplify GraphQL directive @function and Direct Lambda Resolver Limits \u00b6 Request execution timeout of 30 seconds Payload size limit of 1MB Input \u00b6 Event fields \u00b6 typeName (String) The name of the parent object type of the field being resolver. fieldName (String) The name of the field being resolved. arguments (Map) A map containing the arguments passed to the field being resolved. identity (Object) A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. source (Map) A map that contains the resolution of the parent field. When resolving a nested field in a query, the source contains parent value at runtime. For example when resolving Post.comments , the source will be the Post object. request (String) The AppSync request object. Contains header information. next (String) When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases. Event examples \u00b6 AppSync direct resolver { \"arguments\" : { \"id\" : \"my identifier\" }, \"identity\" : { \"claims\" : { \"sub\" : \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\" , \"email_verified\" : true , \"iss\" : \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\" , \"phone_number_verified\" : false , \"cognito:username\" : \"jdoe\" , \"aud\" : \"7471s60os7h0uu77i1tk27sp9n\" , \"event_id\" : \"bc334ed8-a938-4474-b644-9547e304e606\" , \"token_use\" : \"id\" , \"auth_time\" : 1599154213 , \"phone_number\" : \"+19999999999\" , \"exp\" : 1599157813 , \"iat\" : 1599154213 , \"email\" : \"jdoe@email.com\" }, \"defaultAuthStrategy\" : \"ALLOW\" , \"groups\" : null , \"issuer\" : \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\" , \"sourceIp\" : [ \"1.1.1.1\" ], \"sub\" : \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\" , \"username\" : \"jdoe\" }, \"source\" : null , \"request\" : { \"headers\" : { \"x-forwarded-for\" : \"1.1.1.1, 2.2.2.2\" , \"cloudfront-viewer-country\" : \"US\" , \"cloudfront-is-tablet-viewer\" : \"false\" , \"via\" : \"2.0 xxxxxxxxxxxxxxxx.cloudfront.net (CloudFront)\" , \"cloudfront-forwarded-proto\" : \"https\" , \"origin\" : \"https://us-west-1.console.aws.amazon.com\" , \"content-length\" : \"217\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"host\" : \"xxxxxxxxxxxxxxxx.appsync-api.us-west-1.amazonaws.com\" , \"x-forwarded-proto\" : \"https\" , \"user-agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36\" , \"accept\" : \"*/*\" , \"cloudfront-is-mobile-viewer\" : \"false\" , \"cloudfront-is-smarttv-viewer\" : \"false\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"referer\" : \"https://us-west-1.console.aws.amazon.com/appsync/home?region=us-west-1\" , \"content-type\" : \"application/json\" , \"sec-fetch-mode\" : \"cors\" , \"x-amz-cf-id\" : \"3aykhqlUwQeANU-HGY7E_guV5EkNeMMtwyOgiA==\" , \"x-amzn-trace-id\" : \"Root=1-5f512f51-fac632066c5e848ae714\" , \"authorization\" : \"eyJraWQiOiJScWFCSlJqYVJlM0hrSnBTUFpIcVRXazNOW...\" , \"sec-fetch-dest\" : \"empty\" , \"x-amz-user-agent\" : \"AWS-Console-AppSync/\" , \"cloudfront-is-desktop-viewer\" : \"true\" , \"sec-fetch-site\" : \"cross-site\" , \"x-forwarded-port\" : \"443\" } }, \"prev\" : null , \"info\" : { \"selectionSetList\" : [ \"id\" , \"field1\" , \"field2\" ], \"selectionSetGraphQL\" : \"{\\n id\\n field1\\n field2\\n}\" , \"parentTypeName\" : \"Mutation\" , \"fieldName\" : \"createSomething\" , \"variables\" : {} }, \"stash\" : {} } Amplify GraphQL directive { \"typeName\" : \"Merchant\" , \"fieldName\" : \"locations\" , \"arguments\" : { \"page\" : 2 , \"size\" : 1 , \"name\" : \"value\" }, \"identity\" : { \"claims\" : { \"sub\" : \"07920713-4526-4642-9c88-2953512de441\" , \"iss\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\" , \"aud\" : \"58rc9bf5kkti90ctmvioppukm9\" , \"event_id\" : \"7f4c9383-abf6-48b7-b821-91643968b755\" , \"token_use\" : \"id\" , \"auth_time\" : 1615366261 , \"name\" : \"Michael Brewer\" , \"exp\" : 1615369861 , \"iat\" : 1615366261 }, \"defaultAuthStrategy\" : \"ALLOW\" , \"groups\" : null , \"issuer\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\" , \"sourceIp\" : [ \"11.215.2.22\" ], \"sub\" : \"07920713-4526-4642-9c88-2953512de441\" , \"username\" : \"mike\" }, \"source\" : { \"name\" : \"Value\" , \"nested\" : { \"name\" : \"value\" , \"list\" : [] } }, \"request\" : { \"headers\" : { \"x-forwarded-for\" : \"11.215.2.22, 64.44.173.11\" , \"cloudfront-viewer-country\" : \"US\" , \"cloudfront-is-tablet-viewer\" : \"false\" , \"via\" : \"2.0 SOMETHING.cloudfront.net (CloudFront)\" , \"cloudfront-forwarded-proto\" : \"https\" , \"origin\" : \"https://console.aws.amazon.com\" , \"content-length\" : \"156\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"host\" : \"SOMETHING.appsync-api.us-east-1.amazonaws.com\" , \"x-forwarded-proto\" : \"https\" , \"sec-gpc\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) etc.\" , \"accept\" : \"*/*\" , \"cloudfront-is-mobile-viewer\" : \"false\" , \"cloudfront-is-smarttv-viewer\" : \"false\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"referer\" : \"https://console.aws.amazon.com/\" , \"content-type\" : \"application/json\" , \"sec-fetch-mode\" : \"cors\" , \"x-amz-cf-id\" : \"Fo5VIuvP6V6anIEt62WzFDCK45mzM4yEdpt5BYxOl9OFqafd-WR0cA==\" , \"x-amzn-trace-id\" : \"Root=1-60488877-0b0c4e6727ab2a1c545babd0\" , \"authorization\" : \"AUTH-HEADER\" , \"sec-fetch-dest\" : \"empty\" , \"x-amz-user-agent\" : \"AWS-Console-AppSync/\" , \"cloudfront-is-desktop-viewer\" : \"true\" , \"sec-fetch-site\" : \"cross-site\" , \"x-forwarded-port\" : \"443\" } }, \"prev\" : { \"result\" : {} } } Response \u00b6 Response is based on the expected GraphQL response. Libraries \u00b6 Typed handlers by language Python - AppSyncResolverEvent Lambda handlers by language Python - AppSyncResolver - pip aws-lambda-powertools Code Examples \u00b6 app.py from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.event_handler import AppSyncResolver from aws_lambda_powertools.utilities.data_classes.appsync import scalar_types_utils tracer = Tracer ( service = \"sample_resolver\" ) logger = Logger ( service = \"sample_resolver\" ) app = AppSyncResolver () # Note that `creation_time` isn't available in the schema # This utility also takes into account what info you make available at API level vs what's stored TODOS = [ { \"id\" : scalar_types_utils . make_id (), # type ID or String \"title\" : \"First task\" , \"description\" : \"String\" , \"done\" : False , \"creation_time\" : scalar_types_utils . aws_datetime (), # type AWSDateTime }, { \"id\" : scalar_types_utils . make_id (), \"title\" : \"Second task\" , \"description\" : \"String\" , \"done\" : True , \"creation_time\" : scalar_types_utils . aws_datetime (), }, ] @app . resolver ( type_name = \"Query\" , field_name = \"getTodo\" ) def get_todo ( id : str = \"\" ): logger . info ( f \"Fetching Todo { id } \" ) todo = [ todo for todo in TODOS if todo [ \"id\" ] == id ] return todo @app . resolver ( type_name = \"Query\" , field_name = \"listTodos\" ) def list_todos (): return TODOS @logger . inject_lambda_context ( correlation_id_path = correlation_paths . APPSYNC_RESOLVER ) @tracer . capture_lambda_handler def lambda_handler ( event , context ): return app . resolve ( event , context ) Reference Docs \u00b6 AppSync - Resolver mapping template context reference Amplify - Configure Lambda resolvers","title":"AppSync Resolver"},{"location":"appsync-resolver/#appsync-resolver","text":"Event driven, invoked synchronously. Note AppSync Resolver Events can come in various shapes this data class supports both Amplify GraphQL directive @function and Direct Lambda Resolver","title":"AppSync Resolver"},{"location":"appsync-resolver/#limits","text":"Request execution timeout of 30 seconds Payload size limit of 1MB","title":"Limits"},{"location":"appsync-resolver/#input","text":"","title":"Input"},{"location":"appsync-resolver/#event-fields","text":"typeName (String) The name of the parent object type of the field being resolver. fieldName (String) The name of the field being resolved. arguments (Map) A map containing the arguments passed to the field being resolved. identity (Object) A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. source (Map) A map that contains the resolution of the parent field. When resolving a nested field in a query, the source contains parent value at runtime. For example when resolving Post.comments , the source will be the Post object. request (String) The AppSync request object. Contains header information. next (String) When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases.","title":"Event fields"},{"location":"appsync-resolver/#event-examples","text":"AppSync direct resolver { \"arguments\" : { \"id\" : \"my identifier\" }, \"identity\" : { \"claims\" : { \"sub\" : \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\" , \"email_verified\" : true , \"iss\" : \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\" , \"phone_number_verified\" : false , \"cognito:username\" : \"jdoe\" , \"aud\" : \"7471s60os7h0uu77i1tk27sp9n\" , \"event_id\" : \"bc334ed8-a938-4474-b644-9547e304e606\" , \"token_use\" : \"id\" , \"auth_time\" : 1599154213 , \"phone_number\" : \"+19999999999\" , \"exp\" : 1599157813 , \"iat\" : 1599154213 , \"email\" : \"jdoe@email.com\" }, \"defaultAuthStrategy\" : \"ALLOW\" , \"groups\" : null , \"issuer\" : \"https://cognito-idp.us-west-2.amazonaws.com/us-west-xxxxxxxxxxx\" , \"sourceIp\" : [ \"1.1.1.1\" ], \"sub\" : \"192879fc-a240-4bf1-ab5a-d6a00f3063f9\" , \"username\" : \"jdoe\" }, \"source\" : null , \"request\" : { \"headers\" : { \"x-forwarded-for\" : \"1.1.1.1, 2.2.2.2\" , \"cloudfront-viewer-country\" : \"US\" , \"cloudfront-is-tablet-viewer\" : \"false\" , \"via\" : \"2.0 xxxxxxxxxxxxxxxx.cloudfront.net (CloudFront)\" , \"cloudfront-forwarded-proto\" : \"https\" , \"origin\" : \"https://us-west-1.console.aws.amazon.com\" , \"content-length\" : \"217\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"host\" : \"xxxxxxxxxxxxxxxx.appsync-api.us-west-1.amazonaws.com\" , \"x-forwarded-proto\" : \"https\" , \"user-agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36\" , \"accept\" : \"*/*\" , \"cloudfront-is-mobile-viewer\" : \"false\" , \"cloudfront-is-smarttv-viewer\" : \"false\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"referer\" : \"https://us-west-1.console.aws.amazon.com/appsync/home?region=us-west-1\" , \"content-type\" : \"application/json\" , \"sec-fetch-mode\" : \"cors\" , \"x-amz-cf-id\" : \"3aykhqlUwQeANU-HGY7E_guV5EkNeMMtwyOgiA==\" , \"x-amzn-trace-id\" : \"Root=1-5f512f51-fac632066c5e848ae714\" , \"authorization\" : \"eyJraWQiOiJScWFCSlJqYVJlM0hrSnBTUFpIcVRXazNOW...\" , \"sec-fetch-dest\" : \"empty\" , \"x-amz-user-agent\" : \"AWS-Console-AppSync/\" , \"cloudfront-is-desktop-viewer\" : \"true\" , \"sec-fetch-site\" : \"cross-site\" , \"x-forwarded-port\" : \"443\" } }, \"prev\" : null , \"info\" : { \"selectionSetList\" : [ \"id\" , \"field1\" , \"field2\" ], \"selectionSetGraphQL\" : \"{\\n id\\n field1\\n field2\\n}\" , \"parentTypeName\" : \"Mutation\" , \"fieldName\" : \"createSomething\" , \"variables\" : {} }, \"stash\" : {} } Amplify GraphQL directive { \"typeName\" : \"Merchant\" , \"fieldName\" : \"locations\" , \"arguments\" : { \"page\" : 2 , \"size\" : 1 , \"name\" : \"value\" }, \"identity\" : { \"claims\" : { \"sub\" : \"07920713-4526-4642-9c88-2953512de441\" , \"iss\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\" , \"aud\" : \"58rc9bf5kkti90ctmvioppukm9\" , \"event_id\" : \"7f4c9383-abf6-48b7-b821-91643968b755\" , \"token_use\" : \"id\" , \"auth_time\" : 1615366261 , \"name\" : \"Michael Brewer\" , \"exp\" : 1615369861 , \"iat\" : 1615366261 }, \"defaultAuthStrategy\" : \"ALLOW\" , \"groups\" : null , \"issuer\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_POOL_ID\" , \"sourceIp\" : [ \"11.215.2.22\" ], \"sub\" : \"07920713-4526-4642-9c88-2953512de441\" , \"username\" : \"mike\" }, \"source\" : { \"name\" : \"Value\" , \"nested\" : { \"name\" : \"value\" , \"list\" : [] } }, \"request\" : { \"headers\" : { \"x-forwarded-for\" : \"11.215.2.22, 64.44.173.11\" , \"cloudfront-viewer-country\" : \"US\" , \"cloudfront-is-tablet-viewer\" : \"false\" , \"via\" : \"2.0 SOMETHING.cloudfront.net (CloudFront)\" , \"cloudfront-forwarded-proto\" : \"https\" , \"origin\" : \"https://console.aws.amazon.com\" , \"content-length\" : \"156\" , \"accept-language\" : \"en-US,en;q=0.9\" , \"host\" : \"SOMETHING.appsync-api.us-east-1.amazonaws.com\" , \"x-forwarded-proto\" : \"https\" , \"sec-gpc\" : \"1\" , \"user-agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) etc.\" , \"accept\" : \"*/*\" , \"cloudfront-is-mobile-viewer\" : \"false\" , \"cloudfront-is-smarttv-viewer\" : \"false\" , \"accept-encoding\" : \"gzip, deflate, br\" , \"referer\" : \"https://console.aws.amazon.com/\" , \"content-type\" : \"application/json\" , \"sec-fetch-mode\" : \"cors\" , \"x-amz-cf-id\" : \"Fo5VIuvP6V6anIEt62WzFDCK45mzM4yEdpt5BYxOl9OFqafd-WR0cA==\" , \"x-amzn-trace-id\" : \"Root=1-60488877-0b0c4e6727ab2a1c545babd0\" , \"authorization\" : \"AUTH-HEADER\" , \"sec-fetch-dest\" : \"empty\" , \"x-amz-user-agent\" : \"AWS-Console-AppSync/\" , \"cloudfront-is-desktop-viewer\" : \"true\" , \"sec-fetch-site\" : \"cross-site\" , \"x-forwarded-port\" : \"443\" } }, \"prev\" : { \"result\" : {} } }","title":"Event examples"},{"location":"appsync-resolver/#response","text":"Response is based on the expected GraphQL response.","title":"Response"},{"location":"appsync-resolver/#libraries","text":"Typed handlers by language Python - AppSyncResolverEvent Lambda handlers by language Python - AppSyncResolver - pip aws-lambda-powertools","title":"Libraries"},{"location":"appsync-resolver/#code-examples","text":"app.py from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.event_handler import AppSyncResolver from aws_lambda_powertools.utilities.data_classes.appsync import scalar_types_utils tracer = Tracer ( service = \"sample_resolver\" ) logger = Logger ( service = \"sample_resolver\" ) app = AppSyncResolver () # Note that `creation_time` isn't available in the schema # This utility also takes into account what info you make available at API level vs what's stored TODOS = [ { \"id\" : scalar_types_utils . make_id (), # type ID or String \"title\" : \"First task\" , \"description\" : \"String\" , \"done\" : False , \"creation_time\" : scalar_types_utils . aws_datetime (), # type AWSDateTime }, { \"id\" : scalar_types_utils . make_id (), \"title\" : \"Second task\" , \"description\" : \"String\" , \"done\" : True , \"creation_time\" : scalar_types_utils . aws_datetime (), }, ] @app . resolver ( type_name = \"Query\" , field_name = \"getTodo\" ) def get_todo ( id : str = \"\" ): logger . info ( f \"Fetching Todo { id } \" ) todo = [ todo for todo in TODOS if todo [ \"id\" ] == id ] return todo @app . resolver ( type_name = \"Query\" , field_name = \"listTodos\" ) def list_todos (): return TODOS @logger . inject_lambda_context ( correlation_id_path = correlation_paths . APPSYNC_RESOLVER ) @tracer . capture_lambda_handler def lambda_handler ( event , context ): return app . resolve ( event , context )","title":"Code Examples"},{"location":"appsync-resolver/#reference-docs","text":"AppSync - Resolver mapping template context reference Amplify - Configure Lambda resolvers","title":"Reference Docs"},{"location":"build-project/","text":"Build Project \u00b6 Introduction \u00b6 A simple tool to generate a starter project based on cookiecutter templates. Warning This is still in progress and is not yet ready for production use :). function buildProject(form, path) { const name = form.elements[\"name\"].value || \"foo-service\"; const type = form.elements[\"type\"].value || \"sam\"; const memory = form.elements[\"memory\"].value || \"512\"; const timeout = form.elements[\"timeout\"].value || \"25\"; const architecture = form.elements[\"architecture\"].value || \"x86_64\"; const runtime = form.elements[\"runtime\"].value; const trigger = form.elements[\"trigger\"].value; let template = form.elements[\"template\"].value; if (template !== \"\") { template = \"aws-sam-cli-app-templates/\" + template; } const baseUrl = 'https://4v2ies7g1m.execute-api.us-east-2.amazonaws.com/Prod'; const uri = '/' + path + '?name=' + name + '&type=' + type + '&runtime=' + runtime + '&trigger=' + trigger + '&memory=' + memory + '&timeout=' + timeout + '&template=' + template + '&architecture=' + architecture; fetch(baseUrl + uri) .then(resp => resp.blob()) .then(blob => { const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.style.display = 'none'; a.href = url; a.download = 'generated-project.zip'; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); }) .catch(() => alert('Failed to generate project!')); } const templates = [ \"nodejs12.x/cookiecutter-typescript-app-template\", \"nodejs12.x/cookiecutter-aws-sam-hello-nodejs\", \"nodejs12.x/cookiecutter-quick-start-cloudwatch-events\", \"nodejs12.x/cookiecutter-aws-sam-step-functions-sample-app\", \"nodejs12.x/cookiecutter-quick-start-from-scratch\", \"nodejs12.x/cookiecutter-quick-start-sns\", \"nodejs12.x/cookiecutter-quick-start-s3\", \"nodejs12.x/cookiecutter-quick-start-sqs\", \"nodejs12.x/cookiecutter-quick-start-web\", \"nodejs14.x/cookiecutter-aws-sam-hello-nodejs\", \"nodejs14.x/cookiecutter-quick-start-cloudwatch-events\", \"nodejs14.x/cookiecutter-aws-sam-step-functions-sample-app\", \"nodejs14.x/cookiecutter-quick-start-from-scratch\", \"nodejs14.x/cookiecutter-quick-start-sns\", \"nodejs14.x/cookiecutter-quick-start-s3\", \"nodejs14.x/cookiecutter-quick-start-sqs\", \"nodejs14.x/cookiecutter-aws-sam-hello-typescript-nodejs\", \"nodejs14.x/cookiecutter-quick-start-web\", \"java8.al2/cookiecutter-aws-sam-hello-java-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-schema-app-java-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-hello-java-maven\", \"java8.al2/cookiecutter-aws-sam-step-functions-sample-app-gradle\", \"java8.al2/cookiecutter-aws-sam-hello-java-gradle\", \"java8.al2/cookiecutter-aws-sam-eventbridge-schema-app-java-gradle\", \"java8.al2/cookiecutter-aws-sam-step-functions-sample-app-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-hello-java-gradle\", \"java11/cookiecutter-aws-sam-hello-java-maven\", \"java11/cookiecutter-aws-sam-eventbridge-schema-app-java-maven\", \"java11/cookiecutter-aws-sam-eventbridge-hello-java-maven\", \"java11/cookiecutter-aws-sam-step-functions-sample-app-gradle\", \"java11/cookiecutter-aws-sam-hello-java-gradle\", \"java11/cookiecutter-aws-sam-eventbridge-schema-app-java-gradle\", \"java11/cookiecutter-aws-sam-step-functions-sample-app-maven\", \"java11/cookiecutter-aws-sam-eventbridge-hello-java-gradle\", \"ruby2.7/cookiecutter-aws-sam-step-functions-sample-app\", \"ruby2.7/cookiecutter-aws-sam-hello-ruby\", \"python3.7/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.7/cookiecutter-aws-sam-hello-python\", \"python3.7/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.7/cookiecutter-aws-sam-eventBridge-python\", \"python3.8/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.8/cookiecutter-aws-sam-hello-python\", \"python3.8/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.8/cookiecutter-aws-sam-eventBridge-python\", \"python3.8/cookiecutter-aws-sam-efs-python\", \"python3.9/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.9/cookiecutter-aws-sam-hello-python\", \"python3.9/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.9/cookiecutter-aws-sam-step-functions-etl-python\", \"python3.9/cookiecutter-aws-sam-eventBridge-python\", \"python3.9/cookiecutter-aws-sam-efs-python\", \"go1.x/cookiecutter-aws-sam-hello-golang\", \"go1.x/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnet6/cookiecutter-aws-sam-hello-dotnet\", \"dotnet6/cookiecutter-aws-sam-hello-powershell\", \"dotnet6/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-s3-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-cloudwatch-events-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-powershell\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-sns-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-web-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-from-scratch-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-sqs-dotnet\" ]; function runtimeChange() { const form = document.getElementById('buildSamProjectForm'); const selectedRuntime = form.elements[\"runtime\"].value; const templateSelect = document.getElementById(\"projectTemplate\"); templateSelect.innerHTML = \"\"; templates.forEach(template => { if (template.startsWith(selectedRuntime)) { const option = document.createElement(\"option\"); option.value = template; option.text = template.replace(selectedRuntime + \"/\", \"\"); templateSelect.appendChild(option); } }); } #buildProjectForm label{ float: left; width: 190px; } #buildProjectForm input{ background-color: var(--md-code-bg-color); color: var(--md-code-fg-color); } #buildSamProjectForm label{ float: left; width: 190px; } #buildSamProjectForm input{ background-color: var(--md-code-bg-color); color: var(--md-code-fg-color); } Powertools Initializer \u00b6 AWS Lambda Powertools templates Project Name : Type : SAM Template AWS CDK (TODO) Runtime : Python 3.9 Typescript (TODO) Java (TODO) Trigger : S3 S3 Object Lambda API GW Rest API Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project AWS SAM Initializer \u00b6 AWS SAM templates used at aws-sam-cli-app-templates github repo. Project Name : Runtime : .NET Core 3.1 .NET 6 Go 1.x Java 8 (AL2) Java 11 Node 12 Node 14 Python 3.7 Python 3.8 Python 3.9 Ruby 2.7 Template : Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project runtimeChange(); AWS Lambda Quickstart TODO \u00b6 aws-lambda-quickstart is a simple webservice to generate projects from various templates. Initial prototype webservice Create basic UI and deploy via GitHub pages Powertools template for s3 api ( quickstart-s3-sam-python ) Powertools template for s3 object lambda api ( quickstart-s3-object-lambda-sam-python ) Powertools template for rest api ( quickstart-rest-api-sam-python ) Powertools template for http api ( quickstart-http-api-sam-python ) Mock a better UI mock using figma BONUS: Powertools template for rest api ( quickstart-rest-api-sam-typescript ) BONUS: Powertools template for http api ( quickstart-http-api-sam-typescript ) BONUS: Powertools template for s3 api ( quickstart-s3-sam-typescript ) BONUS: Powertools CDK templates","title":"Build Project"},{"location":"build-project/#build-project","text":"","title":"Build Project"},{"location":"build-project/#introduction","text":"A simple tool to generate a starter project based on cookiecutter templates. Warning This is still in progress and is not yet ready for production use :). function buildProject(form, path) { const name = form.elements[\"name\"].value || \"foo-service\"; const type = form.elements[\"type\"].value || \"sam\"; const memory = form.elements[\"memory\"].value || \"512\"; const timeout = form.elements[\"timeout\"].value || \"25\"; const architecture = form.elements[\"architecture\"].value || \"x86_64\"; const runtime = form.elements[\"runtime\"].value; const trigger = form.elements[\"trigger\"].value; let template = form.elements[\"template\"].value; if (template !== \"\") { template = \"aws-sam-cli-app-templates/\" + template; } const baseUrl = 'https://4v2ies7g1m.execute-api.us-east-2.amazonaws.com/Prod'; const uri = '/' + path + '?name=' + name + '&type=' + type + '&runtime=' + runtime + '&trigger=' + trigger + '&memory=' + memory + '&timeout=' + timeout + '&template=' + template + '&architecture=' + architecture; fetch(baseUrl + uri) .then(resp => resp.blob()) .then(blob => { const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.style.display = 'none'; a.href = url; a.download = 'generated-project.zip'; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); }) .catch(() => alert('Failed to generate project!')); } const templates = [ \"nodejs12.x/cookiecutter-typescript-app-template\", \"nodejs12.x/cookiecutter-aws-sam-hello-nodejs\", \"nodejs12.x/cookiecutter-quick-start-cloudwatch-events\", \"nodejs12.x/cookiecutter-aws-sam-step-functions-sample-app\", \"nodejs12.x/cookiecutter-quick-start-from-scratch\", \"nodejs12.x/cookiecutter-quick-start-sns\", \"nodejs12.x/cookiecutter-quick-start-s3\", \"nodejs12.x/cookiecutter-quick-start-sqs\", \"nodejs12.x/cookiecutter-quick-start-web\", \"nodejs14.x/cookiecutter-aws-sam-hello-nodejs\", \"nodejs14.x/cookiecutter-quick-start-cloudwatch-events\", \"nodejs14.x/cookiecutter-aws-sam-step-functions-sample-app\", \"nodejs14.x/cookiecutter-quick-start-from-scratch\", \"nodejs14.x/cookiecutter-quick-start-sns\", \"nodejs14.x/cookiecutter-quick-start-s3\", \"nodejs14.x/cookiecutter-quick-start-sqs\", \"nodejs14.x/cookiecutter-aws-sam-hello-typescript-nodejs\", \"nodejs14.x/cookiecutter-quick-start-web\", \"java8.al2/cookiecutter-aws-sam-hello-java-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-schema-app-java-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-hello-java-maven\", \"java8.al2/cookiecutter-aws-sam-step-functions-sample-app-gradle\", \"java8.al2/cookiecutter-aws-sam-hello-java-gradle\", \"java8.al2/cookiecutter-aws-sam-eventbridge-schema-app-java-gradle\", \"java8.al2/cookiecutter-aws-sam-step-functions-sample-app-maven\", \"java8.al2/cookiecutter-aws-sam-eventbridge-hello-java-gradle\", \"java11/cookiecutter-aws-sam-hello-java-maven\", \"java11/cookiecutter-aws-sam-eventbridge-schema-app-java-maven\", \"java11/cookiecutter-aws-sam-eventbridge-hello-java-maven\", \"java11/cookiecutter-aws-sam-step-functions-sample-app-gradle\", \"java11/cookiecutter-aws-sam-hello-java-gradle\", \"java11/cookiecutter-aws-sam-eventbridge-schema-app-java-gradle\", \"java11/cookiecutter-aws-sam-step-functions-sample-app-maven\", \"java11/cookiecutter-aws-sam-eventbridge-hello-java-gradle\", \"ruby2.7/cookiecutter-aws-sam-step-functions-sample-app\", \"ruby2.7/cookiecutter-aws-sam-hello-ruby\", \"python3.7/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.7/cookiecutter-aws-sam-hello-python\", \"python3.7/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.7/cookiecutter-aws-sam-eventBridge-python\", \"python3.8/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.8/cookiecutter-aws-sam-hello-python\", \"python3.8/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.8/cookiecutter-aws-sam-eventBridge-python\", \"python3.8/cookiecutter-aws-sam-efs-python\", \"python3.9/cookiecutter-aws-sam-eventbridge-schema-app-python\", \"python3.9/cookiecutter-aws-sam-hello-python\", \"python3.9/cookiecutter-aws-sam-step-functions-sample-app\", \"python3.9/cookiecutter-aws-sam-step-functions-etl-python\", \"python3.9/cookiecutter-aws-sam-eventBridge-python\", \"python3.9/cookiecutter-aws-sam-efs-python\", \"go1.x/cookiecutter-aws-sam-hello-golang\", \"go1.x/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnet6/cookiecutter-aws-sam-hello-dotnet\", \"dotnet6/cookiecutter-aws-sam-hello-powershell\", \"dotnet6/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-s3-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-cloudwatch-events-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-step-functions-sample-app\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-powershell\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-sns-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-hello-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-web-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-from-scratch-dotnet\", \"dotnetcore3.1/cookiecutter-aws-sam-quick-start-sqs-dotnet\" ]; function runtimeChange() { const form = document.getElementById('buildSamProjectForm'); const selectedRuntime = form.elements[\"runtime\"].value; const templateSelect = document.getElementById(\"projectTemplate\"); templateSelect.innerHTML = \"\"; templates.forEach(template => { if (template.startsWith(selectedRuntime)) { const option = document.createElement(\"option\"); option.value = template; option.text = template.replace(selectedRuntime + \"/\", \"\"); templateSelect.appendChild(option); } }); } #buildProjectForm label{ float: left; width: 190px; } #buildProjectForm input{ background-color: var(--md-code-bg-color); color: var(--md-code-fg-color); } #buildSamProjectForm label{ float: left; width: 190px; } #buildSamProjectForm input{ background-color: var(--md-code-bg-color); color: var(--md-code-fg-color); }","title":"Introduction"},{"location":"build-project/#powertools-initializer","text":"AWS Lambda Powertools templates Project Name : Type : SAM Template AWS CDK (TODO) Runtime : Python 3.9 Typescript (TODO) Java (TODO) Trigger : S3 S3 Object Lambda API GW Rest API Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project","title":"Powertools Initializer"},{"location":"build-project/#aws-sam-initializer","text":"AWS SAM templates used at aws-sam-cli-app-templates github repo. Project Name : Runtime : .NET Core 3.1 .NET 6 Go 1.x Java 8 (AL2) Java 11 Node 12 Node 14 Python 3.7 Python 3.8 Python 3.9 Ruby 2.7 Template : Architecture : x86_64 arm64 Memory in MB : Timeout in seconds : Generate Project runtimeChange();","title":"AWS SAM Initializer"},{"location":"build-project/#aws-lambda-quickstart-todo","text":"aws-lambda-quickstart is a simple webservice to generate projects from various templates. Initial prototype webservice Create basic UI and deploy via GitHub pages Powertools template for s3 api ( quickstart-s3-sam-python ) Powertools template for s3 object lambda api ( quickstart-s3-object-lambda-sam-python ) Powertools template for rest api ( quickstart-rest-api-sam-python ) Powertools template for http api ( quickstart-http-api-sam-python ) Mock a better UI mock using figma BONUS: Powertools template for rest api ( quickstart-rest-api-sam-typescript ) BONUS: Powertools template for http api ( quickstart-http-api-sam-typescript ) BONUS: Powertools template for s3 api ( quickstart-s3-sam-typescript ) BONUS: Powertools CDK templates","title":"AWS Lambda Quickstart TODO"},{"location":"cloudformation/","text":"CloudFormation - Custom Resources \u00b6 AWS CloudFormation invokes your Lambda function asynchronously with an event that includes a callback URL. Input \u00b6 Input fields \u00b6 Create input docs Delete input docs Update input docs RequestType (String) The request type is set by the AWS CloudFormation stack operation (create-stack, update-stack, or delete-stack) that was initiated by the template developer for the stack that contains the custom resource. Must be one of: Create , Update , or Delete . ResponseURL (String) The response URL identifies a presigned S3 bucket that receives responses from the custom resource provider to AWS CloudFormation. StackId (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. Combining the StackId with the RequestId forms a value that you can use to uniquely identify a request on a particular custom resource. RequestId (String) A unique ID for the request. Combining the StackId with the RequestId forms a value that you can use to uniquely identify a request on a particular custom resource. ResourceType (String) The template developer-chosen resource type of the custom resource in the AWS CloudFormation template. Custom resource type names can be up to 60 characters long and can include alphanumeric and the following characters: _@-. LogicalResourceId (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This is provided to facilitate communication between the custom resource provider and the template developer. PhysicalResourceId (String) A required custom resource provider-defined physical ID that is unique for that provider. Required : Always sent with Update and Delete requests; never sent with Create. ResourceProperties (Optional, Object) This field contains the contents of the Properties object sent by the template developer. Its contents are defined by the custom resource provider. OldResourceProperties (Object) Used only for Update requests. Contains the resource properties that were declared previous to the update request. Input examples \u00b6 Create event { \"RequestType\" : \"Create\" , \"ServiceToken\" : \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\" , \"ResponseURL\" : \"https://cloudformation-custom-resource-response-useast2.s3-us-east-2.amazonaws.com/arn%3Aaws%3Acloudformation%3Aus-east-2%3A123456789012%3Astack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456%7Cprimerinvoke%7C5d478078-13e9-baf0-464a-7ef285ecc786?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Expires=1555451971&Signature=28UijZePE5I4dvukKQqM%2F9Rf1o4%3D\" , \"StackId\" : \"arn:aws:cloudformation:us-east-2:123456789012:stack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456\" , \"RequestId\" : \"5d478078-13e9-baf0-464a-7ef285ecc786\" , \"LogicalResourceId\" : \"primerinvoke\" , \"ResourceType\" : \"AWS::CloudFormation::CustomResource\" , \"ResourceProperties\" : { \"ServiceToken\" : \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\" , \"FunctionName\" : \"lambda-error-processor-randomerror-ZWUC391MQAJK\" } } Update event { \"RequestType\" : \"Update\" , \"ResponseURL\" : \"http://pre-signed-S3-url-for-response\" , \"StackId\" : \"arn:aws:cloudformation:eu-central-1:123456789012:stack/MyStack/guid\" , \"RequestId\" : \"unique id for this create request\" , \"ResourceType\" : \"Custom::TestResource\" , \"LogicalResourceId\" : \"MyTestResource\" , \"PhysicalResourceId\" : \"MyTestResourceId\" , \"ServiceToken\" : \"abcd\" , \"ResourceProperties\" : { \"StackName\" : \"MyStack\" , \"List\" : [ \"1\" , \"2\" , \"3\" ] }, \"OldResourceProperties\" : { \"StackName\" : \"MyStack\" , \"List\" : [ \"1\" ] } } Delete event { \"RequestType\" : \"Delete\" , \"RequestId\" : \"unique id for this delete request\" , \"ResponseURL\" : \"pre-signed-url-for-delete-response\" , \"ResourceType\" : \"Custom::MyCustomResourceType\" , \"LogicalResourceId\" : \"name of resource in template\" , \"StackId\" : \"arn:aws:cloudformation:us-east-2:namespace:stack/stack-name/guid\" , \"PhysicalResourceId\" : \"custom resource provider-defined physical id\" , \"ResourceProperties\" : { \"key1\" : \"string\" , \"key2\" : [ \"list\" ], \"key3\" : { \"key4\" : \"map\" } } } Generating sample events via SAM CLI \u00b6 sam local generate-event cloudformation create-request Response \u00b6 Responses are submitted via the pre-signed URL in the ResponseURL field of the request via the cfn-response module. Status (String) The status value sent by the custom resource provider in response to an AWS CloudFormation-generated request. Must be either SUCCESS or FAILED . Reason (String) Describes the reason for a failure response. Required : Required if Status is FAILED . It's optional otherwise. PhysicalResourceId (String) This value should be an identifier unique to the custom resource vendor, and can be up to 1 KB in size. The value must be a non-empty string and must be identical for all responses for the same resource. StackId (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. This response value should be copied verbatim from the request. RequestId (String) A unique ID for the request. This response value should be copied verbatim from the request. LogicalResourceId (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This response value should be copied verbatim from the request. NoEcho (Optional, Boolean) Optional. Indicates whether to mask the output of the custom resource when retrieved by using the Fn::GetAtt function. If set to true, all returned values are masked with asterisks ( ***** ), except for those stored in the Metadata section of the template. AWS CloudFormation does not transform, modify, or redact any information you include in the Metadata section. The default value is false . Data (Optional, Object) Optional. The custom resource provider-defined name-value pairs to send with the response. You can access the values provided here by name in the template with Fn::GetAtt . The following is an example of a custom resource response { \"Status\" : \"SUCCESS\" , \"PhysicalResourceId\" : \"Tester1\" , \"StackId\" : \"arn:aws:cloudformation:us-west-2:123456789012:stack/stack-name/guid\" , \"RequestId\" : \"unique id for this create request\" , \"LogicalResourceId\" : \"MySeleniumTester\" , \"Data\" : { \"resultsPage\" : \"http://www.myexampledomain/test-results/guid\" , \"lastUpdate\" : \"2012-11-14T03:30Z\" , } } Libraries \u00b6 Custom Resource handlers Custom Resource Helper - Python - pip crhelper Custom Resources Handler - Java - Maven software.amazon.lambda:powertools-cloudformation cfn-response module Custom resource typing and data classes Java - CloudFormationCustomResourceEvent Go - - github.com/aws/aws-lambda-go/cfn Code Examples \u00b6 app.py from __future__ import print_function from crhelper import CfnResource import logging logger = logging . getLogger ( __name__ ) # Initialise the helper, all inputs are optional, this example shows the defaults helper = CfnResource ( json_logging = False , log_level = 'DEBUG' , boto_level = 'CRITICAL' , sleep_on_delete = 120 , ssl_verify = None ) try : ## Init code goes here pass except Exception as e : helper . init_failure ( e ) @helper . create def create ( event , context ): logger . info ( \"Got Create\" ) # Optionally return an ID that will be used for the resource PhysicalResourceId, # if None is returned an ID will be generated. If a poll_create function is defined # return value is placed into the poll event as event['CrHelperData']['PhysicalResourceId'] # # To add response data update the helper.Data dict # If poll is enabled data is placed into poll event as event['CrHelperData'] helper . Data . update ({ \"test\" : \"testdata\" }) # To return an error to cloudformation you raise an exception: if not helper . Data . get ( \"test\" ): raise ValueError ( \"this error will show in the cloudformation events log and console.\" ) return \"MyResourceId\" @helper . update def update ( event , context ): logger . info ( \"Got Update\" ) # If the update resulted in a new resource being created, return an id for the new resource. # CloudFormation will send a delete event with the old id when stack update completes @helper . delete def delete ( event , context ): logger . info ( \"Got Delete\" ) # Delete never returns anything. Should not fail if the underlying resources are already deleted. # Desired state. @helper . poll_create def poll_create ( event , context ): logger . info ( \"Got create poll\" ) # Return a resource id or True to indicate that creation is complete. if True is returned an id # will be generated return True def handler ( event , context ): helper ( event , context ) Reference Docs \u00b6 Using AWS Lambda with AWS CloudFormation AWS CloudFormation custom resource creation with Python, AWS Lambda, and crhelper Custom resource provider request fields Custom resource response objects","title":"Custom Resources"},{"location":"cloudformation/#cloudformation-custom-resources","text":"AWS CloudFormation invokes your Lambda function asynchronously with an event that includes a callback URL.","title":"CloudFormation - Custom Resources"},{"location":"cloudformation/#input","text":"","title":"Input"},{"location":"cloudformation/#input-fields","text":"Create input docs Delete input docs Update input docs RequestType (String) The request type is set by the AWS CloudFormation stack operation (create-stack, update-stack, or delete-stack) that was initiated by the template developer for the stack that contains the custom resource. Must be one of: Create , Update , or Delete . ResponseURL (String) The response URL identifies a presigned S3 bucket that receives responses from the custom resource provider to AWS CloudFormation. StackId (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. Combining the StackId with the RequestId forms a value that you can use to uniquely identify a request on a particular custom resource. RequestId (String) A unique ID for the request. Combining the StackId with the RequestId forms a value that you can use to uniquely identify a request on a particular custom resource. ResourceType (String) The template developer-chosen resource type of the custom resource in the AWS CloudFormation template. Custom resource type names can be up to 60 characters long and can include alphanumeric and the following characters: _@-. LogicalResourceId (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This is provided to facilitate communication between the custom resource provider and the template developer. PhysicalResourceId (String) A required custom resource provider-defined physical ID that is unique for that provider. Required : Always sent with Update and Delete requests; never sent with Create. ResourceProperties (Optional, Object) This field contains the contents of the Properties object sent by the template developer. Its contents are defined by the custom resource provider. OldResourceProperties (Object) Used only for Update requests. Contains the resource properties that were declared previous to the update request.","title":"Input fields"},{"location":"cloudformation/#input-examples","text":"Create event { \"RequestType\" : \"Create\" , \"ServiceToken\" : \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\" , \"ResponseURL\" : \"https://cloudformation-custom-resource-response-useast2.s3-us-east-2.amazonaws.com/arn%3Aaws%3Acloudformation%3Aus-east-2%3A123456789012%3Astack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456%7Cprimerinvoke%7C5d478078-13e9-baf0-464a-7ef285ecc786?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Expires=1555451971&Signature=28UijZePE5I4dvukKQqM%2F9Rf1o4%3D\" , \"StackId\" : \"arn:aws:cloudformation:us-east-2:123456789012:stack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456\" , \"RequestId\" : \"5d478078-13e9-baf0-464a-7ef285ecc786\" , \"LogicalResourceId\" : \"primerinvoke\" , \"ResourceType\" : \"AWS::CloudFormation::CustomResource\" , \"ResourceProperties\" : { \"ServiceToken\" : \"arn:aws:lambda:us-east-2:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\" , \"FunctionName\" : \"lambda-error-processor-randomerror-ZWUC391MQAJK\" } } Update event { \"RequestType\" : \"Update\" , \"ResponseURL\" : \"http://pre-signed-S3-url-for-response\" , \"StackId\" : \"arn:aws:cloudformation:eu-central-1:123456789012:stack/MyStack/guid\" , \"RequestId\" : \"unique id for this create request\" , \"ResourceType\" : \"Custom::TestResource\" , \"LogicalResourceId\" : \"MyTestResource\" , \"PhysicalResourceId\" : \"MyTestResourceId\" , \"ServiceToken\" : \"abcd\" , \"ResourceProperties\" : { \"StackName\" : \"MyStack\" , \"List\" : [ \"1\" , \"2\" , \"3\" ] }, \"OldResourceProperties\" : { \"StackName\" : \"MyStack\" , \"List\" : [ \"1\" ] } } Delete event { \"RequestType\" : \"Delete\" , \"RequestId\" : \"unique id for this delete request\" , \"ResponseURL\" : \"pre-signed-url-for-delete-response\" , \"ResourceType\" : \"Custom::MyCustomResourceType\" , \"LogicalResourceId\" : \"name of resource in template\" , \"StackId\" : \"arn:aws:cloudformation:us-east-2:namespace:stack/stack-name/guid\" , \"PhysicalResourceId\" : \"custom resource provider-defined physical id\" , \"ResourceProperties\" : { \"key1\" : \"string\" , \"key2\" : [ \"list\" ], \"key3\" : { \"key4\" : \"map\" } } }","title":"Input examples"},{"location":"cloudformation/#generating-sample-events-via-sam-cli","text":"sam local generate-event cloudformation create-request","title":"Generating sample events via SAM CLI"},{"location":"cloudformation/#response","text":"Responses are submitted via the pre-signed URL in the ResponseURL field of the request via the cfn-response module. Status (String) The status value sent by the custom resource provider in response to an AWS CloudFormation-generated request. Must be either SUCCESS or FAILED . Reason (String) Describes the reason for a failure response. Required : Required if Status is FAILED . It's optional otherwise. PhysicalResourceId (String) This value should be an identifier unique to the custom resource vendor, and can be up to 1 KB in size. The value must be a non-empty string and must be identical for all responses for the same resource. StackId (String) The Amazon Resource Name (ARN) that identifies the stack that contains the custom resource. This response value should be copied verbatim from the request. RequestId (String) A unique ID for the request. This response value should be copied verbatim from the request. LogicalResourceId (String) The template developer-chosen name (logical ID) of the custom resource in the AWS CloudFormation template. This response value should be copied verbatim from the request. NoEcho (Optional, Boolean) Optional. Indicates whether to mask the output of the custom resource when retrieved by using the Fn::GetAtt function. If set to true, all returned values are masked with asterisks ( ***** ), except for those stored in the Metadata section of the template. AWS CloudFormation does not transform, modify, or redact any information you include in the Metadata section. The default value is false . Data (Optional, Object) Optional. The custom resource provider-defined name-value pairs to send with the response. You can access the values provided here by name in the template with Fn::GetAtt . The following is an example of a custom resource response { \"Status\" : \"SUCCESS\" , \"PhysicalResourceId\" : \"Tester1\" , \"StackId\" : \"arn:aws:cloudformation:us-west-2:123456789012:stack/stack-name/guid\" , \"RequestId\" : \"unique id for this create request\" , \"LogicalResourceId\" : \"MySeleniumTester\" , \"Data\" : { \"resultsPage\" : \"http://www.myexampledomain/test-results/guid\" , \"lastUpdate\" : \"2012-11-14T03:30Z\" , } }","title":"Response"},{"location":"cloudformation/#libraries","text":"Custom Resource handlers Custom Resource Helper - Python - pip crhelper Custom Resources Handler - Java - Maven software.amazon.lambda:powertools-cloudformation cfn-response module Custom resource typing and data classes Java - CloudFormationCustomResourceEvent Go - - github.com/aws/aws-lambda-go/cfn","title":"Libraries"},{"location":"cloudformation/#code-examples","text":"app.py from __future__ import print_function from crhelper import CfnResource import logging logger = logging . getLogger ( __name__ ) # Initialise the helper, all inputs are optional, this example shows the defaults helper = CfnResource ( json_logging = False , log_level = 'DEBUG' , boto_level = 'CRITICAL' , sleep_on_delete = 120 , ssl_verify = None ) try : ## Init code goes here pass except Exception as e : helper . init_failure ( e ) @helper . create def create ( event , context ): logger . info ( \"Got Create\" ) # Optionally return an ID that will be used for the resource PhysicalResourceId, # if None is returned an ID will be generated. If a poll_create function is defined # return value is placed into the poll event as event['CrHelperData']['PhysicalResourceId'] # # To add response data update the helper.Data dict # If poll is enabled data is placed into poll event as event['CrHelperData'] helper . Data . update ({ \"test\" : \"testdata\" }) # To return an error to cloudformation you raise an exception: if not helper . Data . get ( \"test\" ): raise ValueError ( \"this error will show in the cloudformation events log and console.\" ) return \"MyResourceId\" @helper . update def update ( event , context ): logger . info ( \"Got Update\" ) # If the update resulted in a new resource being created, return an id for the new resource. # CloudFormation will send a delete event with the old id when stack update completes @helper . delete def delete ( event , context ): logger . info ( \"Got Delete\" ) # Delete never returns anything. Should not fail if the underlying resources are already deleted. # Desired state. @helper . poll_create def poll_create ( event , context ): logger . info ( \"Got create poll\" ) # Return a resource id or True to indicate that creation is complete. if True is returned an id # will be generated return True def handler ( event , context ): helper ( event , context )","title":"Code Examples"},{"location":"cloudformation/#reference-docs","text":"Using AWS Lambda with AWS CloudFormation AWS CloudFormation custom resource creation with Python, AWS Lambda, and crhelper Custom resource provider request fields Custom resource response objects","title":"Reference Docs"},{"location":"cloudfront-function/","text":"CloudFront Function \u00b6 With CloudFront Functions, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations. The CloudFront Functions runtime environment offers submillisecond startup times, scales immediately to handle millions of requests per second, and is highly secure. CloudFront Functions is a native feature of CloudFront, which means you can build, test, and deploy your code entirely within CloudFront. Note CloudFront Functions are at all like AWS Lambda Functions, as they are JavaScript only and have no lambda context. Limits \u00b6 JavaScript (ECMAScript 5.1 compliant) Event sources - Viewer request pr viewer response 10,000,000 requests per second or more Submillisecond duration 2 MB maximum memory 10 KB maximum size of a function No network access No file system access No access to request body Can access to geolocation and device data Can build and test entirely within CloudFront Function logging and metrics Request \u00b6 version - (String, required) The version field contains a string that specifies the version of the CloudFront Functions event object. The current version is 1.0 . context - (Object, required) The context object contains contextual information about the event. It includes the following fields: distributionDomainName - The CloudFront domain name (for example, d111111abcdef8.cloudfront.net ) of the distribution that\u2019s associated with the event. distributionId - The ID of the distribution (for example, EDFDVBD6EXAMPLE ) that\u2019s associated with the event. eventType - The event type, either viewer-request or viewer-response . requestId - A string that uniquely identifies a CloudFront request (and its associated response). viewer - (Object, required) The request object contains a representation of a viewer-to-CloudFront HTTP request. In the event object that\u2019s passed to your function, the request object represents the actual request that CloudFront received from the viewer. The request object contains the following fields: method - The HTTP method of the request. uri - The URI of the request. querystring - An object that represents the query string in the request. headers - An object that represents the HTTP headers in the request. cookies - An object that represents the cookies in the request ( Cookie headers). Event Structure { \"version\" : \"1.0\" , \"context\" : { <co nte x t objec t > }, \"viewer\" : { <viewer objec t > }, \"request\" : { <reques t objec t > }, \"response\" : { <respo nse objec t > } } Getting the correlation id \u00b6 JSON path to correlation id: context.requestId Response \u00b6 The response object contains a representation of a CloudFront-to-viewer HTTP response. In the event object that\u2019s passed to your function, the response object represents CloudFront\u2019s actual response to a viewer request. If your function code returns a response object, it must use this same structure. The response object contains the following fields: statusCode (Integer, required) The HTTP status code of the response. This value is an integer, not a string. statusDescription (String) The HTTP status description of the response. If your function code generates a response, this field is optional. headers (Object) An object that represents the HTTP headers in the response. Cookies are represented separately in the cookies object. cookies (Object) An object that represents the cookies in the response ( Set-Cookie headers). Example \u00b6 Note The event object is the input to your function. Your function returns only the request or response object, not the complete event object. The following example shows a complete event object. { \"version\" : \"1.0\" , \"context\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-response\" , \"requestId\" : \"EXAMPLEntjQpEXAMPLE_SG5Z-EXAMPLEPmPfEXAMPLEu3EqEXAMPLE==\" }, \"viewer\" : { \"ip\" : \"198.51.100.11\" }, \"request\" : { \"method\" : \"GET\" , \"uri\" : \"/media/index.mpd\" , \"querystring\" : { \"ID\" : { \"value\" : \"42\" }, \"Exp\" : { \"value\" : \"1619740800\" }, \"TTL\" : { \"value\" : \"1440\" }, \"NoValue\" : { \"value\" : \"\" }, \"querymv\" : { \"value\" : \"val1\" , \"multiValue\" : [ { \"value\" : \"val1\" }, { \"value\" : \"val2,val3\" } ] } }, \"headers\" : { \"host\" : { \"value\" : \"video.example.com\" }, \"user-agent\" : { \"value\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0\" }, \"accept\" : { \"value\" : \"application/json\" , \"multiValue\" : [ { \"value\" : \"application/json\" }, { \"value\" : \"application/xml\" }, { \"value\" : \"text/html\" } ] }, \"accept-language\" : { \"value\" : \"en-GB,en;q=0.5\" }, \"accept-encoding\" : { \"value\" : \"gzip, deflate, br\" }, \"origin\" : { \"value\" : \"https://website.example.com\" }, \"referer\" : { \"value\" : \"https://website.example.com/videos/12345678?action=play\" }, \"cloudfront-viewer-country\" : { \"value\" : \"GB\" } }, \"cookies\" : { \"Cookie1\" : { \"value\" : \"value1\" }, \"Cookie2\" : { \"value\" : \"value2\" }, \"cookie_consent\" : { \"value\" : \"true\" }, \"cookiemv\" : { \"value\" : \"value3\" , \"multiValue\" : [ { \"value\" : \"value3\" }, { \"value\" : \"value4\" } ] } } }, \"response\" : { \"statusCode\" : 200 , \"statusDescription\" : \"OK\" , \"headers\" : { \"date\" : { \"value\" : \"Mon, 04 Apr 2021 18:57:56 GMT\" }, \"server\" : { \"value\" : \"gunicorn/19.9.0\" }, \"access-control-allow-origin\" : { \"value\" : \"*\" }, \"access-control-allow-credentials\" : { \"value\" : \"true\" }, \"content-type\" : { \"value\" : \"application/json\" }, \"content-length\" : { \"value\" : \"701\" } }, \"cookies\" : { \"ID\" : { \"value\" : \"id1234\" , \"attributes\" : \"Expires=Wed, 05 Apr 2021 07:28:00 GMT\" }, \"Cookie1\" : { \"value\" : \"val1\" , \"attributes\" : \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\" , \"multiValue\" : [ { \"value\" : \"val1\" , \"attributes\" : \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\" }, { \"value\" : \"val2\" , \"attributes\" : \"Path=/cat; Domain=example.com; Expires=Wed, 10 Jan 2021 07:28:00 GMT\" } ] } } } } Code Examples \u00b6 Add security headers to the response function handler ( event ) { var response = event . response ; var headers = response . headers ; // Set HTTP security headers // Since JavaScript doesn't allow for hyphens in variable names, we use the dict[\"key\"] notation headers [ 'strict-transport-security' ] = { value : 'max-age=63072000; includeSubdomains; preload' }; headers [ 'content-security-policy' ] = { value : \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\" }; headers [ 'x-content-type-options' ] = { value : 'nosniff' }; headers [ 'x-frame-options' ] = { value : 'DENY' }; headers [ 'x-xss-protection' ] = { value : '1; mode=block' }; // Return the response to viewers return response ; } Example code for CloudFront Functions Amazon CloudFront Functions Documentation \u00b6 Introducing CloudFront Functions \u2013 Run Your Code at the Edge with Low Latency at Any Scale CloudFront Functions event structure Migrating from Lambda@Edge to CloudFront Functions","title":"CloudFront Function"},{"location":"cloudfront-function/#cloudfront-function","text":"With CloudFront Functions, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations. The CloudFront Functions runtime environment offers submillisecond startup times, scales immediately to handle millions of requests per second, and is highly secure. CloudFront Functions is a native feature of CloudFront, which means you can build, test, and deploy your code entirely within CloudFront. Note CloudFront Functions are at all like AWS Lambda Functions, as they are JavaScript only and have no lambda context.","title":"CloudFront Function"},{"location":"cloudfront-function/#limits","text":"JavaScript (ECMAScript 5.1 compliant) Event sources - Viewer request pr viewer response 10,000,000 requests per second or more Submillisecond duration 2 MB maximum memory 10 KB maximum size of a function No network access No file system access No access to request body Can access to geolocation and device data Can build and test entirely within CloudFront Function logging and metrics","title":"Limits"},{"location":"cloudfront-function/#request","text":"version - (String, required) The version field contains a string that specifies the version of the CloudFront Functions event object. The current version is 1.0 . context - (Object, required) The context object contains contextual information about the event. It includes the following fields: distributionDomainName - The CloudFront domain name (for example, d111111abcdef8.cloudfront.net ) of the distribution that\u2019s associated with the event. distributionId - The ID of the distribution (for example, EDFDVBD6EXAMPLE ) that\u2019s associated with the event. eventType - The event type, either viewer-request or viewer-response . requestId - A string that uniquely identifies a CloudFront request (and its associated response). viewer - (Object, required) The request object contains a representation of a viewer-to-CloudFront HTTP request. In the event object that\u2019s passed to your function, the request object represents the actual request that CloudFront received from the viewer. The request object contains the following fields: method - The HTTP method of the request. uri - The URI of the request. querystring - An object that represents the query string in the request. headers - An object that represents the HTTP headers in the request. cookies - An object that represents the cookies in the request ( Cookie headers). Event Structure { \"version\" : \"1.0\" , \"context\" : { <co nte x t objec t > }, \"viewer\" : { <viewer objec t > }, \"request\" : { <reques t objec t > }, \"response\" : { <respo nse objec t > } }","title":"Request"},{"location":"cloudfront-function/#getting-the-correlation-id","text":"JSON path to correlation id: context.requestId","title":"Getting the correlation id"},{"location":"cloudfront-function/#response","text":"The response object contains a representation of a CloudFront-to-viewer HTTP response. In the event object that\u2019s passed to your function, the response object represents CloudFront\u2019s actual response to a viewer request. If your function code returns a response object, it must use this same structure. The response object contains the following fields: statusCode (Integer, required) The HTTP status code of the response. This value is an integer, not a string. statusDescription (String) The HTTP status description of the response. If your function code generates a response, this field is optional. headers (Object) An object that represents the HTTP headers in the response. Cookies are represented separately in the cookies object. cookies (Object) An object that represents the cookies in the response ( Set-Cookie headers).","title":"Response"},{"location":"cloudfront-function/#example","text":"Note The event object is the input to your function. Your function returns only the request or response object, not the complete event object. The following example shows a complete event object. { \"version\" : \"1.0\" , \"context\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-response\" , \"requestId\" : \"EXAMPLEntjQpEXAMPLE_SG5Z-EXAMPLEPmPfEXAMPLEu3EqEXAMPLE==\" }, \"viewer\" : { \"ip\" : \"198.51.100.11\" }, \"request\" : { \"method\" : \"GET\" , \"uri\" : \"/media/index.mpd\" , \"querystring\" : { \"ID\" : { \"value\" : \"42\" }, \"Exp\" : { \"value\" : \"1619740800\" }, \"TTL\" : { \"value\" : \"1440\" }, \"NoValue\" : { \"value\" : \"\" }, \"querymv\" : { \"value\" : \"val1\" , \"multiValue\" : [ { \"value\" : \"val1\" }, { \"value\" : \"val2,val3\" } ] } }, \"headers\" : { \"host\" : { \"value\" : \"video.example.com\" }, \"user-agent\" : { \"value\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0\" }, \"accept\" : { \"value\" : \"application/json\" , \"multiValue\" : [ { \"value\" : \"application/json\" }, { \"value\" : \"application/xml\" }, { \"value\" : \"text/html\" } ] }, \"accept-language\" : { \"value\" : \"en-GB,en;q=0.5\" }, \"accept-encoding\" : { \"value\" : \"gzip, deflate, br\" }, \"origin\" : { \"value\" : \"https://website.example.com\" }, \"referer\" : { \"value\" : \"https://website.example.com/videos/12345678?action=play\" }, \"cloudfront-viewer-country\" : { \"value\" : \"GB\" } }, \"cookies\" : { \"Cookie1\" : { \"value\" : \"value1\" }, \"Cookie2\" : { \"value\" : \"value2\" }, \"cookie_consent\" : { \"value\" : \"true\" }, \"cookiemv\" : { \"value\" : \"value3\" , \"multiValue\" : [ { \"value\" : \"value3\" }, { \"value\" : \"value4\" } ] } } }, \"response\" : { \"statusCode\" : 200 , \"statusDescription\" : \"OK\" , \"headers\" : { \"date\" : { \"value\" : \"Mon, 04 Apr 2021 18:57:56 GMT\" }, \"server\" : { \"value\" : \"gunicorn/19.9.0\" }, \"access-control-allow-origin\" : { \"value\" : \"*\" }, \"access-control-allow-credentials\" : { \"value\" : \"true\" }, \"content-type\" : { \"value\" : \"application/json\" }, \"content-length\" : { \"value\" : \"701\" } }, \"cookies\" : { \"ID\" : { \"value\" : \"id1234\" , \"attributes\" : \"Expires=Wed, 05 Apr 2021 07:28:00 GMT\" }, \"Cookie1\" : { \"value\" : \"val1\" , \"attributes\" : \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\" , \"multiValue\" : [ { \"value\" : \"val1\" , \"attributes\" : \"Secure; Path=/; Domain=example.com; Expires=Wed, 05 Apr 2021 07:28:00 GMT\" }, { \"value\" : \"val2\" , \"attributes\" : \"Path=/cat; Domain=example.com; Expires=Wed, 10 Jan 2021 07:28:00 GMT\" } ] } } } }","title":"Example"},{"location":"cloudfront-function/#code-examples","text":"Add security headers to the response function handler ( event ) { var response = event . response ; var headers = response . headers ; // Set HTTP security headers // Since JavaScript doesn't allow for hyphens in variable names, we use the dict[\"key\"] notation headers [ 'strict-transport-security' ] = { value : 'max-age=63072000; includeSubdomains; preload' }; headers [ 'content-security-policy' ] = { value : \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\" }; headers [ 'x-content-type-options' ] = { value : 'nosniff' }; headers [ 'x-frame-options' ] = { value : 'DENY' }; headers [ 'x-xss-protection' ] = { value : '1; mode=block' }; // Return the response to viewers return response ; } Example code for CloudFront Functions Amazon CloudFront Functions","title":"Code Examples"},{"location":"cloudfront-function/#documentation","text":"Introducing CloudFront Functions \u2013 Run Your Code at the Edge with Low Latency at Any Scale CloudFront Functions event structure Migrating from Lambda@Edge to CloudFront Functions","title":"Documentation"},{"location":"cloudfront-lambda-edge/","text":"CloudFront Lambda@Edge \u00b6 CloudFront invokes lambda synchrously. Can be Node.js or Python. Limits \u00b6 Up to 5 seconds (viewer request and viewer response). Up to 30 seconds (origin request and origin response). 1 MB code size (viewer request and viewer response). 50 MB code size (origin request and origin response) Node.js and Python runtimes only Up to 10,000 requests per second per Region 128 \u2013 3,008 MB memory Request \u00b6 Generating sample event \u00b6 Via AWS SAM CLI to can generate sample events # Get list of event templates for cloudfront sam local generate-event # Generate event do custom region sam local generate-event ses email-receiving --region us-west-1 --dns-suffix us-west-1.amazonaws.com Example viewer request \u00b6 { \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-request\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"d111111abcdef8.cloudfront.net\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"curl/7.66.0\" } ], \"accept\" : [ { \"key\" : \"accept\" , \"value\" : \"*/*\" } ] }, \"method\" : \"GET\" , \"querystring\" : \"\" , \"uri\" : \"/\" } } } ] } Example origin request \u00b6 { \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"origin-request\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"x-forwarded-for\" : [ { \"key\" : \"X-Forwarded-For\" , \"value\" : \"203.0.113.178\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"Amazon CloudFront\" } ], \"via\" : [ { \"key\" : \"Via\" , \"value\" : \"2.0 2afae0d44e2540f472c0635ab62c232b.cloudfront.net (CloudFront)\" } ], \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"example.org\" } ], \"cache-control\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache, cf-no-cache\" } ] }, \"method\" : \"GET\" , \"origin\" : { \"custom\" : { \"customHeaders\" : {}, \"domainName\" : \"example.org\" , \"keepaliveTimeout\" : 5 , \"path\" : \"\" , \"port\" : 443 , \"protocol\" : \"https\" , \"readTimeout\" : 30 , \"sslProtocols\" : [ \"TLSv1\" , \"TLSv1.1\" , \"TLSv1.2\" ] } }, \"querystring\" : \"\" , \"uri\" : \"/\" } } } ] } Response \u00b6 Example viewer response \u00b6 { \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-response\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"d111111abcdef8.cloudfront.net\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"curl/7.66.0\" } ], \"accept\" : [ { \"key\" : \"accept\" , \"value\" : \"*/*\" } ] }, \"method\" : \"GET\" , \"querystring\" : \"\" , \"uri\" : \"/\" }, \"response\" : { \"headers\" : { \"access-control-allow-credentials\" : [ { \"key\" : \"Access-Control-Allow-Credentials\" , \"value\" : \"true\" } ], \"access-control-allow-origin\" : [ { \"key\" : \"Access-Control-Allow-Origin\" , \"value\" : \"*\" } ], \"date\" : [ { \"key\" : \"Date\" , \"value\" : \"Mon, 13 Jan 2020 20:14:56 GMT\" } ], \"referrer-policy\" : [ { \"key\" : \"Referrer-Policy\" , \"value\" : \"no-referrer-when-downgrade\" } ], \"server\" : [ { \"key\" : \"Server\" , \"value\" : \"ExampleCustomOriginServer\" } ], \"x-content-type-options\" : [ { \"key\" : \"X-Content-Type-Options\" , \"value\" : \"nosniff\" } ], \"x-frame-options\" : [ { \"key\" : \"X-Frame-Options\" , \"value\" : \"DENY\" } ], \"x-xss-protection\" : [ { \"key\" : \"X-XSS-Protection\" , \"value\" : \"1; mode=block\" } ], \"age\" : [ { \"key\" : \"Age\" , \"value\" : \"2402\" } ], \"content-type\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"text/html; charset=utf-8\" } ], \"content-length\" : [ { \"key\" : \"Content-Length\" , \"value\" : \"9593\" } ] }, \"status\" : \"200\" , \"statusDescription\" : \"OK\" } } } ] } Example origin response \u00b6 { \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"origin-response\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"x-forwarded-for\" : [ { \"key\" : \"X-Forwarded-For\" , \"value\" : \"203.0.113.178\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"Amazon CloudFront\" } ], \"via\" : [ { \"key\" : \"Via\" , \"value\" : \"2.0 8f22423015641505b8c857a37450d6c0.cloudfront.net (CloudFront)\" } ], \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"example.org\" } ], \"cache-control\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache, cf-no-cache\" } ] }, \"method\" : \"GET\" , \"origin\" : { \"custom\" : { \"customHeaders\" : {}, \"domainName\" : \"example.org\" , \"keepaliveTimeout\" : 5 , \"path\" : \"\" , \"port\" : 443 , \"protocol\" : \"https\" , \"readTimeout\" : 30 , \"sslProtocols\" : [ \"TLSv1\" , \"TLSv1.1\" , \"TLSv1.2\" ] } }, \"querystring\" : \"\" , \"uri\" : \"/\" }, \"response\" : { \"headers\" : { \"access-control-allow-credentials\" : [ { \"key\" : \"Access-Control-Allow-Credentials\" , \"value\" : \"true\" } ], \"access-control-allow-origin\" : [ { \"key\" : \"Access-Control-Allow-Origin\" , \"value\" : \"*\" } ], \"date\" : [ { \"key\" : \"Date\" , \"value\" : \"Mon, 13 Jan 2020 20:12:38 GMT\" } ], \"referrer-policy\" : [ { \"key\" : \"Referrer-Policy\" , \"value\" : \"no-referrer-when-downgrade\" } ], \"server\" : [ { \"key\" : \"Server\" , \"value\" : \"ExampleCustomOriginServer\" } ], \"x-content-type-options\" : [ { \"key\" : \"X-Content-Type-Options\" , \"value\" : \"nosniff\" } ], \"x-frame-options\" : [ { \"key\" : \"X-Frame-Options\" , \"value\" : \"DENY\" } ], \"x-xss-protection\" : [ { \"key\" : \"X-XSS-Protection\" , \"value\" : \"1; mode=block\" } ], \"content-type\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"text/html; charset=utf-8\" } ], \"content-length\" : [ { \"key\" : \"Content-Length\" , \"value\" : \"9593\" } ] }, \"status\" : \"200\" , \"statusDescription\" : \"OK\" } } } ] } Libraries \u00b6 Typescript - cloudfront-request.d.ts - NPM @types/aws-lambda Reference Docs \u00b6 Lambda@Edge event structure","title":"CloudFront Lambda@Edge"},{"location":"cloudfront-lambda-edge/#cloudfront-lambdaedge","text":"CloudFront invokes lambda synchrously. Can be Node.js or Python.","title":"CloudFront Lambda@Edge"},{"location":"cloudfront-lambda-edge/#limits","text":"Up to 5 seconds (viewer request and viewer response). Up to 30 seconds (origin request and origin response). 1 MB code size (viewer request and viewer response). 50 MB code size (origin request and origin response) Node.js and Python runtimes only Up to 10,000 requests per second per Region 128 \u2013 3,008 MB memory","title":"Limits"},{"location":"cloudfront-lambda-edge/#request","text":"","title":"Request"},{"location":"cloudfront-lambda-edge/#generating-sample-event","text":"Via AWS SAM CLI to can generate sample events # Get list of event templates for cloudfront sam local generate-event # Generate event do custom region sam local generate-event ses email-receiving --region us-west-1 --dns-suffix us-west-1.amazonaws.com","title":"Generating sample event"},{"location":"cloudfront-lambda-edge/#example-viewer-request","text":"{ \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-request\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"d111111abcdef8.cloudfront.net\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"curl/7.66.0\" } ], \"accept\" : [ { \"key\" : \"accept\" , \"value\" : \"*/*\" } ] }, \"method\" : \"GET\" , \"querystring\" : \"\" , \"uri\" : \"/\" } } } ] }","title":"Example viewer request"},{"location":"cloudfront-lambda-edge/#example-origin-request","text":"{ \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"origin-request\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"x-forwarded-for\" : [ { \"key\" : \"X-Forwarded-For\" , \"value\" : \"203.0.113.178\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"Amazon CloudFront\" } ], \"via\" : [ { \"key\" : \"Via\" , \"value\" : \"2.0 2afae0d44e2540f472c0635ab62c232b.cloudfront.net (CloudFront)\" } ], \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"example.org\" } ], \"cache-control\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache, cf-no-cache\" } ] }, \"method\" : \"GET\" , \"origin\" : { \"custom\" : { \"customHeaders\" : {}, \"domainName\" : \"example.org\" , \"keepaliveTimeout\" : 5 , \"path\" : \"\" , \"port\" : 443 , \"protocol\" : \"https\" , \"readTimeout\" : 30 , \"sslProtocols\" : [ \"TLSv1\" , \"TLSv1.1\" , \"TLSv1.2\" ] } }, \"querystring\" : \"\" , \"uri\" : \"/\" } } } ] }","title":"Example origin request"},{"location":"cloudfront-lambda-edge/#response","text":"","title":"Response"},{"location":"cloudfront-lambda-edge/#example-viewer-response","text":"{ \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"viewer-response\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"d111111abcdef8.cloudfront.net\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"curl/7.66.0\" } ], \"accept\" : [ { \"key\" : \"accept\" , \"value\" : \"*/*\" } ] }, \"method\" : \"GET\" , \"querystring\" : \"\" , \"uri\" : \"/\" }, \"response\" : { \"headers\" : { \"access-control-allow-credentials\" : [ { \"key\" : \"Access-Control-Allow-Credentials\" , \"value\" : \"true\" } ], \"access-control-allow-origin\" : [ { \"key\" : \"Access-Control-Allow-Origin\" , \"value\" : \"*\" } ], \"date\" : [ { \"key\" : \"Date\" , \"value\" : \"Mon, 13 Jan 2020 20:14:56 GMT\" } ], \"referrer-policy\" : [ { \"key\" : \"Referrer-Policy\" , \"value\" : \"no-referrer-when-downgrade\" } ], \"server\" : [ { \"key\" : \"Server\" , \"value\" : \"ExampleCustomOriginServer\" } ], \"x-content-type-options\" : [ { \"key\" : \"X-Content-Type-Options\" , \"value\" : \"nosniff\" } ], \"x-frame-options\" : [ { \"key\" : \"X-Frame-Options\" , \"value\" : \"DENY\" } ], \"x-xss-protection\" : [ { \"key\" : \"X-XSS-Protection\" , \"value\" : \"1; mode=block\" } ], \"age\" : [ { \"key\" : \"Age\" , \"value\" : \"2402\" } ], \"content-type\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"text/html; charset=utf-8\" } ], \"content-length\" : [ { \"key\" : \"Content-Length\" , \"value\" : \"9593\" } ] }, \"status\" : \"200\" , \"statusDescription\" : \"OK\" } } } ] }","title":"Example viewer response"},{"location":"cloudfront-lambda-edge/#example-origin-response","text":"{ \"Records\" : [ { \"cf\" : { \"config\" : { \"distributionDomainName\" : \"d111111abcdef8.cloudfront.net\" , \"distributionId\" : \"EDFDVBD6EXAMPLE\" , \"eventType\" : \"origin-response\" , \"requestId\" : \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\" }, \"request\" : { \"clientIp\" : \"203.0.113.178\" , \"headers\" : { \"x-forwarded-for\" : [ { \"key\" : \"X-Forwarded-For\" , \"value\" : \"203.0.113.178\" } ], \"user-agent\" : [ { \"key\" : \"User-Agent\" , \"value\" : \"Amazon CloudFront\" } ], \"via\" : [ { \"key\" : \"Via\" , \"value\" : \"2.0 8f22423015641505b8c857a37450d6c0.cloudfront.net (CloudFront)\" } ], \"host\" : [ { \"key\" : \"Host\" , \"value\" : \"example.org\" } ], \"cache-control\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache, cf-no-cache\" } ] }, \"method\" : \"GET\" , \"origin\" : { \"custom\" : { \"customHeaders\" : {}, \"domainName\" : \"example.org\" , \"keepaliveTimeout\" : 5 , \"path\" : \"\" , \"port\" : 443 , \"protocol\" : \"https\" , \"readTimeout\" : 30 , \"sslProtocols\" : [ \"TLSv1\" , \"TLSv1.1\" , \"TLSv1.2\" ] } }, \"querystring\" : \"\" , \"uri\" : \"/\" }, \"response\" : { \"headers\" : { \"access-control-allow-credentials\" : [ { \"key\" : \"Access-Control-Allow-Credentials\" , \"value\" : \"true\" } ], \"access-control-allow-origin\" : [ { \"key\" : \"Access-Control-Allow-Origin\" , \"value\" : \"*\" } ], \"date\" : [ { \"key\" : \"Date\" , \"value\" : \"Mon, 13 Jan 2020 20:12:38 GMT\" } ], \"referrer-policy\" : [ { \"key\" : \"Referrer-Policy\" , \"value\" : \"no-referrer-when-downgrade\" } ], \"server\" : [ { \"key\" : \"Server\" , \"value\" : \"ExampleCustomOriginServer\" } ], \"x-content-type-options\" : [ { \"key\" : \"X-Content-Type-Options\" , \"value\" : \"nosniff\" } ], \"x-frame-options\" : [ { \"key\" : \"X-Frame-Options\" , \"value\" : \"DENY\" } ], \"x-xss-protection\" : [ { \"key\" : \"X-XSS-Protection\" , \"value\" : \"1; mode=block\" } ], \"content-type\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"text/html; charset=utf-8\" } ], \"content-length\" : [ { \"key\" : \"Content-Length\" , \"value\" : \"9593\" } ] }, \"status\" : \"200\" , \"statusDescription\" : \"OK\" } } } ] }","title":"Example origin response"},{"location":"cloudfront-lambda-edge/#libraries","text":"Typescript - cloudfront-request.d.ts - NPM @types/aws-lambda","title":"Libraries"},{"location":"cloudfront-lambda-edge/#reference-docs","text":"Lambda@Edge event structure","title":"Reference Docs"},{"location":"cloudwatch-logs/","text":"CloudWatch Log \u00b6 CloudWatch Logs invokes your function asynchronously with an event that contains log data. Input \u00b6 Cloudwatch log structure \u00b6 data (String) The value of the data field is a Base64 encoded ZIP archive. CloudWatch Logs message event example { \"awslogs\" : { \"data\" : \"H4sIAAAAAAAAAHWPwQqCQBCGX0Xm7EFtK+smZBEUgXoLCdMhFtKV3akI8d0bLYmibvPPN3wz00CJxmQnTO41whwWQRIctmEcB6sQbFC3CjW3XW8kxpOpP+OC22d1Wml1qZkQGtoMsScxaczKN3plG8zlaHIta5KqWsozoTYw3/djzwhpLwivWFGHGpAFe7DL68JlBUk+l7KSN7tCOEJ4M3/qOI49vMHj+zCKdlFqLaU2ZHV2a4Ct/an0/ivdX8oYc1UVX860fQDQiMdxRQEAAA==\" } } CloudWatch Logs message data (decoded) example CloudWatch Logs message data (decoded) example { \"messageType\" : \"DATA_MESSAGE\" , \"owner\" : \"123456789012\" , \"logGroup\" : \"/aws/lambda/echo-nodejs\" , \"logStream\" : \"2019/03/13/[$LATEST]94fa867e5374431291a7fc14e2f56ae7\" , \"subscriptionFilters\" : [ \"LambdaStream_cloudwatchlogs-node\" ], \"logEvents\" : [ { \"id\" : \"34622316099697884706540976068822859012661220141643892546\" , \"timestamp\" : 1552518348220 , \"message\" : \"REPORT RequestId: 6234bffe-149a-b642-81ff-2e8e376d8aff\\tDuration: 46.84 ms\\tBilled Duration: 47 ms \\tMemory Size: 192 MB\\tMax Memory Used: 72 MB\\t\\n\" } ] } Generating sample events via SAM CLI \u00b6 sam local generate-event cloudwatch logs Response \u00b6 N/A Libraries \u00b6 Python - CloudWatchLogsEvent - Pip aws-lambda-powertools Typescript - CloudWatchLogsEvent - NPM @types/aws-lambda DotNet - CloudWatchLogsEvent - Nuget Amazon.Lambda.CloudWatchLogsEvents Java - CloudWatchLogsEvent - Maven aws-lambda-java-events Rust - CloudwatchLogsEvent - Cargo aws-lambda-events Ruby - LogJob - gem jets Code Example \u00b6 Python code example using the data class to decode the log data payload app.py from aws_lambda_powertools.utilities.data_classes import event_source , CloudWatchLogsEvent from aws_lambda_powertools.utilities.data_classes.cloud_watch_logs_event import CloudWatchLogsDecodedData @event_source ( data_class = CloudWatchLogsEvent ) def lambda_handler ( event : CloudWatchLogsEvent , context ): decompressed_log : CloudWatchLogsDecodedData = event . parse_logs_data log_events = decompressed_log . log_events for log_event in log_events : do_something_with ( log_event . timestamp , log_event . message ) NodeJS code example Reference Docs \u00b6 Using Lambda with CloudWatch Logs Error processor sample application for AWS Lambda","title":"CloudWatch Log"},{"location":"cloudwatch-logs/#cloudwatch-log","text":"CloudWatch Logs invokes your function asynchronously with an event that contains log data.","title":"CloudWatch Log"},{"location":"cloudwatch-logs/#input","text":"","title":"Input"},{"location":"cloudwatch-logs/#cloudwatch-log-structure","text":"data (String) The value of the data field is a Base64 encoded ZIP archive. CloudWatch Logs message event example { \"awslogs\" : { \"data\" : \"H4sIAAAAAAAAAHWPwQqCQBCGX0Xm7EFtK+smZBEUgXoLCdMhFtKV3akI8d0bLYmibvPPN3wz00CJxmQnTO41whwWQRIctmEcB6sQbFC3CjW3XW8kxpOpP+OC22d1Wml1qZkQGtoMsScxaczKN3plG8zlaHIta5KqWsozoTYw3/djzwhpLwivWFGHGpAFe7DL68JlBUk+l7KSN7tCOEJ4M3/qOI49vMHj+zCKdlFqLaU2ZHV2a4Ct/an0/ivdX8oYc1UVX860fQDQiMdxRQEAAA==\" } } CloudWatch Logs message data (decoded) example CloudWatch Logs message data (decoded) example { \"messageType\" : \"DATA_MESSAGE\" , \"owner\" : \"123456789012\" , \"logGroup\" : \"/aws/lambda/echo-nodejs\" , \"logStream\" : \"2019/03/13/[$LATEST]94fa867e5374431291a7fc14e2f56ae7\" , \"subscriptionFilters\" : [ \"LambdaStream_cloudwatchlogs-node\" ], \"logEvents\" : [ { \"id\" : \"34622316099697884706540976068822859012661220141643892546\" , \"timestamp\" : 1552518348220 , \"message\" : \"REPORT RequestId: 6234bffe-149a-b642-81ff-2e8e376d8aff\\tDuration: 46.84 ms\\tBilled Duration: 47 ms \\tMemory Size: 192 MB\\tMax Memory Used: 72 MB\\t\\n\" } ] }","title":"Cloudwatch log structure"},{"location":"cloudwatch-logs/#generating-sample-events-via-sam-cli","text":"sam local generate-event cloudwatch logs","title":"Generating sample events via SAM CLI"},{"location":"cloudwatch-logs/#response","text":"N/A","title":"Response"},{"location":"cloudwatch-logs/#libraries","text":"Python - CloudWatchLogsEvent - Pip aws-lambda-powertools Typescript - CloudWatchLogsEvent - NPM @types/aws-lambda DotNet - CloudWatchLogsEvent - Nuget Amazon.Lambda.CloudWatchLogsEvents Java - CloudWatchLogsEvent - Maven aws-lambda-java-events Rust - CloudwatchLogsEvent - Cargo aws-lambda-events Ruby - LogJob - gem jets","title":"Libraries"},{"location":"cloudwatch-logs/#code-example","text":"Python code example using the data class to decode the log data payload app.py from aws_lambda_powertools.utilities.data_classes import event_source , CloudWatchLogsEvent from aws_lambda_powertools.utilities.data_classes.cloud_watch_logs_event import CloudWatchLogsDecodedData @event_source ( data_class = CloudWatchLogsEvent ) def lambda_handler ( event : CloudWatchLogsEvent , context ): decompressed_log : CloudWatchLogsDecodedData = event . parse_logs_data log_events = decompressed_log . log_events for log_event in log_events : do_something_with ( log_event . timestamp , log_event . message ) NodeJS code example","title":"Code Example"},{"location":"cloudwatch-logs/#reference-docs","text":"Using Lambda with CloudWatch Logs Error processor sample application for AWS Lambda","title":"Reference Docs"},{"location":"code-commit/","text":"Code Commit \u00b6 Event-driven, asynchronous invocation. CodeCommit repository events in the repository invoke a Lambda function Input \u00b6 Getting the correlation id \u00b6 JSON patch Records[*].eventId Generating sample events via SAM CLI \u00b6 sam local generate-event codecommit repository AWS CodeCommit message event example \u00b6 AWS CodeCommit message event example { \"Records\" : [ { \"awsRegion\" : \"us-east-2\" , \"codecommit\" : { \"references\" : [ { \"commit\" : \"5e493c6f3067653f3d04eca608b4901eb227078\" , \"ref\" : \"refs/heads/master\" } ] }, \"eventId\" : \"31ade2c7-f889-47c5-a937-1cf99e2790e9\" , \"eventName\" : \"ReferenceChanges\" , \"eventPartNumber\" : 1 , \"eventSource\" : \"aws:codecommit\" , \"eventSourceARN\" : \"arn:aws:codecommit:us-east-2:123456789012:lambda-pipeline-repo\" , \"eventTime\" : \"2019-03-12T20:58:25.400+0000\" , \"eventTotalParts\" : 1 , \"eventTriggerConfigId\" : \"0d17d6a4-efeb-46f3-b3ab-a63741badeb8\" , \"eventTriggerName\" : \"index.handler\" , \"eventVersion\" : \"1.0\" , \"userIdentityARN\" : \"arn:aws:iam::123456789012:user/intern\" } ] } Response \u00b6 N/A Libraries \u00b6 Typed Lambda handlers by Language Java - CodeCommitEvent - Maven aws-lambda-java-events Reference Docs \u00b6 Create an AWS CodeCommit trigger for an AWS Lambda function","title":"Code Commit"},{"location":"code-commit/#code-commit","text":"Event-driven, asynchronous invocation. CodeCommit repository events in the repository invoke a Lambda function","title":"Code Commit"},{"location":"code-commit/#input","text":"","title":"Input"},{"location":"code-commit/#getting-the-correlation-id","text":"JSON patch Records[*].eventId","title":"Getting the correlation id"},{"location":"code-commit/#generating-sample-events-via-sam-cli","text":"sam local generate-event codecommit repository","title":"Generating sample events via SAM CLI"},{"location":"code-commit/#aws-codecommit-message-event-example","text":"AWS CodeCommit message event example { \"Records\" : [ { \"awsRegion\" : \"us-east-2\" , \"codecommit\" : { \"references\" : [ { \"commit\" : \"5e493c6f3067653f3d04eca608b4901eb227078\" , \"ref\" : \"refs/heads/master\" } ] }, \"eventId\" : \"31ade2c7-f889-47c5-a937-1cf99e2790e9\" , \"eventName\" : \"ReferenceChanges\" , \"eventPartNumber\" : 1 , \"eventSource\" : \"aws:codecommit\" , \"eventSourceARN\" : \"arn:aws:codecommit:us-east-2:123456789012:lambda-pipeline-repo\" , \"eventTime\" : \"2019-03-12T20:58:25.400+0000\" , \"eventTotalParts\" : 1 , \"eventTriggerConfigId\" : \"0d17d6a4-efeb-46f3-b3ab-a63741badeb8\" , \"eventTriggerName\" : \"index.handler\" , \"eventVersion\" : \"1.0\" , \"userIdentityARN\" : \"arn:aws:iam::123456789012:user/intern\" } ] }","title":"AWS CodeCommit message event example"},{"location":"code-commit/#response","text":"N/A","title":"Response"},{"location":"code-commit/#libraries","text":"Typed Lambda handlers by Language Java - CodeCommitEvent - Maven aws-lambda-java-events","title":"Libraries"},{"location":"code-commit/#reference-docs","text":"Create an AWS CodeCommit trigger for an AWS Lambda function","title":"Reference Docs"},{"location":"code-pipeline-job/","text":"CodePipeline Job \u00b6 CodePipeline invokes your function asynchronously with an event that contains details about the job. Input \u00b6 Warning TODO: Fields still need to be fully documented Example event \u00b6 Example CodePipeline event { \"CodePipeline.job\" : { \"id\" : \"c0d76431-b0e7-xmpl-97e3-e8ee786eb6f6\" , \"accountId\" : \"123456789012\" , \"data\" : { \"actionConfiguration\" : { \"configuration\" : { \"FunctionName\" : \"my-function\" , \"UserParameters\" : \"{\\\"KEY\\\": \\\"VALUE\\\"}\" } }, \"inputArtifacts\" : [ { \"name\" : \"my-pipeline-SourceArtifact\" , \"revision\" : \"e0c7xmpl2308ca3071aa7bab414de234ab52eea\" , \"location\" : { \"type\" : \"S3\" , \"s3Location\" : { \"bucketName\" : \"us-west-2-123456789012-my-pipeline\" , \"objectKey\" : \"my-pipeline/test-api-2/TdOSFRV\" } } } ], \"outputArtifacts\" : [ { \"name\" : \"invokeOutput\" , \"revision\" : null , \"location\" : { \"type\" : \"S3\" , \"s3Location\" : { \"bucketName\" : \"us-west-2-123456789012-my-pipeline\" , \"objectKey\" : \"my-pipeline/invokeOutp/D0YHsJn\" } } } ], \"artifactCredentials\" : { \"accessKeyId\" : \"AKIAIOSFODNN7EXAMPLE\" , \"secretAccessKey\" : \"6CGtmAa3lzWtV7a...\" , \"sessionToken\" : \"IQoJb3JpZ2luX2VjEA...\" , \"expirationTime\" : 1575493418000 } } } } Getting the correlation id \u00b6 JSON path to correlation id: \"CodePipeline.job\".id Generating sample events via SAM CLI \u00b6 sam local generate-event codepipeline job Response \u00b6 N/A Libraries \u00b6 Go - codepipeline_job.go Typescript - CodePipelineEvent - NPM @types/aws-lambda Rust - CodePipelineJobEvent Code Examples \u00b6 Sample Python function that uses an AWS CloudFormation template AWS Lambda Functions Code Samples for AWS CodePipeline - NodeJS and Python Reference Docs \u00b6 Using AWS Lambda with AWS CodePipeline Invoke an AWS Lambda function in a pipeline in CodePipeline","title":"CodePipeline Job"},{"location":"code-pipeline-job/#codepipeline-job","text":"CodePipeline invokes your function asynchronously with an event that contains details about the job.","title":"CodePipeline Job"},{"location":"code-pipeline-job/#input","text":"Warning TODO: Fields still need to be fully documented","title":"Input"},{"location":"code-pipeline-job/#example-event","text":"Example CodePipeline event { \"CodePipeline.job\" : { \"id\" : \"c0d76431-b0e7-xmpl-97e3-e8ee786eb6f6\" , \"accountId\" : \"123456789012\" , \"data\" : { \"actionConfiguration\" : { \"configuration\" : { \"FunctionName\" : \"my-function\" , \"UserParameters\" : \"{\\\"KEY\\\": \\\"VALUE\\\"}\" } }, \"inputArtifacts\" : [ { \"name\" : \"my-pipeline-SourceArtifact\" , \"revision\" : \"e0c7xmpl2308ca3071aa7bab414de234ab52eea\" , \"location\" : { \"type\" : \"S3\" , \"s3Location\" : { \"bucketName\" : \"us-west-2-123456789012-my-pipeline\" , \"objectKey\" : \"my-pipeline/test-api-2/TdOSFRV\" } } } ], \"outputArtifacts\" : [ { \"name\" : \"invokeOutput\" , \"revision\" : null , \"location\" : { \"type\" : \"S3\" , \"s3Location\" : { \"bucketName\" : \"us-west-2-123456789012-my-pipeline\" , \"objectKey\" : \"my-pipeline/invokeOutp/D0YHsJn\" } } } ], \"artifactCredentials\" : { \"accessKeyId\" : \"AKIAIOSFODNN7EXAMPLE\" , \"secretAccessKey\" : \"6CGtmAa3lzWtV7a...\" , \"sessionToken\" : \"IQoJb3JpZ2luX2VjEA...\" , \"expirationTime\" : 1575493418000 } } } }","title":"Example event"},{"location":"code-pipeline-job/#getting-the-correlation-id","text":"JSON path to correlation id: \"CodePipeline.job\".id","title":"Getting the correlation id"},{"location":"code-pipeline-job/#generating-sample-events-via-sam-cli","text":"sam local generate-event codepipeline job","title":"Generating sample events via SAM CLI"},{"location":"code-pipeline-job/#response","text":"N/A","title":"Response"},{"location":"code-pipeline-job/#libraries","text":"Go - codepipeline_job.go Typescript - CodePipelineEvent - NPM @types/aws-lambda Rust - CodePipelineJobEvent","title":"Libraries"},{"location":"code-pipeline-job/#code-examples","text":"Sample Python function that uses an AWS CloudFormation template AWS Lambda Functions Code Samples for AWS CodePipeline - NodeJS and Python","title":"Code Examples"},{"location":"code-pipeline-job/#reference-docs","text":"Using AWS Lambda with AWS CodePipeline Invoke an AWS Lambda function in a pipeline in CodePipeline","title":"Reference Docs"},{"location":"cognito-events/","text":"Amazon Cognito Events \u00b6 Event-driven; synchronous invocation Input \u00b6 { \"version\" : 2 , \"eventType\" : \"SyncTrigger\" , \"region\" : \"us-east-1\" , \"identityPoolId\" : \"identityPoolId\" , \"identityId\" : \"identityId\" , \"datasetName\" : \"datasetName\" , \"datasetRecords\" : { \"SampleKey1\" : { \"oldValue\" : \"oldValue1\" , \"newValue\" : \"newValue1\" , \"op\" : \"replace\" }, \"SampleKey2\" : { \"oldValue\" : \"oldValue2\" , \"newValue\" : \"newValue2\" , \"op\" : \"replace\" }, ... } } Response \u00b6 N/A Libraries \u00b6 DotNet - CognitoEvent - NuGet Amazon.Lambda.CognitoEvents Java - CognitoEvent - Maven aws-lambda-java-events Code Examples \u00b6 exports . handler = function ( event , context ) { //Check for the event type if ( event . eventType === 'SyncTrigger' ) { //Modify value for a key if ( 'SampleKey1' in event . datasetRecords ){ event . datasetRecords . SampleKey1 . newValue = 'ModifyValue1' ; event . datasetRecords . SampleKey1 . op = 'replace' ; } //Remove a key if ( 'SampleKey2' in event . datasetRecords ){ event . datasetRecords . SampleKey2 . op = 'remove' ; } //Add a key if ( ! ( 'SampleKey3' in event . datasetRecords )){ event . datasetRecords . SampleKey3 = { 'newValue' : 'ModifyValue3' , 'op' : 'replace' }; } } context . done ( null , event ); }; Reference Docs \u00b6 Amazon Cognito Events","title":"Cognito Events"},{"location":"cognito-events/#amazon-cognito-events","text":"Event-driven; synchronous invocation","title":"Amazon Cognito Events"},{"location":"cognito-events/#input","text":"{ \"version\" : 2 , \"eventType\" : \"SyncTrigger\" , \"region\" : \"us-east-1\" , \"identityPoolId\" : \"identityPoolId\" , \"identityId\" : \"identityId\" , \"datasetName\" : \"datasetName\" , \"datasetRecords\" : { \"SampleKey1\" : { \"oldValue\" : \"oldValue1\" , \"newValue\" : \"newValue1\" , \"op\" : \"replace\" }, \"SampleKey2\" : { \"oldValue\" : \"oldValue2\" , \"newValue\" : \"newValue2\" , \"op\" : \"replace\" }, ... } }","title":"Input"},{"location":"cognito-events/#response","text":"N/A","title":"Response"},{"location":"cognito-events/#libraries","text":"DotNet - CognitoEvent - NuGet Amazon.Lambda.CognitoEvents Java - CognitoEvent - Maven aws-lambda-java-events","title":"Libraries"},{"location":"cognito-events/#code-examples","text":"exports . handler = function ( event , context ) { //Check for the event type if ( event . eventType === 'SyncTrigger' ) { //Modify value for a key if ( 'SampleKey1' in event . datasetRecords ){ event . datasetRecords . SampleKey1 . newValue = 'ModifyValue1' ; event . datasetRecords . SampleKey1 . op = 'replace' ; } //Remove a key if ( 'SampleKey2' in event . datasetRecords ){ event . datasetRecords . SampleKey2 . op = 'remove' ; } //Add a key if ( ! ( 'SampleKey3' in event . datasetRecords )){ event . datasetRecords . SampleKey3 = { 'newValue' : 'ModifyValue3' , 'op' : 'replace' }; } } context . done ( null , event ); };","title":"Code Examples"},{"location":"cognito-events/#reference-docs","text":"Amazon Cognito Events","title":"Reference Docs"},{"location":"cognito-user-pool/","text":"Cognito User Pool Triggers \u00b6 Common Input \u00b6 Common attributes shared by all User Pool Lambda Trigger Events version (String, required) The version number of your Lambda function. example 1 region (String, required) The AWS region where the event was triggered. example us-east-1 userPoolId (String, required) The user pool ID for the user pool where the event occurred. example us-east-1_1234567890 triggerSource (String, required) The name of the event that triggered the Lambda function. See User pool Lambda trigger sources example PreSignUp_SignUp userName (String, required) The username of the current user. example testuser callerContext (Object, required) The caller context, with awsSdkVersion and clientId . example {\"clientId\":\"app_client_id\",\"custom\":{},\"awsSdkVersion\":\"aws-sdk-js-2.6.4\"} Pre Sign-up \u00b6 The pre sign-up Lambda function is triggered just before Amazon Cognito signs up a new user. It allows you to perform custom validation to accept or deny the registration request as part of the sign-up process. Pre sign-up Lambda trigger documentation Pre Sign-up Input \u00b6 triggerSource can be one of the following: PreSignUp_SignUp Pre sign-up. PreSignUp_AdminCreateUser Pre sign-up when an admin creates a new user. PreSignUp_ExternalProvider Pre sign-up with external provider userAttributes (Object, required) One or more name-value pairs representing user attributes. The attribute names are the keys. validationData (Object, required) One or more name-value pairs containing the validation data in the request to register a user. clientMetadata (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre sign-up trigger. Pre Sign-up Request { \"version\" : \"string\" , \"triggerSource\" : \"PreSignUp_SignUp\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"email\" : \"user@example.com\" , \"phone_number\" : \"+12065550100\" } }, \"response\" : {} } Pre Sign-up Response \u00b6 Response fields include: autoConfirmUser (Boolean, optional) Set to true to auto-confirm the user, or false otherwise. autoVerifyEmail (Boolean, optional) Set to true to set as verified the email of a user who is signing up, or false otherwise. autoVerifyPhone (Boolean, optional) Set to true to set as verified the phone number of a user who is signing up, or false otherwise. Pre Sign-up Response Structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . }, \"validationData\" : { \"string\" : \"string\" , . . . }, \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"autoConfirmUser\" : \"boolean\" , \"autoVerifyPhone\" : \"boolean\" , \"autoVerifyEmail\" : \"boolean\" } } Pre Authentication \u00b6 Amazon Cognito invokes this trigger when a user attempts to sign in, allowing custom validation to accept or deny the authentication request. Pre authentication Lambda trigger documentation Pre Authentication Input \u00b6 Pre Authentication Request { \"version\" : \"1\" , \"triggerSource\" : \"PreAuthentication_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"pre-auth@mail.com\" } }, \"response\" : {} } Pre Authentication Response \u00b6 No additional return information is expected in the response. Auth Challenge \u00b6 Auth Challenge Input \u00b6 Create Auth Challenge Request { \"version\" : \"1\" , \"triggerSource\" : \"CreateAuthChallenge_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"create-auth@mail.com\" }, \"challengeName\" : \"PASSWORD_VERIFIER\" , \"session\" : [ { \"challengeName\" : \"CUSTOM_CHALLENGE\" , \"challengeResult\" : true , \"challengeMetadata\" : \"CAPTCHA_CHALLENGE\" } ], \"userNotFound\" : false }, \"response\" : {} } Define Auth Challenge Request { \"version\" : \"1\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"triggerSource\" : \"DefineAuthChallenge_Authentication\" , \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"define-auth@mail.com\" }, \"session\" : [ { \"challengeName\" : \"PASSWORD_VERIFIER\" , \"challengeResult\" : true }, { \"challengeName\" : \"CUSTOM_CHALLENGE\" , \"challengeResult\" : true , \"challengeMetadata\" : \"CAPTCHA_CHALLENGE\" } ], \"userNotFound\" : true }, \"response\" : {} } Auth Challenge Response \u00b6 Verify auth challenge response { \"version\" : \"1\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"triggerSource\" : \"VerifyAuthChallengeResponse_Authentication\" , \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"verify-auth@mail.com\" }, \"privateChallengeParameters\" : { \"answer\" : \"challengeAnswer\" }, \"clientMetadata\" : { \"foo\" : \"value\" }, \"challengeAnswer\" : \"challengeAnswer\" , \"userNotFound\" : true }, \"response\" : {} } Pre Token Generation \u00b6 Amazon Cognito invokes this trigger before token generation which allows you to customize identity token claims. Pre token generation Lambda trigger documentation Pre Token Generation Input \u00b6 Pre token generation request parameters groupConfiguration (Object) The input object containing the current group configuration. It includes groupsToOverride , iamRolesToOverride , and preferredRole . groupsToOverride (Array, optional) A list of the group names that are associated with the user that the identity token is issued for. iamRolesToOverride (Array, optional) A list of the current IAM roles associated with these groups. preferredRole (String, optional) A string indicating the preferred IAM role. clientMetadata (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre token generation trigger. Example pre token generation request { \"triggerSource\" : \"TokenGeneration_Authentication\" , \"version\" : \"1\" , \"region\" : \"us-west-2\" , \"userPoolId\" : \"us-west-2_example\" , \"userName\" : \"testqq\" , \"callerContext\" : { \"awsSdkVersion\" : \"aws-sdk-unknown-unknown\" , \"clientId\" : \"71ghuul37mresr7h373b704tua\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"0b0a57c5-f013-426a-81a1-f8ffbfba21f0\" , \"email_verified\" : \"true\" , \"cognito:user_status\" : \"CONFIRMED\" , \"email\" : \"test@mail.com\" }, \"groupConfiguration\" : { \"groupsToOverride\" : [], \"iamRolesToOverride\" : [], \"preferredRole\" : null } }, \"response\" : {} } Pre Token Generation Response \u00b6 Pre token generation response parameters claimsToAddOrOverride (Object, optional) A map of one or more key-value pairs of claims to add or override. For group related claims, use groupOverrideDetails instead. claimsToSuppress (Array, optional) A list that contains claims to be suppressed from the identity token. groupOverrideDetails (Object, optional) The output object containing the current group configuration. It includes groupsToOverride , iamRolesToOverride , and preferredRole . Pre-token generation response structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" }, \"groupConfiguration\" : [ { \"groupsToOverride\" : [ \"string\" , \"string\" ], \"iamRolesToOverride\" : [ \"string\" , \"string\" ], \"preferredRole\" : \"string\" } ], \"clientMetadata\" : { \"string\" : \"string\" } }, \"response\" : { \"claimsOverrideDetails\" : { \"claimsToAddOrOverride\" : { \"string\" : \"string\" }, \"claimsToSuppress\" : [ \"string\" , \"string\" ], \"groupOverrideDetails\" : { \"groupsToOverride\" : [ \"string\" , \"string\" ], \"iamRolesToOverride\" : [ \"string\" , \"string\" ], \"preferredRole\" : \"string\" } } } } Post Authentication \u00b6 Post authentication Lambda trigger documentation Post Authentication Input \u00b6 Post Authentication Reqest { \"version\" : \"1\" , \"triggerSource\" : \"PostAuthentication_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"newDeviceUsed\" : true , \"userAttributes\" : { \"email\" : \"post-auth@mail.com\" } }, \"response\" : {} } Post Authentication Response \u00b6 No additional return information is expected in the response. Post Confirmation \u00b6 Amazon Cognito invokes this trigger after a new user is confirmed, allowing you to send custom messages or to add custom logic. For example, you could use this trigger to gather new user data. Post confirmation Lambda trigger documentation Post Confirmation Input \u00b6 Post Confirmation Request { \"version\" : \"string\" , \"triggerSource\" : \"PostConfirmation_ConfirmSignUp\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"email\" : \"user@example.com\" , \"email_verified\" : true } }, \"response\" : {} } Post Confirmation Response \u00b6 No additional return information is expected in the response. Custom Message \u00b6 Amazon Cognito invokes this trigger before sending an email or phone verification message or a multi-factor authentication (MFA) code, allowing you to customize the message dynamically. Custom message Lambda trigger documentation Custom Message Input \u00b6 Custom Message Request { \"version\" : \"1\" , \"triggerSource\" : \"CustomMessage_AdminCreateUser\" , \"region\" : \"region\" , \"userPoolId\" : \"userPoolId\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdk\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"phone_number_verified\" : false , \"email_verified\" : true }, \"codeParameter\" : \"####\" , \"usernameParameter\" : \"username\" }, \"response\" : {} } Custom Message Response \u00b6 Custom message response parameters smsMessage (String, optional) The custom SMS message to be sent to your users. Must include the codeParameter value received in the request. emailMessage (String, optional) The custom email message to be sent to your users. Must include the codeParameter value received in the request. emailSubject (String, optional) The subject line for the custom message. Custom Message Response Structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . } \"codeParameter\" : \"####\" , \"usernameParameter\" : \"string\" , \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"smsMessage\" : \"string\" , \"emailMessage\" : \"string\" , \"emailSubject\" : \"string\" } } User Migration \u00b6 Amazon Cognito invokes this trigger when a user does not exist in the user pool at the time of sign-in with a password, or in the forgot-password flow. After the Lambda function returns successfully, Amazon Cognito creates the user in the user pool. Migrate user Lambda trigger documentation User Migration Input \u00b6 { \"version\" : \"string\" , \"triggerSource\" : \"UserMigration_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"password\" : \"password\" }, \"response\" : {} } User Migration Response \u00b6 User migration response structure { \"userName\" : \"string\" , \"request\" : { \"password\" : \"string\" , \"validationData\" : { \"string\" : \"string\" , . . . }, \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . }, \"finalUserStatus\" : \"string\" , \"messageAction\" : \"string\" , \"desiredDeliveryMediums\" : [ \"string\" , . . . ], \"forceAliasCreation\" : boolea n } } Libraries \u00b6 Python - Request and response utils - Pip aws-lambda-powertools Typescript - Typing for request and response - NPM @types/aws-lambda Java - Request and response classes for CognitoUserPool* - Maven aws-lambda-java-events Go - Request and response class - github.com/aws/aws-lambda-go/events Code Examples \u00b6 Define Auth Challenge Example using AWS Lambda Powertools from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.cognito_user_pool_event import DefineAuthChallengeTriggerEvent @event_source ( data_class = DefineAuthChallengeTriggerEvent ) def handler ( event : DefineAuthChallengeTriggerEvent , context ) -> dict : if ( len ( event . request . session ) == 1 and event . request . session [ 0 ] . challenge_name == \"SRP_A\" ): event . response . issue_tokens = False event . response . fail_authentication = False event . response . challenge_name = \"PASSWORD_VERIFIER\" elif ( len ( event . request . session ) == 2 and event . request . session [ 1 ] . challenge_name == \"PASSWORD_VERIFIER\" and event . request . session [ 1 ] . challenge_result ): event . response . issue_tokens = False event . response . fail_authentication = False event . response . challenge_name = \"CUSTOM_CHALLENGE\" elif ( len ( event . request . session ) == 3 and event . request . session [ 2 ] . challenge_name == \"CUSTOM_CHALLENGE\" and event . request . session [ 2 ] . challenge_result ): event . response . issue_tokens = True event . response . fail_authentication = False else : event . response . issue_tokens = False event . response . fail_authentication = True return event . raw_event Documentation \u00b6 Reference documentation and blog posts. Customizing user pool workflows with Lambda triggers Anonymous User Identities with Cognito Lambda Triggers","title":"Cognito"},{"location":"cognito-user-pool/#cognito-user-pool-triggers","text":"","title":"Cognito User Pool Triggers"},{"location":"cognito-user-pool/#common-input","text":"Common attributes shared by all User Pool Lambda Trigger Events version (String, required) The version number of your Lambda function. example 1 region (String, required) The AWS region where the event was triggered. example us-east-1 userPoolId (String, required) The user pool ID for the user pool where the event occurred. example us-east-1_1234567890 triggerSource (String, required) The name of the event that triggered the Lambda function. See User pool Lambda trigger sources example PreSignUp_SignUp userName (String, required) The username of the current user. example testuser callerContext (Object, required) The caller context, with awsSdkVersion and clientId . example {\"clientId\":\"app_client_id\",\"custom\":{},\"awsSdkVersion\":\"aws-sdk-js-2.6.4\"}","title":"Common Input"},{"location":"cognito-user-pool/#pre-sign-up","text":"The pre sign-up Lambda function is triggered just before Amazon Cognito signs up a new user. It allows you to perform custom validation to accept or deny the registration request as part of the sign-up process. Pre sign-up Lambda trigger documentation","title":"Pre Sign-up"},{"location":"cognito-user-pool/#pre-sign-up-input","text":"triggerSource can be one of the following: PreSignUp_SignUp Pre sign-up. PreSignUp_AdminCreateUser Pre sign-up when an admin creates a new user. PreSignUp_ExternalProvider Pre sign-up with external provider userAttributes (Object, required) One or more name-value pairs representing user attributes. The attribute names are the keys. validationData (Object, required) One or more name-value pairs containing the validation data in the request to register a user. clientMetadata (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre sign-up trigger. Pre Sign-up Request { \"version\" : \"string\" , \"triggerSource\" : \"PreSignUp_SignUp\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"email\" : \"user@example.com\" , \"phone_number\" : \"+12065550100\" } }, \"response\" : {} }","title":"Pre Sign-up Input"},{"location":"cognito-user-pool/#pre-sign-up-response","text":"Response fields include: autoConfirmUser (Boolean, optional) Set to true to auto-confirm the user, or false otherwise. autoVerifyEmail (Boolean, optional) Set to true to set as verified the email of a user who is signing up, or false otherwise. autoVerifyPhone (Boolean, optional) Set to true to set as verified the phone number of a user who is signing up, or false otherwise. Pre Sign-up Response Structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . }, \"validationData\" : { \"string\" : \"string\" , . . . }, \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"autoConfirmUser\" : \"boolean\" , \"autoVerifyPhone\" : \"boolean\" , \"autoVerifyEmail\" : \"boolean\" } }","title":"Pre Sign-up Response"},{"location":"cognito-user-pool/#pre-authentication","text":"Amazon Cognito invokes this trigger when a user attempts to sign in, allowing custom validation to accept or deny the authentication request. Pre authentication Lambda trigger documentation","title":"Pre Authentication"},{"location":"cognito-user-pool/#pre-authentication-input","text":"Pre Authentication Request { \"version\" : \"1\" , \"triggerSource\" : \"PreAuthentication_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"pre-auth@mail.com\" } }, \"response\" : {} }","title":"Pre Authentication Input"},{"location":"cognito-user-pool/#pre-authentication-response","text":"No additional return information is expected in the response.","title":"Pre Authentication Response"},{"location":"cognito-user-pool/#auth-challenge","text":"","title":"Auth Challenge"},{"location":"cognito-user-pool/#auth-challenge-input","text":"Create Auth Challenge Request { \"version\" : \"1\" , \"triggerSource\" : \"CreateAuthChallenge_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"create-auth@mail.com\" }, \"challengeName\" : \"PASSWORD_VERIFIER\" , \"session\" : [ { \"challengeName\" : \"CUSTOM_CHALLENGE\" , \"challengeResult\" : true , \"challengeMetadata\" : \"CAPTCHA_CHALLENGE\" } ], \"userNotFound\" : false }, \"response\" : {} } Define Auth Challenge Request { \"version\" : \"1\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"triggerSource\" : \"DefineAuthChallenge_Authentication\" , \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"define-auth@mail.com\" }, \"session\" : [ { \"challengeName\" : \"PASSWORD_VERIFIER\" , \"challengeResult\" : true }, { \"challengeName\" : \"CUSTOM_CHALLENGE\" , \"challengeResult\" : true , \"challengeMetadata\" : \"CAPTCHA_CHALLENGE\" } ], \"userNotFound\" : true }, \"response\" : {} }","title":"Auth Challenge Input"},{"location":"cognito-user-pool/#auth-challenge-response","text":"Verify auth challenge response { \"version\" : \"1\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"triggerSource\" : \"VerifyAuthChallengeResponse_Authentication\" , \"request\" : { \"userAttributes\" : { \"sub\" : \"4A709A36-7D63-4785-829D-4198EF10EBDA\" , \"email_verified\" : \"true\" , \"name\" : \"First Last\" , \"email\" : \"verify-auth@mail.com\" }, \"privateChallengeParameters\" : { \"answer\" : \"challengeAnswer\" }, \"clientMetadata\" : { \"foo\" : \"value\" }, \"challengeAnswer\" : \"challengeAnswer\" , \"userNotFound\" : true }, \"response\" : {} }","title":"Auth Challenge Response"},{"location":"cognito-user-pool/#pre-token-generation","text":"Amazon Cognito invokes this trigger before token generation which allows you to customize identity token claims. Pre token generation Lambda trigger documentation","title":"Pre Token Generation"},{"location":"cognito-user-pool/#pre-token-generation-input","text":"Pre token generation request parameters groupConfiguration (Object) The input object containing the current group configuration. It includes groupsToOverride , iamRolesToOverride , and preferredRole . groupsToOverride (Array, optional) A list of the group names that are associated with the user that the identity token is issued for. iamRolesToOverride (Array, optional) A list of the current IAM roles associated with these groups. preferredRole (String, optional) A string indicating the preferred IAM role. clientMetadata (Object, optional) One or more key-value pairs that you can provide as custom input to the Lambda function that you specify for the pre token generation trigger. Example pre token generation request { \"triggerSource\" : \"TokenGeneration_Authentication\" , \"version\" : \"1\" , \"region\" : \"us-west-2\" , \"userPoolId\" : \"us-west-2_example\" , \"userName\" : \"testqq\" , \"callerContext\" : { \"awsSdkVersion\" : \"aws-sdk-unknown-unknown\" , \"clientId\" : \"71ghuul37mresr7h373b704tua\" }, \"request\" : { \"userAttributes\" : { \"sub\" : \"0b0a57c5-f013-426a-81a1-f8ffbfba21f0\" , \"email_verified\" : \"true\" , \"cognito:user_status\" : \"CONFIRMED\" , \"email\" : \"test@mail.com\" }, \"groupConfiguration\" : { \"groupsToOverride\" : [], \"iamRolesToOverride\" : [], \"preferredRole\" : null } }, \"response\" : {} }","title":"Pre Token Generation Input"},{"location":"cognito-user-pool/#pre-token-generation-response","text":"Pre token generation response parameters claimsToAddOrOverride (Object, optional) A map of one or more key-value pairs of claims to add or override. For group related claims, use groupOverrideDetails instead. claimsToSuppress (Array, optional) A list that contains claims to be suppressed from the identity token. groupOverrideDetails (Object, optional) The output object containing the current group configuration. It includes groupsToOverride , iamRolesToOverride , and preferredRole . Pre-token generation response structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" }, \"groupConfiguration\" : [ { \"groupsToOverride\" : [ \"string\" , \"string\" ], \"iamRolesToOverride\" : [ \"string\" , \"string\" ], \"preferredRole\" : \"string\" } ], \"clientMetadata\" : { \"string\" : \"string\" } }, \"response\" : { \"claimsOverrideDetails\" : { \"claimsToAddOrOverride\" : { \"string\" : \"string\" }, \"claimsToSuppress\" : [ \"string\" , \"string\" ], \"groupOverrideDetails\" : { \"groupsToOverride\" : [ \"string\" , \"string\" ], \"iamRolesToOverride\" : [ \"string\" , \"string\" ], \"preferredRole\" : \"string\" } } } }","title":"Pre Token Generation Response"},{"location":"cognito-user-pool/#post-authentication","text":"Post authentication Lambda trigger documentation","title":"Post Authentication"},{"location":"cognito-user-pool/#post-authentication-input","text":"Post Authentication Reqest { \"version\" : \"1\" , \"triggerSource\" : \"PostAuthentication_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"us-east-1_example\" , \"userName\" : \"UserName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"newDeviceUsed\" : true , \"userAttributes\" : { \"email\" : \"post-auth@mail.com\" } }, \"response\" : {} }","title":"Post Authentication Input"},{"location":"cognito-user-pool/#post-authentication-response","text":"No additional return information is expected in the response.","title":"Post Authentication Response"},{"location":"cognito-user-pool/#post-confirmation","text":"Amazon Cognito invokes this trigger after a new user is confirmed, allowing you to send custom messages or to add custom logic. For example, you could use this trigger to gather new user data. Post confirmation Lambda trigger documentation","title":"Post Confirmation"},{"location":"cognito-user-pool/#post-confirmation-input","text":"Post Confirmation Request { \"version\" : \"string\" , \"triggerSource\" : \"PostConfirmation_ConfirmSignUp\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"email\" : \"user@example.com\" , \"email_verified\" : true } }, \"response\" : {} }","title":"Post Confirmation Input"},{"location":"cognito-user-pool/#post-confirmation-response","text":"No additional return information is expected in the response.","title":"Post Confirmation Response"},{"location":"cognito-user-pool/#custom-message","text":"Amazon Cognito invokes this trigger before sending an email or phone verification message or a multi-factor authentication (MFA) code, allowing you to customize the message dynamically. Custom message Lambda trigger documentation","title":"Custom Message"},{"location":"cognito-user-pool/#custom-message-input","text":"Custom Message Request { \"version\" : \"1\" , \"triggerSource\" : \"CustomMessage_AdminCreateUser\" , \"region\" : \"region\" , \"userPoolId\" : \"userPoolId\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdk\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"userAttributes\" : { \"phone_number_verified\" : false , \"email_verified\" : true }, \"codeParameter\" : \"####\" , \"usernameParameter\" : \"username\" }, \"response\" : {} }","title":"Custom Message Input"},{"location":"cognito-user-pool/#custom-message-response","text":"Custom message response parameters smsMessage (String, optional) The custom SMS message to be sent to your users. Must include the codeParameter value received in the request. emailMessage (String, optional) The custom email message to be sent to your users. Must include the codeParameter value received in the request. emailSubject (String, optional) The subject line for the custom message. Custom Message Response Structure { \"request\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . } \"codeParameter\" : \"####\" , \"usernameParameter\" : \"string\" , \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"smsMessage\" : \"string\" , \"emailMessage\" : \"string\" , \"emailSubject\" : \"string\" } }","title":"Custom Message Response"},{"location":"cognito-user-pool/#user-migration","text":"Amazon Cognito invokes this trigger when a user does not exist in the user pool at the time of sign-in with a password, or in the forgot-password flow. After the Lambda function returns successfully, Amazon Cognito creates the user in the user pool. Migrate user Lambda trigger documentation","title":"User Migration"},{"location":"cognito-user-pool/#user-migration-input","text":"{ \"version\" : \"string\" , \"triggerSource\" : \"UserMigration_Authentication\" , \"region\" : \"us-east-1\" , \"userPoolId\" : \"string\" , \"userName\" : \"userName\" , \"callerContext\" : { \"awsSdkVersion\" : \"awsSdkVersion\" , \"clientId\" : \"clientId\" }, \"request\" : { \"password\" : \"password\" }, \"response\" : {} }","title":"User Migration Input"},{"location":"cognito-user-pool/#user-migration-response","text":"User migration response structure { \"userName\" : \"string\" , \"request\" : { \"password\" : \"string\" , \"validationData\" : { \"string\" : \"string\" , . . . }, \"clientMetadata\" : { \"string\" : \"string\" , . . . } }, \"response\" : { \"userAttributes\" : { \"string\" : \"string\" , . . . }, \"finalUserStatus\" : \"string\" , \"messageAction\" : \"string\" , \"desiredDeliveryMediums\" : [ \"string\" , . . . ], \"forceAliasCreation\" : boolea n } }","title":"User Migration Response"},{"location":"cognito-user-pool/#libraries","text":"Python - Request and response utils - Pip aws-lambda-powertools Typescript - Typing for request and response - NPM @types/aws-lambda Java - Request and response classes for CognitoUserPool* - Maven aws-lambda-java-events Go - Request and response class - github.com/aws/aws-lambda-go/events","title":"Libraries"},{"location":"cognito-user-pool/#code-examples","text":"Define Auth Challenge Example using AWS Lambda Powertools from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.cognito_user_pool_event import DefineAuthChallengeTriggerEvent @event_source ( data_class = DefineAuthChallengeTriggerEvent ) def handler ( event : DefineAuthChallengeTriggerEvent , context ) -> dict : if ( len ( event . request . session ) == 1 and event . request . session [ 0 ] . challenge_name == \"SRP_A\" ): event . response . issue_tokens = False event . response . fail_authentication = False event . response . challenge_name = \"PASSWORD_VERIFIER\" elif ( len ( event . request . session ) == 2 and event . request . session [ 1 ] . challenge_name == \"PASSWORD_VERIFIER\" and event . request . session [ 1 ] . challenge_result ): event . response . issue_tokens = False event . response . fail_authentication = False event . response . challenge_name = \"CUSTOM_CHALLENGE\" elif ( len ( event . request . session ) == 3 and event . request . session [ 2 ] . challenge_name == \"CUSTOM_CHALLENGE\" and event . request . session [ 2 ] . challenge_result ): event . response . issue_tokens = True event . response . fail_authentication = False else : event . response . issue_tokens = False event . response . fail_authentication = True return event . raw_event","title":"Code Examples"},{"location":"cognito-user-pool/#documentation","text":"Reference documentation and blog posts. Customizing user pool workflows with Lambda triggers Anonymous User Identities with Cognito Lambda Triggers","title":"Documentation"},{"location":"config/","text":"Amazon Config \u00b6 Event-driven asynchronous invocation Input \u00b6 { \"invokingEvent\" : \"{\\\"configurationItem\\\":{\\\"configurationItemCaptureTime\\\":\\\"2016-02-17T01:36:34.043Z\\\",\\\"awsAccountId\\\":\\\"000000000000\\\",\\\"configurationItemStatus\\\":\\\"OK\\\",\\\"resourceId\\\":\\\"i-00000000\\\",\\\"ARN\\\":\\\"arn:aws:ec2:us-east-1:000000000000:instance/i-00000000\\\",\\\"awsRegion\\\":\\\"us-east-1\\\",\\\"availabilityZone\\\":\\\"us-east-1a\\\",\\\"resourceType\\\":\\\"AWS::EC2::Instance\\\",\\\"tags\\\":{\\\"Foo\\\":\\\"Bar\\\"},\\\"relationships\\\":[{\\\"resourceId\\\":\\\"eipalloc-00000000\\\",\\\"resourceType\\\":\\\"AWS::EC2::EIP\\\",\\\"name\\\":\\\"Is attached to ElasticIp\\\"}],\\\"configuration\\\":{\\\"foo\\\":\\\"bar\\\"}},\\\"messageType\\\":\\\"ConfigurationItemChangeNotification\\\"}\" , \"ruleParameters\" : \"{\\\"myParameterKey\\\":\\\"myParameterValue\\\"}\" , \"resultToken\" : \"myResultToken\" , \"eventLeftScope\" : false , \"executionRoleArn\" : \"arn:aws:iam::012345678912:role/config-role\" , \"configRuleArn\" : \"arn:aws:config:us-east-1:012345678912:config-rule/config-rule-0123456\" , \"configRuleName\" : \"change-triggered-config-rule\" , \"configRuleId\" : \"config-rule-0123456\" , \"accountId\" : \"012345678912\" , \"version\" : \"1.0\" } Response \u00b6 N/A Libraries \u00b6 N/A Reference Docs \u00b6 Using AWS Lambda with AWS Config","title":"Amazon Config"},{"location":"config/#amazon-config","text":"Event-driven asynchronous invocation","title":"Amazon Config"},{"location":"config/#input","text":"{ \"invokingEvent\" : \"{\\\"configurationItem\\\":{\\\"configurationItemCaptureTime\\\":\\\"2016-02-17T01:36:34.043Z\\\",\\\"awsAccountId\\\":\\\"000000000000\\\",\\\"configurationItemStatus\\\":\\\"OK\\\",\\\"resourceId\\\":\\\"i-00000000\\\",\\\"ARN\\\":\\\"arn:aws:ec2:us-east-1:000000000000:instance/i-00000000\\\",\\\"awsRegion\\\":\\\"us-east-1\\\",\\\"availabilityZone\\\":\\\"us-east-1a\\\",\\\"resourceType\\\":\\\"AWS::EC2::Instance\\\",\\\"tags\\\":{\\\"Foo\\\":\\\"Bar\\\"},\\\"relationships\\\":[{\\\"resourceId\\\":\\\"eipalloc-00000000\\\",\\\"resourceType\\\":\\\"AWS::EC2::EIP\\\",\\\"name\\\":\\\"Is attached to ElasticIp\\\"}],\\\"configuration\\\":{\\\"foo\\\":\\\"bar\\\"}},\\\"messageType\\\":\\\"ConfigurationItemChangeNotification\\\"}\" , \"ruleParameters\" : \"{\\\"myParameterKey\\\":\\\"myParameterValue\\\"}\" , \"resultToken\" : \"myResultToken\" , \"eventLeftScope\" : false , \"executionRoleArn\" : \"arn:aws:iam::012345678912:role/config-role\" , \"configRuleArn\" : \"arn:aws:config:us-east-1:012345678912:config-rule/config-rule-0123456\" , \"configRuleName\" : \"change-triggered-config-rule\" , \"configRuleId\" : \"config-rule-0123456\" , \"accountId\" : \"012345678912\" , \"version\" : \"1.0\" }","title":"Input"},{"location":"config/#response","text":"N/A","title":"Response"},{"location":"config/#libraries","text":"N/A","title":"Libraries"},{"location":"config/#reference-docs","text":"Using AWS Lambda with AWS Config","title":"Reference Docs"},{"location":"connect/","text":"Amazon Connect \u00b6 Event-driven, synchronous invocation Input \u00b6 Example Amazon Connect request event \u00b6 Amazon Connect invokes your Lambda function synchronously with an event that contains the request body and metadata. Example Amazon Connect request event { \"Details\" : { \"ContactData\" : { \"Attributes\" : {}, \"Channel\" : \"VOICE\" , \"ContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"CustomerEndpoint\" : { \"Address\" : \"+1234567890\" , \"Type\" : \"TELEPHONE_NUMBER\" }, \"InitialContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"InitiationMethod\" : \"INBOUND | OUTBOUND | TRANSFER | CALLBACK\" , \"InstanceARN\" : \"arn:aws:connect:aws-region:1234567890:instance/c8c0e68d-2200-4265-82c0-XXXXXXXXXX\" , \"PreviousContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"Queue\" : { \"ARN\" : \"arn:aws:connect:eu-west-2:111111111111:instance/cccccccc-bbbb-dddd-eeee-ffffffffffff/queue/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\" , \"Name\" : \"PasswordReset\" }, \"SystemEndpoint\" : { \"Address\" : \"+1234567890\" , \"Type\" : \"TELEPHONE_NUMBER\" } }, \"Parameters\" : { \"sentAttributeKey\" : \"sentAttributeValue\" } }, \"Name\" : \"ContactFlowEvent\" } Response \u00b6 No required response format { \"Name\" : \"CustomerName\" , \"Address\" : \"1234 Main Road\" , \"CallerType\" : \"Patient\" } Libraries \u00b6 Typescript - ConnectContactFlowEvent - NPM @types/aws-lambda Java - ConnectEvent - Maven aws-lambda-java-events Python - ConnectContactFlowEvent - pip aws-lambda-powertools DotNet - ContactFlowEvent - Nuget Amazon.Lambda.ConnectEvents Reference Docs \u00b6 Using Lambda with Amazon Connect Config - Invoke AWS Lambda functions","title":"Amazon Connect"},{"location":"connect/#amazon-connect","text":"Event-driven, synchronous invocation","title":"Amazon Connect"},{"location":"connect/#input","text":"","title":"Input"},{"location":"connect/#example-amazon-connect-request-event","text":"Amazon Connect invokes your Lambda function synchronously with an event that contains the request body and metadata. Example Amazon Connect request event { \"Details\" : { \"ContactData\" : { \"Attributes\" : {}, \"Channel\" : \"VOICE\" , \"ContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"CustomerEndpoint\" : { \"Address\" : \"+1234567890\" , \"Type\" : \"TELEPHONE_NUMBER\" }, \"InitialContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"InitiationMethod\" : \"INBOUND | OUTBOUND | TRANSFER | CALLBACK\" , \"InstanceARN\" : \"arn:aws:connect:aws-region:1234567890:instance/c8c0e68d-2200-4265-82c0-XXXXXXXXXX\" , \"PreviousContactId\" : \"4a573372-1f28-4e26-b97b-XXXXXXXXXXX\" , \"Queue\" : { \"ARN\" : \"arn:aws:connect:eu-west-2:111111111111:instance/cccccccc-bbbb-dddd-eeee-ffffffffffff/queue/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\" , \"Name\" : \"PasswordReset\" }, \"SystemEndpoint\" : { \"Address\" : \"+1234567890\" , \"Type\" : \"TELEPHONE_NUMBER\" } }, \"Parameters\" : { \"sentAttributeKey\" : \"sentAttributeValue\" } }, \"Name\" : \"ContactFlowEvent\" }","title":"Example Amazon Connect request event"},{"location":"connect/#response","text":"No required response format { \"Name\" : \"CustomerName\" , \"Address\" : \"1234 Main Road\" , \"CallerType\" : \"Patient\" }","title":"Response"},{"location":"connect/#libraries","text":"Typescript - ConnectContactFlowEvent - NPM @types/aws-lambda Java - ConnectEvent - Maven aws-lambda-java-events Python - ConnectContactFlowEvent - pip aws-lambda-powertools DotNet - ContactFlowEvent - Nuget Amazon.Lambda.ConnectEvents","title":"Libraries"},{"location":"connect/#reference-docs","text":"Using Lambda with Amazon Connect Config - Invoke AWS Lambda functions","title":"Reference Docs"},{"location":"dynamodb/","text":"DynamoDB \u00b6 Amazon DynamoDB stream, Lambda reads records from the stream and invokes your function synchronously with an event that contains stream records. Lambda reads records in batches and invokes your function to process records from the batch. Input \u00b6 Generating sample events via SAM CLI \u00b6 sam local generate-event dynamodb update Input Event structure \u00b6 { \"Records\" : [ { \"eventID\" : \"c4ca4238a0b923820dcc509a6f75849b\" , \"eventName\" : \"INSERT\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"NewImage\" : { \"Message\" : { \"S\" : \"New item!\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439091\" , \"SizeBytes\" : 26 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" , \"userIdentity\" : { \"principalId\" : \"dynamodb.amazonaws.com\" , \"type\" : \"Service\" } }, { \"eventID\" : \"c81e728d9d4c2f636f067f89cc14862c\" , \"eventName\" : \"MODIFY\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"NewImage\" : { \"Message\" : { \"S\" : \"This item has changed\" }, \"Id\" : { \"N\" : \"101\" } }, \"OldImage\" : { \"Message\" : { \"S\" : \"New item!\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439092\" , \"SizeBytes\" : 59 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" }, { \"eventID\" : \"eccbc87e4b5ce2fe28308fd9f2a7baf3\" , \"eventName\" : \"REMOVE\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"OldImage\" : { \"Message\" : { \"S\" : \"This item has changed\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439093\" , \"SizeBytes\" : 38 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" } ] } Response \u00b6 Response schema { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"<id>\" } ] } Libraries \u00b6 Typing and data classes Python - DynamoDBStreamEvent - Pip aws-lambda-powertools Go - DynamoDBEvent - Go github.com/aws/aws-lambda-go/events Typescript - DynamoDBStreamEvent - NPM @types/aws-lambda Java - DynamodbEvent - Java aws-lambda-java-events Rust - aws_lambda_events::dynamodb::Event - Rust aws_lambda_events Ruby - DynamodbEvent - Gem jets Batch handler Python - BatchProcessor - pip aws-lambda-powertools Python - on_dynamodb_record - pip chalice Code Examples \u00b6 Example using AWS Lambda Powertool (Python) import json from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.utilities.batch import BatchProcessor , EventType , batch_processor from aws_lambda_powertools.utilities.data_classes.dynamo_db_stream_event import DynamoDBRecord from aws_lambda_powertools.utilities.typing import LambdaContext processor = BatchProcessor ( event_type = EventType . DynamoDBStreams ) tracer = Tracer () logger = Logger () @tracer . capture_method def record_handler ( record : DynamoDBRecord ): logger . info ( record . dynamodb . new_image ) payload : dict = json . loads ( record . dynamodb . new_image . get ( \"Message\" ) . get_value ) # alternatively: # changes: Dict[str, dynamo_db_stream_event.AttributeValue] = record.dynamodb.new_image # payload = change.get(\"Message\").raw_event -> {\"S\": \"<payload>\"} ... @logger . inject_lambda_context @tracer . capture_lambda_handler @batch_processor ( record_handler = record_handler , processor = processor ) def lambda_handler ( event , context : LambdaContext ): return processor . response () Reference Docs \u00b6 Using AWS Lambda with Amazon DynamoDB","title":"DynamoDB"},{"location":"dynamodb/#dynamodb","text":"Amazon DynamoDB stream, Lambda reads records from the stream and invokes your function synchronously with an event that contains stream records. Lambda reads records in batches and invokes your function to process records from the batch.","title":"DynamoDB"},{"location":"dynamodb/#input","text":"","title":"Input"},{"location":"dynamodb/#generating-sample-events-via-sam-cli","text":"sam local generate-event dynamodb update","title":"Generating sample events via SAM CLI"},{"location":"dynamodb/#input-event-structure","text":"{ \"Records\" : [ { \"eventID\" : \"c4ca4238a0b923820dcc509a6f75849b\" , \"eventName\" : \"INSERT\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"NewImage\" : { \"Message\" : { \"S\" : \"New item!\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439091\" , \"SizeBytes\" : 26 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" , \"userIdentity\" : { \"principalId\" : \"dynamodb.amazonaws.com\" , \"type\" : \"Service\" } }, { \"eventID\" : \"c81e728d9d4c2f636f067f89cc14862c\" , \"eventName\" : \"MODIFY\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"NewImage\" : { \"Message\" : { \"S\" : \"This item has changed\" }, \"Id\" : { \"N\" : \"101\" } }, \"OldImage\" : { \"Message\" : { \"S\" : \"New item!\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439092\" , \"SizeBytes\" : 59 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" }, { \"eventID\" : \"eccbc87e4b5ce2fe28308fd9f2a7baf3\" , \"eventName\" : \"REMOVE\" , \"eventVersion\" : \"1.1\" , \"eventSource\" : \"aws:dynamodb\" , \"awsRegion\" : \"eu-central-1\" , \"dynamodb\" : { \"Keys\" : { \"Id\" : { \"N\" : \"101\" } }, \"OldImage\" : { \"Message\" : { \"S\" : \"This item has changed\" }, \"Id\" : { \"N\" : \"101\" } }, \"ApproximateCreationDateTime\" : 1428537600 , \"SequenceNumber\" : \"4421584500000000017450439093\" , \"SizeBytes\" : 38 , \"StreamViewType\" : \"NEW_AND_OLD_IMAGES\" }, \"eventSourceARN\" : \"arn:aws:dynamodb:eu-central-1:123456789012:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\" } ] }","title":"Input Event structure"},{"location":"dynamodb/#response","text":"Response schema { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"<id>\" } ] }","title":"Response"},{"location":"dynamodb/#libraries","text":"Typing and data classes Python - DynamoDBStreamEvent - Pip aws-lambda-powertools Go - DynamoDBEvent - Go github.com/aws/aws-lambda-go/events Typescript - DynamoDBStreamEvent - NPM @types/aws-lambda Java - DynamodbEvent - Java aws-lambda-java-events Rust - aws_lambda_events::dynamodb::Event - Rust aws_lambda_events Ruby - DynamodbEvent - Gem jets Batch handler Python - BatchProcessor - pip aws-lambda-powertools Python - on_dynamodb_record - pip chalice","title":"Libraries"},{"location":"dynamodb/#code-examples","text":"Example using AWS Lambda Powertool (Python) import json from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.utilities.batch import BatchProcessor , EventType , batch_processor from aws_lambda_powertools.utilities.data_classes.dynamo_db_stream_event import DynamoDBRecord from aws_lambda_powertools.utilities.typing import LambdaContext processor = BatchProcessor ( event_type = EventType . DynamoDBStreams ) tracer = Tracer () logger = Logger () @tracer . capture_method def record_handler ( record : DynamoDBRecord ): logger . info ( record . dynamodb . new_image ) payload : dict = json . loads ( record . dynamodb . new_image . get ( \"Message\" ) . get_value ) # alternatively: # changes: Dict[str, dynamo_db_stream_event.AttributeValue] = record.dynamodb.new_image # payload = change.get(\"Message\").raw_event -> {\"S\": \"<payload>\"} ... @logger . inject_lambda_context @tracer . capture_lambda_handler @batch_processor ( record_handler = record_handler , processor = processor ) def lambda_handler ( event , context : LambdaContext ): return processor . response ()","title":"Code Examples"},{"location":"dynamodb/#reference-docs","text":"Using AWS Lambda with Amazon DynamoDB","title":"Reference Docs"},{"location":"event-bridge/","text":"Amazon EventBridge \u00b6 Amazon EventBridge (formerly called CloudWatch Events) invokes your function asynchronously with an event document that wraps the event from its source. Input \u00b6 Example CloudWatch Event \u00b6 CloudWatch Events Event Examples From Supported Services EventBridge event example \u00b6 EventBridge (CloudWatch Events) event example { \"version\" : \"0\" , \"id\" : \"fe8d3c65-xmpl-c5c3-2c87-81584709a377\" , \"detail-type\" : \"RDS DB Instance Event\" , \"source\" : \"aws.rds\" , \"account\" : \"123456789012\" , \"time\" : \"2020-04-28T07:20:20Z\" , \"region\" : \"us-east-2\" , \"resources\" :[ \"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\" ], \"detail\" :{ \"EventCategories\" :[ \"backup\" ], \"SourceType\" : \"DB_INSTANCE\" , \"SourceArn\" : \"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\" , \"Date\" : \"2020-04-28T07:20:20.112Z\" , \"Message\" : \"Finished DB Instance backup\" , \"SourceIdentifier\" : \"rdz6xmpliljlb1\" } } EventBridge scheduled event \u00b6 EventBridge (CloudWatch Events) message event { \"version\" : \"0\" , \"account\" : \"123456789012\" , \"region\" : \"us-east-2\" , \"detail\" :{}, \"detail-type\" : \"Scheduled Event\" , \"source\" : \"aws.events\" , \"time\" : \"2019-03-01T01:23:45Z\" , \"id\" : \"cdc73f9d-aea9-11e3-9d5a-835b769c0d9c\" , \"resources\" :[ \"arn:aws:events:us-east-2:123456789012:rule/my-schedule\" ] } EventBridge S3 event \u00b6 EventBridge S3 event { \"version\" : \"0\" , \"id\" : \"2d4eba74-fd51-3966-4bfa-b013c9da8ff1\" , \"detail-type\" : \"Object Created\" , \"source\" : \"aws.s3\" , \"account\" : \"123456789012\" , \"time\" : \"2021-11-13T00:00:59Z\" , \"region\" : \"us-east-1\" , \"resources\" :[ \"arn:aws:s3:::jbarr-public\" ], \"detail\" :{ \"version\" : \"0\" , \"bucket\" :{ \"name\" : \"jbarr-public\" }, \"object\" :{ \"key\" : \"eb_create_rule_mid_1.png\" , \"size\" : 99797 , \"etag\" : \"7a72374e1238761aca7778318b363232\" , \"version-id\" : \"a7diKodKIlW3mHIvhGvVphz5N_ZcL3RG\" , \"sequencer\" : \"00618F003B7286F496\" }, \"request-id\" : \"4Z2S00BKW2P1AQK8\" , \"requester\" : \"348414629041\" , \"source-ip-address\" : \"72.21.198.68\" , \"reason\" : \"PutObject\" } } EC2 Instance State-change Event \u00b6 EventBridge (CloudWatch Events) invokes your Lambda function asynchronously with the event document from Amazon EC2. Using AWS Lambda with Amazon EC2 Amazon EC2 State Change Events { \"version\" : \"0\" , \"id\" : \"b6ba298a-7732-2226-xmpl-976312c1a050\" , \"detail-type\" : \"EC2 Instance State-change Notification\" , \"source\" : \"aws.ec2\" , \"account\" : \"123456798012\" , \"time\" : \"2019-10-02T17:59:30Z\" , \"region\" : \"us-east-2\" , \"resources\" : [ \"arn:aws:ec2:us-east-2:123456798012:instance/i-0c314xmplcd5b8173\" ], \"detail\" : { \"instance-id\" : \"i-0c314xmplcd5b8173\" , \"state\" : \"running\" } } Getting the correlation id \u00b6 JSON path to correlation id: id Generating sample events via SAM CLI \u00b6 sam local generate-event cloudwatch scheduled-event Response \u00b6 N/A Libraries \u00b6 Typing and data classes Typescript - EventBridgeEvent - NPM @types/aws-lambda Python - EventBridgeEvent - Pip aws-lambda-powertools Go - CloudWatchEvent DotNet - CloudWatchEvent - NuGet Amazon.Lambda.CloudWatchEvents Php - EventBridgeEvent - Composer bref/bref Rust - cloud_events - aws_lambda_events Handlers with infrastructure provisioning Ruby - CloudWatch Rules Event - gem jets Python - Chalice on_cw_event - pip chalice Code Examples \u00b6 DotNet has a large number of handlers for CloudWatch Events. DotNet ECSTaskStateChangeEvent example public class Function { public string Handler ( ECSTaskStateChangeEvent ecsTaskStateChangeEvent ) { Console . WriteLine ( $\"ECS Task ARN - {ecsTaskStateChangeEvent.Detail.TaskArn}\" ); } } Jet - CloudWatch Rules Events allows you to define the infracture code next to the implementation Ruby example might be getting notified when an unwanted security group port gets opened. class SecurityJob < ApplicationJob rule_event ( description : \"Checks for security group changes\" , detail_type : [ \"AWS API Call via CloudTrail\" ] , detail : { event_source : [ \"ec2.amazonaws.com\" ] , event_name : [ \"AuthorizeSecurityGroupIngress\" , \"AuthorizeSecurityGroupEgress\" , \"RevokeSecurityGroupIngress\" , \"RevokeSecurityGroupEgress\" , \"CreateSecurityGroup\" , \"DeleteSecurityGroup\" ] } ) def detect_security_group_changes puts \"event: #{ JSON . dump ( event ) } \" # event is available # your logic end end Chalice can also to the infrastructure provisioning along set the lambda handler Example using Chalice to subscribe to code commit events app = chalice . Chalice ( app_name = 'foo' ) @app . on_cw_event ({ \"source\" : [ \"aws.codecommit\" ]}) def on_code_commit_changes ( event ): print ( event . to_dict ()) Chalice scheduling ab hourly Cloudwatch event app = chalice . Chalice ( app_name = 'foo' ) @app . schedule ( 'rate(1 hour)' ) def every_hour ( event ): print ( event . to_dict ()) Reference Docs \u00b6 Amazon EventBridge (CloudWatch Events) Use Amazon S3 Event Notifications with Amazon EventBridge CloudWatch Events Event Examples From Supported Services","title":"EventBridge"},{"location":"event-bridge/#amazon-eventbridge","text":"Amazon EventBridge (formerly called CloudWatch Events) invokes your function asynchronously with an event document that wraps the event from its source.","title":"Amazon EventBridge"},{"location":"event-bridge/#input","text":"","title":"Input"},{"location":"event-bridge/#example-cloudwatch-event","text":"CloudWatch Events Event Examples From Supported Services","title":"Example CloudWatch Event"},{"location":"event-bridge/#eventbridge-event-example","text":"EventBridge (CloudWatch Events) event example { \"version\" : \"0\" , \"id\" : \"fe8d3c65-xmpl-c5c3-2c87-81584709a377\" , \"detail-type\" : \"RDS DB Instance Event\" , \"source\" : \"aws.rds\" , \"account\" : \"123456789012\" , \"time\" : \"2020-04-28T07:20:20Z\" , \"region\" : \"us-east-2\" , \"resources\" :[ \"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\" ], \"detail\" :{ \"EventCategories\" :[ \"backup\" ], \"SourceType\" : \"DB_INSTANCE\" , \"SourceArn\" : \"arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1\" , \"Date\" : \"2020-04-28T07:20:20.112Z\" , \"Message\" : \"Finished DB Instance backup\" , \"SourceIdentifier\" : \"rdz6xmpliljlb1\" } }","title":"EventBridge event example"},{"location":"event-bridge/#eventbridge-scheduled-event","text":"EventBridge (CloudWatch Events) message event { \"version\" : \"0\" , \"account\" : \"123456789012\" , \"region\" : \"us-east-2\" , \"detail\" :{}, \"detail-type\" : \"Scheduled Event\" , \"source\" : \"aws.events\" , \"time\" : \"2019-03-01T01:23:45Z\" , \"id\" : \"cdc73f9d-aea9-11e3-9d5a-835b769c0d9c\" , \"resources\" :[ \"arn:aws:events:us-east-2:123456789012:rule/my-schedule\" ] }","title":"EventBridge scheduled event"},{"location":"event-bridge/#eventbridge-s3-event","text":"EventBridge S3 event { \"version\" : \"0\" , \"id\" : \"2d4eba74-fd51-3966-4bfa-b013c9da8ff1\" , \"detail-type\" : \"Object Created\" , \"source\" : \"aws.s3\" , \"account\" : \"123456789012\" , \"time\" : \"2021-11-13T00:00:59Z\" , \"region\" : \"us-east-1\" , \"resources\" :[ \"arn:aws:s3:::jbarr-public\" ], \"detail\" :{ \"version\" : \"0\" , \"bucket\" :{ \"name\" : \"jbarr-public\" }, \"object\" :{ \"key\" : \"eb_create_rule_mid_1.png\" , \"size\" : 99797 , \"etag\" : \"7a72374e1238761aca7778318b363232\" , \"version-id\" : \"a7diKodKIlW3mHIvhGvVphz5N_ZcL3RG\" , \"sequencer\" : \"00618F003B7286F496\" }, \"request-id\" : \"4Z2S00BKW2P1AQK8\" , \"requester\" : \"348414629041\" , \"source-ip-address\" : \"72.21.198.68\" , \"reason\" : \"PutObject\" } }","title":"EventBridge S3 event"},{"location":"event-bridge/#ec2-instance-state-change-event","text":"EventBridge (CloudWatch Events) invokes your Lambda function asynchronously with the event document from Amazon EC2. Using AWS Lambda with Amazon EC2 Amazon EC2 State Change Events { \"version\" : \"0\" , \"id\" : \"b6ba298a-7732-2226-xmpl-976312c1a050\" , \"detail-type\" : \"EC2 Instance State-change Notification\" , \"source\" : \"aws.ec2\" , \"account\" : \"123456798012\" , \"time\" : \"2019-10-02T17:59:30Z\" , \"region\" : \"us-east-2\" , \"resources\" : [ \"arn:aws:ec2:us-east-2:123456798012:instance/i-0c314xmplcd5b8173\" ], \"detail\" : { \"instance-id\" : \"i-0c314xmplcd5b8173\" , \"state\" : \"running\" } }","title":"EC2 Instance State-change Event"},{"location":"event-bridge/#getting-the-correlation-id","text":"JSON path to correlation id: id","title":"Getting the correlation id"},{"location":"event-bridge/#generating-sample-events-via-sam-cli","text":"sam local generate-event cloudwatch scheduled-event","title":"Generating sample events via SAM CLI"},{"location":"event-bridge/#response","text":"N/A","title":"Response"},{"location":"event-bridge/#libraries","text":"Typing and data classes Typescript - EventBridgeEvent - NPM @types/aws-lambda Python - EventBridgeEvent - Pip aws-lambda-powertools Go - CloudWatchEvent DotNet - CloudWatchEvent - NuGet Amazon.Lambda.CloudWatchEvents Php - EventBridgeEvent - Composer bref/bref Rust - cloud_events - aws_lambda_events Handlers with infrastructure provisioning Ruby - CloudWatch Rules Event - gem jets Python - Chalice on_cw_event - pip chalice","title":"Libraries"},{"location":"event-bridge/#code-examples","text":"DotNet has a large number of handlers for CloudWatch Events. DotNet ECSTaskStateChangeEvent example public class Function { public string Handler ( ECSTaskStateChangeEvent ecsTaskStateChangeEvent ) { Console . WriteLine ( $\"ECS Task ARN - {ecsTaskStateChangeEvent.Detail.TaskArn}\" ); } } Jet - CloudWatch Rules Events allows you to define the infracture code next to the implementation Ruby example might be getting notified when an unwanted security group port gets opened. class SecurityJob < ApplicationJob rule_event ( description : \"Checks for security group changes\" , detail_type : [ \"AWS API Call via CloudTrail\" ] , detail : { event_source : [ \"ec2.amazonaws.com\" ] , event_name : [ \"AuthorizeSecurityGroupIngress\" , \"AuthorizeSecurityGroupEgress\" , \"RevokeSecurityGroupIngress\" , \"RevokeSecurityGroupEgress\" , \"CreateSecurityGroup\" , \"DeleteSecurityGroup\" ] } ) def detect_security_group_changes puts \"event: #{ JSON . dump ( event ) } \" # event is available # your logic end end Chalice can also to the infrastructure provisioning along set the lambda handler Example using Chalice to subscribe to code commit events app = chalice . Chalice ( app_name = 'foo' ) @app . on_cw_event ({ \"source\" : [ \"aws.codecommit\" ]}) def on_code_commit_changes ( event ): print ( event . to_dict ()) Chalice scheduling ab hourly Cloudwatch event app = chalice . Chalice ( app_name = 'foo' ) @app . schedule ( 'rate(1 hour)' ) def every_hour ( event ): print ( event . to_dict ())","title":"Code Examples"},{"location":"event-bridge/#reference-docs","text":"Amazon EventBridge (CloudWatch Events) Use Amazon S3 Event Notifications with Amazon EventBridge CloudWatch Events Event Examples From Supported Services","title":"Reference Docs"},{"location":"http-api-custom-authorizer/","text":"API Gateway Http Authorizer \u00b6 Event driven, synchronous. Limits \u00b6 Authorizers per API limit of 10, but can be increased. Audiences per authorizer of 50, and can not be increased. Input \u00b6 API Gateway Authorizer Request Event Format 1.0 \u00b6 Same as API Gateway Rest Authorizer - Request { \"version\" : \"1.0\" , \"type\" : \"REQUEST\" , \"methodArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"identitySource\" : \"user1,123\" , \"authorizationToken\" : \"user1,123\" , \"resource\" : \"/request\" , \"path\" : \"/request\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"X-AMZ-Date\" : \"20170718T062915Z\" , \"Accept\" : \"*/*\" , \"HeaderAuth1\" : \"headerValue1\" , \"CloudFront-Viewer-Country\" : \"US\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"User-Agent\" : \"...\" }, \"queryStringParameters\" : { \"QueryString1\" : \"queryValue1\" }, \"pathParameters\" : {}, \"stageVariables\" : { \"StageVar1\" : \"stageValue1\" }, \"requestContext\" : { \"path\" : \"/request\" , \"accountId\" : \"123456789012\" , \"resourceId\" : \"05c7jb\" , \"stage\" : \"test\" , \"requestId\" : \"...\" , \"identity\" : { \"apiKey\" : \"...\" , \"sourceIp\" : \"...\" , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"resourcePath\" : \"/request\" , \"httpMethod\" : \"GET\" , \"apiId\" : \"abcdef123\" } } API Gateway Authorizer Request Event Format 2.0 \u00b6 { \"version\" : \"2.0\" , \"type\" : \"REQUEST\" , \"routeArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"identitySource\" : [ \"user1\" , \"123\" ], \"routeKey\" : \"$default\" , \"rawPath\" : \"/my/path\" , \"rawQueryString\" : \"parameter1=value1&parameter1=value2&parameter2=value\" , \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"headers\" : { \"Header1\" : \"value1\" , \"Header2\" : \"value2\" }, \"queryStringParameters\" : { \"parameter1\" : \"value1,value2\" , \"parameter2\" : \"value\" }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"api-id\" , \"authentication\" : { \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"http\" : { \"method\" : \"POST\" , \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"sourceIp\" : \"IP\" , \"userAgent\" : \"agent\" }, \"requestId\" : \"id\" , \"routeKey\" : \"$default\" , \"stage\" : \"$default\" , \"time\" : \"12/Mar/2020:19:03:58 +0000\" , \"timeEpoch\" : 1583348638390 }, \"pathParameters\" : { \"parameter1\" : \"value1\" }, \"stageVariables\" : { \"stageVariable1\" : \"value1\" , \"stageVariable2\" : \"value2\" } } Response \u00b6 IAM Policy \u00b6 { \"principalId\" : \"abcdef\" , // The pri n cipal user ide nt i f ica t io n associa te d wi t h t he t oke n se nt by t he clie nt . \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Allow|Deny\" , \"Resource\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } ] }, \"context\" : { \"exampleKey\" : \"exampleValue\" } } Simple response \u00b6 { \"isAuthorized\" : true / false , \"context\" : { \"exampleKey\" : \"exampleValue\" } } Libraries \u00b6 Python - APIGatewayAuthorizerEventV2 Code examples \u00b6 from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( APIGatewayAuthorizerEventV2 , APIGatewayAuthorizerResponseV2 , ) from secrets import compare_digest def get_user_by_token ( token ): if compare_digest ( token , \"Foo\" ): return { \"name\" : \"Foo\" } return None @event_source ( data_class = APIGatewayAuthorizerEventV2 ) def handler ( event : APIGatewayAuthorizerEventV2 , context ): user = get_user_by_token ( event . get_header_value ( \"x-token\" )) if user is None : # No user was found, so we return not authorized return APIGatewayAuthorizerResponseV2 () . asdict () # Found the user and setting the details in the context return APIGatewayAuthorizerResponseV2 ( authorize = True , context = user ) . asdict () Reference Docs \u00b6 Working with AWS Lambda authorizers for HTTP APIs Introducing IAM and Lambda authorizers for Amazon API Gateway HTTP APIs","title":"API Gateway Http Authorizer"},{"location":"http-api-custom-authorizer/#api-gateway-http-authorizer","text":"Event driven, synchronous.","title":"API Gateway Http Authorizer"},{"location":"http-api-custom-authorizer/#limits","text":"Authorizers per API limit of 10, but can be increased. Audiences per authorizer of 50, and can not be increased.","title":"Limits"},{"location":"http-api-custom-authorizer/#input","text":"","title":"Input"},{"location":"http-api-custom-authorizer/#api-gateway-authorizer-request-event-format-10","text":"Same as API Gateway Rest Authorizer - Request { \"version\" : \"1.0\" , \"type\" : \"REQUEST\" , \"methodArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"identitySource\" : \"user1,123\" , \"authorizationToken\" : \"user1,123\" , \"resource\" : \"/request\" , \"path\" : \"/request\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"X-AMZ-Date\" : \"20170718T062915Z\" , \"Accept\" : \"*/*\" , \"HeaderAuth1\" : \"headerValue1\" , \"CloudFront-Viewer-Country\" : \"US\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"User-Agent\" : \"...\" }, \"queryStringParameters\" : { \"QueryString1\" : \"queryValue1\" }, \"pathParameters\" : {}, \"stageVariables\" : { \"StageVar1\" : \"stageValue1\" }, \"requestContext\" : { \"path\" : \"/request\" , \"accountId\" : \"123456789012\" , \"resourceId\" : \"05c7jb\" , \"stage\" : \"test\" , \"requestId\" : \"...\" , \"identity\" : { \"apiKey\" : \"...\" , \"sourceIp\" : \"...\" , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"resourcePath\" : \"/request\" , \"httpMethod\" : \"GET\" , \"apiId\" : \"abcdef123\" } }","title":"API Gateway Authorizer Request Event Format 1.0"},{"location":"http-api-custom-authorizer/#api-gateway-authorizer-request-event-format-20","text":"{ \"version\" : \"2.0\" , \"type\" : \"REQUEST\" , \"routeArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"identitySource\" : [ \"user1\" , \"123\" ], \"routeKey\" : \"$default\" , \"rawPath\" : \"/my/path\" , \"rawQueryString\" : \"parameter1=value1&parameter1=value2&parameter2=value\" , \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"headers\" : { \"Header1\" : \"value1\" , \"Header2\" : \"value2\" }, \"queryStringParameters\" : { \"parameter1\" : \"value1,value2\" , \"parameter2\" : \"value\" }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"api-id\" , \"authentication\" : { \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"http\" : { \"method\" : \"POST\" , \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"sourceIp\" : \"IP\" , \"userAgent\" : \"agent\" }, \"requestId\" : \"id\" , \"routeKey\" : \"$default\" , \"stage\" : \"$default\" , \"time\" : \"12/Mar/2020:19:03:58 +0000\" , \"timeEpoch\" : 1583348638390 }, \"pathParameters\" : { \"parameter1\" : \"value1\" }, \"stageVariables\" : { \"stageVariable1\" : \"value1\" , \"stageVariable2\" : \"value2\" } }","title":"API Gateway Authorizer Request Event Format 2.0"},{"location":"http-api-custom-authorizer/#response","text":"","title":"Response"},{"location":"http-api-custom-authorizer/#iam-policy","text":"{ \"principalId\" : \"abcdef\" , // The pri n cipal user ide nt i f ica t io n associa te d wi t h t he t oke n se nt by t he clie nt . \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Allow|Deny\" , \"Resource\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } ] }, \"context\" : { \"exampleKey\" : \"exampleValue\" } }","title":"IAM Policy"},{"location":"http-api-custom-authorizer/#simple-response","text":"{ \"isAuthorized\" : true / false , \"context\" : { \"exampleKey\" : \"exampleValue\" } }","title":"Simple response"},{"location":"http-api-custom-authorizer/#libraries","text":"Python - APIGatewayAuthorizerEventV2","title":"Libraries"},{"location":"http-api-custom-authorizer/#code-examples","text":"from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( APIGatewayAuthorizerEventV2 , APIGatewayAuthorizerResponseV2 , ) from secrets import compare_digest def get_user_by_token ( token ): if compare_digest ( token , \"Foo\" ): return { \"name\" : \"Foo\" } return None @event_source ( data_class = APIGatewayAuthorizerEventV2 ) def handler ( event : APIGatewayAuthorizerEventV2 , context ): user = get_user_by_token ( event . get_header_value ( \"x-token\" )) if user is None : # No user was found, so we return not authorized return APIGatewayAuthorizerResponseV2 () . asdict () # Found the user and setting the details in the context return APIGatewayAuthorizerResponseV2 ( authorize = True , context = user ) . asdict ()","title":"Code examples"},{"location":"http-api-custom-authorizer/#reference-docs","text":"Working with AWS Lambda authorizers for HTTP APIs Introducing IAM and Lambda authorizers for Amazon API Gateway HTTP APIs","title":"Reference Docs"},{"location":"http-api/","text":"API Gateway V2 - Http API \u00b6 Amazon API Gateway invokes your function synchronously with an event that contains a JSON representation of the HTTP request. Limits \u00b6 General limits and differents from Rest API Large things missing IMO is AWS X-Ray , Usage Plans and API Keys Choosing between HTTP APIs and REST APIs HTTP API quotas Lambda specific hard limitations Payload limit of 6mb for the lambda Maximum timeout of 30 seconds Request \u00b6 Getting the correlation id \u00b6 JSON path to correlation id: requestContext.requestId Generating sample events \u00b6 Via AWS SAM CLI you can generate sample events # PR open with sam cli repo (https://github.com/aws/aws-sam-cli/pull/3655) Request Stucture format 2.0 \u00b6 Note Format 2.0 doesn't have multiValueHeaders or multiValueQueryStringParameters fields. Duplicate headers are combined with commas and included in the headers field. Duplicate query strings are combined with commas and included in the queryStringParameters field. Format 2.0 includes a new cookies field. All cookie headers in the request are combined with commas and added to the cookies field. In the response to the client, each cookie becomes a set-cookie header. Http api format 2.0 { \"version\" : \"2.0\" , \"routeKey\" : \"$default\" , \"rawPath\" : \"/my/path\" , \"rawQueryString\" : \"parameter1=value1&parameter1=value2&parameter2=value\" , \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"headers\" : { \"Header1\" : \"value1\" , \"Header2\" : \"value1,value2\" }, \"queryStringParameters\" : { \"parameter1\" : \"value1,value2\" , \"parameter2\" : \"value\" }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"api-id\" , \"authentication\" : { \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"authorizer\" : { \"jwt\" : { \"claims\" : { \"claim1\" : \"value1\" , \"claim2\" : \"value2\" }, \"scopes\" : [ \"scope1\" , \"scope2\" ] } }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"http\" : { \"method\" : \"POST\" , \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"sourceIp\" : \"192.168.0.1/32\" , \"userAgent\" : \"agent\" }, \"requestId\" : \"id\" , \"routeKey\" : \"$default\" , \"stage\" : \"$default\" , \"time\" : \"12/Mar/2020:19:03:58 +0000\" , \"timeEpoch\" : 1583348638390 }, \"body\" : \"{\\\"message\\\": \\\"hello world\\\", \\\"username\\\": \\\"tom\\\"}\" , \"pathParameters\" : { \"parameter1\" : \"value1\" }, \"isBase64Encoded\" : false , \"stageVariables\" : { \"stageVariable1\" : \"value1\" , \"stageVariable2\" : \"value2\" } } Request Stucture format 1.0 \u00b6 Note This is the same format as API Gateway V1 - Rest API Http api format 1.0 { \"version\" : \"1.0\" , \"resource\" : \"/my/path\" , \"path\" : \"/my/path\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"header1\" : \"value1\" , \"header2\" : \"value2\" }, \"multiValueHeaders\" : { \"header1\" : [ \"value1\" ], \"header2\" : [ \"value1\" , \"value2\" ] }, \"queryStringParameters\" : { \"parameter1\" : \"value1\" , \"parameter2\" : \"value\" }, \"multiValueQueryStringParameters\" : { \"parameter1\" : [ \"value1\" , \"value2\" ], \"parameter2\" : [ \"value\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"id\" , \"authorizer\" : { \"claims\" : null , \"scopes\" : null }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"extendedRequestId\" : \"request-id\" , \"httpMethod\" : \"GET\" , \"identity\" : { \"accessKey\" : null , \"accountId\" : null , \"caller\" : null , \"cognitoAuthenticationProvider\" : null , \"cognitoAuthenticationType\" : null , \"cognitoIdentityId\" : null , \"cognitoIdentityPoolId\" : null , \"principalOrgId\" : null , \"sourceIp\" : \"IP\" , \"user\" : null , \"userAgent\" : \"user-agent\" , \"userArn\" : null , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"requestId\" : \"id=\" , \"requestTime\" : \"04/Mar/2020:19:15:17 +0000\" , \"requestTimeEpoch\" : 1583349317135 , \"resourceId\" : null , \"resourcePath\" : \"/my/path\" , \"stage\" : \"$default\" }, \"pathParameters\" : null , \"stageVariables\" : null , \"body\" : \"Hello from Lambda!\" , \"isBase64Encoded\" : false } Response \u00b6 Base64 encoded response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" , \"Content-Encoding\" : \"gzip\" }, \"body\" : \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\" , \"isBase64Encoded\" : true } Response for format 2.0 \u00b6 Lambda function response for format 2.0 { \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headername\" : \"headervalue\" , ... }, \"body\" : \"Hello from Lambda!\" } Response for format 1.0 \u00b6 Lambda function response for format 1.0 { \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headername\" : \"headervalue\" , ... }, \"multiValueHeaders\" : { \"headername\" : [ \"headervalue\" , \"headervalue2\" , ... ], ... }, \"body\" : \"...\" } Libraries \u00b6 Typed Lambda handlers by Language Python - data class and parser - Pip aws-lambda-powertools Typescript - api-gateway-proxy.d.ts - NPM @types/aws-lambda Go - ApiGatewayEvent typing - Crate github.com/aws/aws-lambda-go/events DoNet - APIGatewayEvents data classes - NuGet Amazon.Lambda.APIGatewayEvents Rust - apigw/mod.rs traits - Cargo aws_lambda_events Java - APIGatewayV2HTTPEvent data classes - Maven aws-lambda-java-events PHP - typing - Composer bref/bref Event Handlers by Language AWS Lambda Powertools Python - APIGatewayHttpResolver PHP Bref for webapps Serverless Java container - has support for SpringBoot, Apache Struts, Jersey, Spark and Micronaut Code examples \u00b6 Example handler for API Gateway V2 (Http API), payload format v2 example on how we can handle the /hello path. from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.event_handler import APIGatewayHttpResolver tracer = Tracer () logger = Logger () app = APIGatewayHttpResolver () @app . get ( \"/hello\" ) @tracer . capture_method def get_hello_universe (): return { \"message\" : \"hello universe\" } # You can continue to use other utilities just as before @logger . inject_lambda_context ( correlation_id_path = correlation_paths . API_GATEWAY_HTTP ) @tracer . capture_lambda_handler def lambda_handler ( event , context ): return app . resolve ( event , context ) Documention \u00b6 Working with AWS Lambda proxy integrations for HTTP APIs Using AWS Lambda with Amazon API Gateway","title":"API Gateway Http API"},{"location":"http-api/#api-gateway-v2-http-api","text":"Amazon API Gateway invokes your function synchronously with an event that contains a JSON representation of the HTTP request.","title":"API Gateway V2 - Http API"},{"location":"http-api/#limits","text":"General limits and differents from Rest API Large things missing IMO is AWS X-Ray , Usage Plans and API Keys Choosing between HTTP APIs and REST APIs HTTP API quotas Lambda specific hard limitations Payload limit of 6mb for the lambda Maximum timeout of 30 seconds","title":"Limits"},{"location":"http-api/#request","text":"","title":"Request"},{"location":"http-api/#getting-the-correlation-id","text":"JSON path to correlation id: requestContext.requestId","title":"Getting the correlation id"},{"location":"http-api/#generating-sample-events","text":"Via AWS SAM CLI you can generate sample events # PR open with sam cli repo (https://github.com/aws/aws-sam-cli/pull/3655)","title":"Generating sample events"},{"location":"http-api/#request-stucture-format-20","text":"Note Format 2.0 doesn't have multiValueHeaders or multiValueQueryStringParameters fields. Duplicate headers are combined with commas and included in the headers field. Duplicate query strings are combined with commas and included in the queryStringParameters field. Format 2.0 includes a new cookies field. All cookie headers in the request are combined with commas and added to the cookies field. In the response to the client, each cookie becomes a set-cookie header. Http api format 2.0 { \"version\" : \"2.0\" , \"routeKey\" : \"$default\" , \"rawPath\" : \"/my/path\" , \"rawQueryString\" : \"parameter1=value1&parameter1=value2&parameter2=value\" , \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"headers\" : { \"Header1\" : \"value1\" , \"Header2\" : \"value1,value2\" }, \"queryStringParameters\" : { \"parameter1\" : \"value1,value2\" , \"parameter2\" : \"value\" }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"api-id\" , \"authentication\" : { \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"authorizer\" : { \"jwt\" : { \"claims\" : { \"claim1\" : \"value1\" , \"claim2\" : \"value2\" }, \"scopes\" : [ \"scope1\" , \"scope2\" ] } }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"http\" : { \"method\" : \"POST\" , \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"sourceIp\" : \"192.168.0.1/32\" , \"userAgent\" : \"agent\" }, \"requestId\" : \"id\" , \"routeKey\" : \"$default\" , \"stage\" : \"$default\" , \"time\" : \"12/Mar/2020:19:03:58 +0000\" , \"timeEpoch\" : 1583348638390 }, \"body\" : \"{\\\"message\\\": \\\"hello world\\\", \\\"username\\\": \\\"tom\\\"}\" , \"pathParameters\" : { \"parameter1\" : \"value1\" }, \"isBase64Encoded\" : false , \"stageVariables\" : { \"stageVariable1\" : \"value1\" , \"stageVariable2\" : \"value2\" } }","title":"Request Stucture format 2.0"},{"location":"http-api/#request-stucture-format-10","text":"Note This is the same format as API Gateway V1 - Rest API Http api format 1.0 { \"version\" : \"1.0\" , \"resource\" : \"/my/path\" , \"path\" : \"/my/path\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"header1\" : \"value1\" , \"header2\" : \"value2\" }, \"multiValueHeaders\" : { \"header1\" : [ \"value1\" ], \"header2\" : [ \"value1\" , \"value2\" ] }, \"queryStringParameters\" : { \"parameter1\" : \"value1\" , \"parameter2\" : \"value\" }, \"multiValueQueryStringParameters\" : { \"parameter1\" : [ \"value1\" , \"value2\" ], \"parameter2\" : [ \"value\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"id\" , \"authorizer\" : { \"claims\" : null , \"scopes\" : null }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"extendedRequestId\" : \"request-id\" , \"httpMethod\" : \"GET\" , \"identity\" : { \"accessKey\" : null , \"accountId\" : null , \"caller\" : null , \"cognitoAuthenticationProvider\" : null , \"cognitoAuthenticationType\" : null , \"cognitoIdentityId\" : null , \"cognitoIdentityPoolId\" : null , \"principalOrgId\" : null , \"sourceIp\" : \"IP\" , \"user\" : null , \"userAgent\" : \"user-agent\" , \"userArn\" : null , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"requestId\" : \"id=\" , \"requestTime\" : \"04/Mar/2020:19:15:17 +0000\" , \"requestTimeEpoch\" : 1583349317135 , \"resourceId\" : null , \"resourcePath\" : \"/my/path\" , \"stage\" : \"$default\" }, \"pathParameters\" : null , \"stageVariables\" : null , \"body\" : \"Hello from Lambda!\" , \"isBase64Encoded\" : false }","title":"Request Stucture format 1.0"},{"location":"http-api/#response","text":"Base64 encoded response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" , \"Content-Encoding\" : \"gzip\" }, \"body\" : \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\" , \"isBase64Encoded\" : true }","title":"Response"},{"location":"http-api/#response-for-format-20","text":"Lambda function response for format 2.0 { \"cookies\" : [ \"cookie1\" , \"cookie2\" ], \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headername\" : \"headervalue\" , ... }, \"body\" : \"Hello from Lambda!\" }","title":"Response for format 2.0"},{"location":"http-api/#response-for-format-10","text":"Lambda function response for format 1.0 { \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headername\" : \"headervalue\" , ... }, \"multiValueHeaders\" : { \"headername\" : [ \"headervalue\" , \"headervalue2\" , ... ], ... }, \"body\" : \"...\" }","title":"Response for format 1.0"},{"location":"http-api/#libraries","text":"Typed Lambda handlers by Language Python - data class and parser - Pip aws-lambda-powertools Typescript - api-gateway-proxy.d.ts - NPM @types/aws-lambda Go - ApiGatewayEvent typing - Crate github.com/aws/aws-lambda-go/events DoNet - APIGatewayEvents data classes - NuGet Amazon.Lambda.APIGatewayEvents Rust - apigw/mod.rs traits - Cargo aws_lambda_events Java - APIGatewayV2HTTPEvent data classes - Maven aws-lambda-java-events PHP - typing - Composer bref/bref Event Handlers by Language AWS Lambda Powertools Python - APIGatewayHttpResolver PHP Bref for webapps Serverless Java container - has support for SpringBoot, Apache Struts, Jersey, Spark and Micronaut","title":"Libraries"},{"location":"http-api/#code-examples","text":"Example handler for API Gateway V2 (Http API), payload format v2 example on how we can handle the /hello path. from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.logging import correlation_paths from aws_lambda_powertools.event_handler import APIGatewayHttpResolver tracer = Tracer () logger = Logger () app = APIGatewayHttpResolver () @app . get ( \"/hello\" ) @tracer . capture_method def get_hello_universe (): return { \"message\" : \"hello universe\" } # You can continue to use other utilities just as before @logger . inject_lambda_context ( correlation_id_path = correlation_paths . API_GATEWAY_HTTP ) @tracer . capture_lambda_handler def lambda_handler ( event , context ): return app . resolve ( event , context )","title":"Code examples"},{"location":"http-api/#documention","text":"Working with AWS Lambda proxy integrations for HTTP APIs Using AWS Lambda with Amazon API Gateway","title":"Documention"},{"location":"iot-events/","text":"IOT Events \u00b6 Input \u00b6 { \"event: \" :{ \"eventName\" : \"myChargedEvent\" , \"eventTime\" : 1567797571647 , \"payload\" :{ \"detector\" :{ \"detectorModelName\" : \"AWS_IoTEvents_Hello_World1567793458261\" , \"detectorModelVersion\" : \"4\" , \"keyValue\" : \"100009\" }, \"eventTriggerDetails\" :{ \"triggerType\" : \"Message\" , \"inputName\" : \"AWS_IoTEvents_HelloWorld_VoltageInput\" , \"messageId\" : \"64c75a34-068b-4a1d-ae58-c16215dc4efd\" }, \"actionExecutionId\" : \"49f0f32f-1209-38a7-8a76-d6ca49dd0bc4\" , \"state\" :{ \"variables\" : {}, \"stateName\" : \"Charged\" , \"timers\" : {} } } } } Response \u00b6 { \"Statement\" : \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iotevents.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\" } Libraries \u00b6 Reference Docs \u00b6 Using AWS Lambda with AWS IoT Events","title":"IOT Events"},{"location":"iot-events/#iot-events","text":"","title":"IOT Events"},{"location":"iot-events/#input","text":"{ \"event: \" :{ \"eventName\" : \"myChargedEvent\" , \"eventTime\" : 1567797571647 , \"payload\" :{ \"detector\" :{ \"detectorModelName\" : \"AWS_IoTEvents_Hello_World1567793458261\" , \"detectorModelVersion\" : \"4\" , \"keyValue\" : \"100009\" }, \"eventTriggerDetails\" :{ \"triggerType\" : \"Message\" , \"inputName\" : \"AWS_IoTEvents_HelloWorld_VoltageInput\" , \"messageId\" : \"64c75a34-068b-4a1d-ae58-c16215dc4efd\" }, \"actionExecutionId\" : \"49f0f32f-1209-38a7-8a76-d6ca49dd0bc4\" , \"state\" :{ \"variables\" : {}, \"stateName\" : \"Charged\" , \"timers\" : {} } } } }","title":"Input"},{"location":"iot-events/#response","text":"{ \"Statement\" : \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iotevents.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\" }","title":"Response"},{"location":"iot-events/#libraries","text":"","title":"Libraries"},{"location":"iot-events/#reference-docs","text":"Using AWS Lambda with AWS IoT Events","title":"Reference Docs"},{"location":"iot/","text":"IOT \u00b6 Input \u00b6 { \"row\" : \"10\" , \"pos\" : \"23\" , \"moisture\" : \"75\" } Response \u00b6 { \"Statement\" : \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iot.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\" } Libraries \u00b6 Reference Docs \u00b6 Using AWS Lambda with AWS IoT","title":"IOT"},{"location":"iot/#iot","text":"","title":"IOT"},{"location":"iot/#input","text":"{ \"row\" : \"10\" , \"pos\" : \"23\" , \"moisture\" : \"75\" }","title":"Input"},{"location":"iot/#response","text":"{ \"Statement\" : \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iot.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:my-function\\\"}\" }","title":"Response"},{"location":"iot/#libraries","text":"","title":"Libraries"},{"location":"iot/#reference-docs","text":"Using AWS Lambda with AWS IoT","title":"Reference Docs"},{"location":"kinesis-firehose/","text":"Kinesis Firehose \u00b6 Event-driven, synchronous invocation. Kinesis Data Firehose can invoke your Lambda function to transform incoming source data and deliver the transformed data to destinations. Input \u00b6 Example Amazon Kinesis Data Firehose message event \u00b6 { \"invocationId\" : \"invoked123\" , \"deliveryStreamArn\" : \"aws:lambda:events\" , \"region\" : \"us-west-2\" , \"records\" : [ { \"data\" : \"SGVsbG8gV29ybGQ=\" , \"recordId\" : \"record1\" , \"approximateArrivalTimestamp\" : 1510772160000 , \"kinesisRecordMetadata\" : { \"shardId\" : \"shardId-000000000000\" , \"partitionKey\" : \"4d1ad2b9-24f8-4b9d-a088-76e9947c317a\" , \"approximateArrivalTimestamp\" : \"2012-04-23T18:25:43.511Z\" , \"sequenceNumber\" : \"49546986683135544286507457936321625675700192471156785154\" , \"subsequenceNumber\" : \"\" } }, { \"data\" : \"SGVsbG8gV29ybGQ=\" , \"recordId\" : \"record2\" , \"approximateArrivalTimestamp\" : 151077216000 , \"kinesisRecordMetadata\" : { \"shardId\" : \"shardId-000000000001\" , \"partitionKey\" : \"4d1ad2b9-24f8-4b9d-a088-76e9947c318a\" , \"approximateArrivalTimestamp\" : \"2012-04-23T19:25:43.511Z\" , \"sequenceNumber\" : \"49546986683135544286507457936321625675700192471156785155\" , \"subsequenceNumber\" : \"\" } } ] } Response \u00b6 Response Fields \u00b6 recordId (String) The record ID is passed from Kinesis Data Analytics to Lambda during the invocation. The transformed record must contain the same record ID. Any mismatch between the ID of the original record and the ID of the transformed record is treated as a data preprocessing failure. result (String) The status of the data transformation of the record. The possible values are: Ok : The record was transformed successfully. Kinesis Data Analytics ingests the record for SQL processing. Dropped : The record was dropped intentionally by your processing logic. Kinesis Data Analytics drops the record from SQL processing. The data payload field is optional for a Dropped record. ProcessingFailed : The record could not be transformed. Kinesis Data Analytics considers it unsuccessfully processed by your Lambda function and writes an error to the error stream. For more information about the error stream, see Error Handling. The data payload field is optional for a ProcessingFailed record. data (String) The transformed data payload, after base64-encoding. Each data payload can contain multiple JSON documents if the application ingestion data format is JSON. Or each can contain multiple CSV rows (with a row delimiter specified in each row) if the application ingestion data format is CSV. The Kinesis Data Analytics service successfully parses and processes data with either multiple JSON documents or CSV rows within the same data payload. Response Example \u00b6 { \"records\" : [ { \"recordId\" : \"49572672223665514422805246926656954630972486059535892482\" , \"result\" : \"Ok\" , \"data\" : \"SEVMTE8gV09STEQ=\" } ] } Libraries \u00b6 DotNet - KinesisFirehoseEvent - NuGet Amazon.Lambda.KinesisFirehoseEvents Java - KinesisFirehoseEvent Code Examples \u00b6 public class Function { public KinesisFirehoseResponse FunctionHandler ( KinesisFirehoseEvent evnt , ILambdaContext context ) { context . Logger . LogLine ( $\"InvocationId: {evnt.InvocationId}\" ); context . Logger . LogLine ( $\"DeliveryStreamArn: {evnt.DeliveryStreamArn}\" ); context . Logger . LogLine ( $\"Region: {evnt.Region}\" ); var response = new KinesisFirehoseResponse { Records = new List < KinesisFirehoseResponse . FirehoseRecord >() }; foreach ( var record in evnt . Records ) { context . Logger . LogLine ( $\"\\tRecordId: {record.RecordId}\" ); context . Logger . LogLine ( $\"\\t\\tApproximateArrivalEpoch: {record.ApproximateArrivalEpoch}\" ); context . Logger . LogLine ( $\"\\t\\tApproximateArrivalTimestamp: {record.ApproximateArrivalTimestamp}\" ); context . Logger . LogLine ( $\"\\t\\tData: {record.DecodeData()}\" ); // Transform data: For example ToUpper the data var transformedRecord = new KinesisFirehoseResponse . FirehoseRecord { RecordId = record . RecordId , Result = KinesisFirehoseResponse . TRANSFORMED_STATE_OK }; transformedRecord . EncodeData ( record . DecodeData (). ToUpperInvariant ()); response . Records . Add ( transformedRecord ); } return response ; } } Reference Docs \u00b6 Using AWS Lambda with Amazon Kinesis Data Firehose Preprocessing Data Using a Lambda Function Amazon Kinesis Firehose Data Transformation with AWS Lambda","title":"Kinesis Firehose"},{"location":"kinesis-firehose/#kinesis-firehose","text":"Event-driven, synchronous invocation. Kinesis Data Firehose can invoke your Lambda function to transform incoming source data and deliver the transformed data to destinations.","title":"Kinesis Firehose"},{"location":"kinesis-firehose/#input","text":"","title":"Input"},{"location":"kinesis-firehose/#example-amazon-kinesis-data-firehose-message-event","text":"{ \"invocationId\" : \"invoked123\" , \"deliveryStreamArn\" : \"aws:lambda:events\" , \"region\" : \"us-west-2\" , \"records\" : [ { \"data\" : \"SGVsbG8gV29ybGQ=\" , \"recordId\" : \"record1\" , \"approximateArrivalTimestamp\" : 1510772160000 , \"kinesisRecordMetadata\" : { \"shardId\" : \"shardId-000000000000\" , \"partitionKey\" : \"4d1ad2b9-24f8-4b9d-a088-76e9947c317a\" , \"approximateArrivalTimestamp\" : \"2012-04-23T18:25:43.511Z\" , \"sequenceNumber\" : \"49546986683135544286507457936321625675700192471156785154\" , \"subsequenceNumber\" : \"\" } }, { \"data\" : \"SGVsbG8gV29ybGQ=\" , \"recordId\" : \"record2\" , \"approximateArrivalTimestamp\" : 151077216000 , \"kinesisRecordMetadata\" : { \"shardId\" : \"shardId-000000000001\" , \"partitionKey\" : \"4d1ad2b9-24f8-4b9d-a088-76e9947c318a\" , \"approximateArrivalTimestamp\" : \"2012-04-23T19:25:43.511Z\" , \"sequenceNumber\" : \"49546986683135544286507457936321625675700192471156785155\" , \"subsequenceNumber\" : \"\" } } ] }","title":"Example Amazon Kinesis Data Firehose message event"},{"location":"kinesis-firehose/#response","text":"","title":"Response"},{"location":"kinesis-firehose/#response-fields","text":"recordId (String) The record ID is passed from Kinesis Data Analytics to Lambda during the invocation. The transformed record must contain the same record ID. Any mismatch between the ID of the original record and the ID of the transformed record is treated as a data preprocessing failure. result (String) The status of the data transformation of the record. The possible values are: Ok : The record was transformed successfully. Kinesis Data Analytics ingests the record for SQL processing. Dropped : The record was dropped intentionally by your processing logic. Kinesis Data Analytics drops the record from SQL processing. The data payload field is optional for a Dropped record. ProcessingFailed : The record could not be transformed. Kinesis Data Analytics considers it unsuccessfully processed by your Lambda function and writes an error to the error stream. For more information about the error stream, see Error Handling. The data payload field is optional for a ProcessingFailed record. data (String) The transformed data payload, after base64-encoding. Each data payload can contain multiple JSON documents if the application ingestion data format is JSON. Or each can contain multiple CSV rows (with a row delimiter specified in each row) if the application ingestion data format is CSV. The Kinesis Data Analytics service successfully parses and processes data with either multiple JSON documents or CSV rows within the same data payload.","title":"Response Fields"},{"location":"kinesis-firehose/#response-example","text":"{ \"records\" : [ { \"recordId\" : \"49572672223665514422805246926656954630972486059535892482\" , \"result\" : \"Ok\" , \"data\" : \"SEVMTE8gV09STEQ=\" } ] }","title":"Response Example"},{"location":"kinesis-firehose/#libraries","text":"DotNet - KinesisFirehoseEvent - NuGet Amazon.Lambda.KinesisFirehoseEvents Java - KinesisFirehoseEvent","title":"Libraries"},{"location":"kinesis-firehose/#code-examples","text":"public class Function { public KinesisFirehoseResponse FunctionHandler ( KinesisFirehoseEvent evnt , ILambdaContext context ) { context . Logger . LogLine ( $\"InvocationId: {evnt.InvocationId}\" ); context . Logger . LogLine ( $\"DeliveryStreamArn: {evnt.DeliveryStreamArn}\" ); context . Logger . LogLine ( $\"Region: {evnt.Region}\" ); var response = new KinesisFirehoseResponse { Records = new List < KinesisFirehoseResponse . FirehoseRecord >() }; foreach ( var record in evnt . Records ) { context . Logger . LogLine ( $\"\\tRecordId: {record.RecordId}\" ); context . Logger . LogLine ( $\"\\t\\tApproximateArrivalEpoch: {record.ApproximateArrivalEpoch}\" ); context . Logger . LogLine ( $\"\\t\\tApproximateArrivalTimestamp: {record.ApproximateArrivalTimestamp}\" ); context . Logger . LogLine ( $\"\\t\\tData: {record.DecodeData()}\" ); // Transform data: For example ToUpper the data var transformedRecord = new KinesisFirehoseResponse . FirehoseRecord { RecordId = record . RecordId , Result = KinesisFirehoseResponse . TRANSFORMED_STATE_OK }; transformedRecord . EncodeData ( record . DecodeData (). ToUpperInvariant ()); response . Records . Add ( transformedRecord ); } return response ; } }","title":"Code Examples"},{"location":"kinesis-firehose/#reference-docs","text":"Using AWS Lambda with Amazon Kinesis Data Firehose Preprocessing Data Using a Lambda Function Amazon Kinesis Firehose Data Transformation with AWS Lambda","title":"Reference Docs"},{"location":"kinesis-streams/","text":"Kinesis Streams \u00b6 Lambda reads records from the data stream and invokes your function synchronously with an event that contains stream records. Input \u00b6 Input fields \u00b6 Records - An array of records. awsRegion (String) AWS region where the event originated eg: us-east-1 eventID (String) A globally unique identifier for the event that was recorded in this stream record. eventName (String) Event type eg: aws:kinesis:record eventSource (String) The AWS service from which the Kinesis event originated. For Kinesis, this is aws:kinesis eventSourceARN (String) The Amazon Resource Name (ARN) of the event source eventVersion (String) The eventVersion key value contains a major and minor version in the form . . invokeIdentityArn (String) The ARN for the identity used to invoke the Lambda Function kinesis (Object) Kinesis payload approximateArrivalTimestamp (Number) - The approximate time that the record was inserted into the stream data (String) - The data contained in the record kinesisSchemaVersion (String) - The version of the Kinesis data record format partitionKey (String) - The partition key of the record sequenceNumber (String) - The sequence number of the record Example Kinesis record event \u00b6 { \"Records\" : [ { \"kinesis\" : { \"kinesisSchemaVersion\" : \"1.0\" , \"partitionKey\" : \"1\" , \"sequenceNumber\" : \"49590338271490256608559692538361571095921575989136588898\" , \"data\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"approximateArrivalTimestamp\" : 1545084650.987 }, \"eventSource\" : \"aws:kinesis\" , \"eventVersion\" : \"1.0\" , \"eventID\" : \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\" , \"eventName\" : \"aws:kinesis:record\" , \"invokeIdentityArn\" : \"arn:aws:iam::123456789012:role/lambda-role\" , \"awsRegion\" : \"us-east-2\" , \"eventSourceARN\" : \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\" }, { \"kinesis\" : { \"kinesisSchemaVersion\" : \"1.0\" , \"partitionKey\" : \"1\" , \"sequenceNumber\" : \"49590338271490256608559692540925702759324208523137515618\" , \"data\" : \"VGhpcyBpcyBvbmx5IGEgdGVzdC4=\" , \"approximateArrivalTimestamp\" : 1545084711.166 }, \"eventSource\" : \"aws:kinesis\" , \"eventVersion\" : \"1.0\" , \"eventID\" : \"shardId-000000000006:49590338271490256608559692540925702759324208523137515618\" , \"eventName\" : \"aws:kinesis:record\" , \"invokeIdentityArn\" : \"arn:aws:iam::123456789012:role/lambda-role\" , \"awsRegion\" : \"us-east-2\" , \"eventSourceARN\" : \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\" } ] } Response \u00b6 Reporting batch item failures { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"<id>\" } ] } Libraries \u00b6 Typing by language PHP - KinesisEvent - Composer bref/bref Python - KinesisEvent - Pip aws-lambda-powertools Rust - KinesisEvent - Cargo aws-lambda-events Java - KinesisEvent - Maven aws-lambda-java-events Typescript - KinesisEvent - NPM @types/aws-lambda Go - KinesisEvent - github.com/aws/aws-lambda-go/events Handlers by language Python - BatchProcessor - Pip aws-lambda-powertools Ruby - kinesis_event - GEM jets Python - on_kinesis_record - Pip chalice Reference Docs \u00b6 Using AWS Lambda with Amazon Kinesis","title":"Kinesis Streams"},{"location":"kinesis-streams/#kinesis-streams","text":"Lambda reads records from the data stream and invokes your function synchronously with an event that contains stream records.","title":"Kinesis Streams"},{"location":"kinesis-streams/#input","text":"","title":"Input"},{"location":"kinesis-streams/#input-fields","text":"Records - An array of records. awsRegion (String) AWS region where the event originated eg: us-east-1 eventID (String) A globally unique identifier for the event that was recorded in this stream record. eventName (String) Event type eg: aws:kinesis:record eventSource (String) The AWS service from which the Kinesis event originated. For Kinesis, this is aws:kinesis eventSourceARN (String) The Amazon Resource Name (ARN) of the event source eventVersion (String) The eventVersion key value contains a major and minor version in the form . . invokeIdentityArn (String) The ARN for the identity used to invoke the Lambda Function kinesis (Object) Kinesis payload approximateArrivalTimestamp (Number) - The approximate time that the record was inserted into the stream data (String) - The data contained in the record kinesisSchemaVersion (String) - The version of the Kinesis data record format partitionKey (String) - The partition key of the record sequenceNumber (String) - The sequence number of the record","title":"Input fields"},{"location":"kinesis-streams/#example-kinesis-record-event","text":"{ \"Records\" : [ { \"kinesis\" : { \"kinesisSchemaVersion\" : \"1.0\" , \"partitionKey\" : \"1\" , \"sequenceNumber\" : \"49590338271490256608559692538361571095921575989136588898\" , \"data\" : \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\" , \"approximateArrivalTimestamp\" : 1545084650.987 }, \"eventSource\" : \"aws:kinesis\" , \"eventVersion\" : \"1.0\" , \"eventID\" : \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\" , \"eventName\" : \"aws:kinesis:record\" , \"invokeIdentityArn\" : \"arn:aws:iam::123456789012:role/lambda-role\" , \"awsRegion\" : \"us-east-2\" , \"eventSourceARN\" : \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\" }, { \"kinesis\" : { \"kinesisSchemaVersion\" : \"1.0\" , \"partitionKey\" : \"1\" , \"sequenceNumber\" : \"49590338271490256608559692540925702759324208523137515618\" , \"data\" : \"VGhpcyBpcyBvbmx5IGEgdGVzdC4=\" , \"approximateArrivalTimestamp\" : 1545084711.166 }, \"eventSource\" : \"aws:kinesis\" , \"eventVersion\" : \"1.0\" , \"eventID\" : \"shardId-000000000006:49590338271490256608559692540925702759324208523137515618\" , \"eventName\" : \"aws:kinesis:record\" , \"invokeIdentityArn\" : \"arn:aws:iam::123456789012:role/lambda-role\" , \"awsRegion\" : \"us-east-2\" , \"eventSourceARN\" : \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\" } ] }","title":"Example Kinesis record event"},{"location":"kinesis-streams/#response","text":"Reporting batch item failures { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"<id>\" } ] }","title":"Response"},{"location":"kinesis-streams/#libraries","text":"Typing by language PHP - KinesisEvent - Composer bref/bref Python - KinesisEvent - Pip aws-lambda-powertools Rust - KinesisEvent - Cargo aws-lambda-events Java - KinesisEvent - Maven aws-lambda-java-events Typescript - KinesisEvent - NPM @types/aws-lambda Go - KinesisEvent - github.com/aws/aws-lambda-go/events Handlers by language Python - BatchProcessor - Pip aws-lambda-powertools Ruby - kinesis_event - GEM jets Python - on_kinesis_record - Pip chalice","title":"Libraries"},{"location":"kinesis-streams/#reference-docs","text":"Using AWS Lambda with Amazon Kinesis","title":"Reference Docs"},{"location":"lambda-context/","text":"Lambda Context \u00b6 When Lambda runs your function, it passes a context object to the handler. This object provides methods and properties that provide information about the invocation, function, and execution environment. Docs \u00b6 DotNet - Lambda Context Docs Python - Lambda Context Docs Go - Lambda Context Docs Java - Lambda Context Docs NodeJS - Lambda Context Docs Libraries \u00b6 DotNet - ILambdaContext - NuGet Amazon.Lambda.Core Java - Context - Maven aws-lambda-java-core Python - LambdaContext - Pip aws-lambda-powertools Typescript - Context - NPM @types/aws-lambda Rust - Context - Cargo aws-lambda-rust-runtime Php - Bref\\Context - Composer bref/bref","title":"Lambda Context"},{"location":"lambda-context/#lambda-context","text":"When Lambda runs your function, it passes a context object to the handler. This object provides methods and properties that provide information about the invocation, function, and execution environment.","title":"Lambda Context"},{"location":"lambda-context/#docs","text":"DotNet - Lambda Context Docs Python - Lambda Context Docs Go - Lambda Context Docs Java - Lambda Context Docs NodeJS - Lambda Context Docs","title":"Docs"},{"location":"lambda-context/#libraries","text":"DotNet - ILambdaContext - NuGet Amazon.Lambda.Core Java - Context - Maven aws-lambda-java-core Python - LambdaContext - Pip aws-lambda-powertools Typescript - Context - NPM @types/aws-lambda Rust - Context - Cargo aws-lambda-rust-runtime Php - Bref\\Context - Composer bref/bref","title":"Libraries"},{"location":"lambda-runtimes/","text":"Lambda Language Resources \u00b6 List of general resources that could be used with all AWS Lambda by language. Python - AWS Lambda Powertools Java - AWS Lambda Powertools Bref - Php - php runtime and libraries Typescript - AWS Lambda Powertools Typescript - @types/aws-lambda - NPM @types/aws-lambda Rust - aws-lambda-rust-runtime - runtime and framework and will soon include aws_lambda_events Rust - aws_lambda_events - structs for most lambda events Ruby - Jets - Ruby Serverless Framework","title":"Lambda Language Resources"},{"location":"lambda-runtimes/#lambda-language-resources","text":"List of general resources that could be used with all AWS Lambda by language. Python - AWS Lambda Powertools Java - AWS Lambda Powertools Bref - Php - php runtime and libraries Typescript - AWS Lambda Powertools Typescript - @types/aws-lambda - NPM @types/aws-lambda Rust - aws-lambda-rust-runtime - runtime and framework and will soon include aws_lambda_events Rust - aws_lambda_events - structs for most lambda events Ruby - Jets - Ruby Serverless Framework","title":"Lambda Language Resources"},{"location":"lex-v2/","text":"Amazon Lex V2 \u00b6 Event-driven, synchronous invocation. Amazon Lex V2 uses one Lambda function per bot alias per language instead of one Lambda function for each intent. To use an individual function for each intent, the Lambda function router section provides a function that you can use. Input \u00b6 Lex V2 input schema \u00b6 Event fields notes: invocationSource Indicates the action that called the Lambda function. When the source is DialogCodeHook, the Lambda function was called after input from the user.When the source is FulfillmentCodeHook the Lambda function was called after all required slots have been filled and the intent is ready for fulfillment. inputTranscript : The text that was used to process the input from the user. For text or DTMF input, this is the text that the user typed. For speech input, this is the text that was recognized from the speech. interpretations One or more intents that Amazon Lex V2 considers possible matches to the user's utterance. For more information, see Interpretation. proposedNextState The next state of the dialog between the user and the bot if the Lambda function doesn't change the flow. For more information, see proposedNextState structure. requestAttributes Request-specific attributes that the client sends in the request. Use request attributes to pass information that doesn't need to persist for the entire session. sessionState The current state of the conversation between the user and your Amazon Lex V2 bot. For more information about the session state, see SessionState. transcriptions one or more transcriptions that Amazon Lex V2 considers possible matches to the user's audio utterance. For more information, see Using voice transcription confidence scores. Lex V2 schema { \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"DialogCodeHook | FulfillmentCodeHook\" , \"inputMode\" : \"DTMF | Speech | Text\" , \"responseContentType\" : \"CustomPayload | ImageResponseCard | PlainText | SSML\" , \"sessionId\" : \"string\" , \"inputTranscript\" : \"string\" , \"bot\" : { \"id\" : \"string\" , \"name\" : \"string\" , \"aliasId\" : \"string\" , \"localeId\" : \"string\" , \"version\" : \"string\" }, \"interpretations\" : [ { \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" , \"kendraResponse\" : { // O nl y prese nt whe n i ntent is Ke n draSearchI ntent . For de ta ils , see // h tt ps : //docs.aws.amazo n .com/ke n dra/la test /dg/API_Query.h t ml#API_Query_Respo nse Sy nta x } }, \"nluConfidence\" : { \"score\" : nu mber }, \"sentimentResponse\" : { \"sentiment\" : \"string\" , \"sentimentScore\" : { \"mixed\" : nu mber , \"negative\" : nu mber , \"neutral\" : nu mber , \"positive\" : nu mber } } } ], \"proposedNextState\" : { \"dialogAction\" : { \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"name\" : \"string\" , \"confirmationState\" : \"Confirmed | Denied | None\" , \"slots\" : {}, \"state\" : \"Failed | Fulfilled | InProgress | ReadyForFulfillment | Waiting\" } }, \"requestAttributes\" : { \"string\" : \"string\" }, \"sessionState\" : { \"activeContexts\" : [ { \"name\" : \"string\" , \"contextAttributes\" : { \"string\" : \"string\" }, \"timeToLive\" : { \"timeToLiveInSeconds\" : nu mber , \"turnsToLive\" : nu mber } } ], \"sessionAttributes\" : { \"string\" : \"string\" }, \"runtimeHints\" : { \"slotHints\" : { \"string\" : { \"string\" : { \"runtimeHintValues\" : [ { \"phrase\" : \"string\" }, { \"phrase\" : \"string\" } ] } } } }, \"dialogAction\" : { \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" , \"kendraResponse\" : { // O nl y prese nt whe n i ntent is Ke n draSearchI ntent . For de ta ils , see // h tt ps : //docs.aws.amazo n .com/ke n dra/la test /dg/API_Query.h t ml#API_Query_Respo nse Sy nta x } }, \"originatingRequestId\" : \"string\" } }, \"transcriptions\" : [ { \"transcription\" : \"string\" , \"transcriptionConfidence\" : { \"score\" : \"number\" }, \"resolvedContext\" : { \"intent\" : \"string\" }, \"resolvedSlots\" : { \"string\" : { \"shape\" : \"List\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } } } ] } Lex V2 example requests \u00b6 Banking bot: CheckBalance { \"sessionId\" : \"254688924456798\" , \"inputTranscript\" : \"01/01/1990\" , \"interpretations\" : [ { \"intent\" : { \"slots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ], \"interpretedValue\" : \"1990-01-01\" } }, \"accountType\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"savings\" , \"resolvedValues\" : [ \"Savings\" ], \"interpretedValue\" : \"Savings\" } } }, \"confirmationState\" : \"None\" , \"name\" : \"CheckBalance\" , \"state\" : \"ReadyForFulfillment\" }, \"nluConfidence\" : 1 }, { \"intent\" : { \"slots\" : {}, \"confirmationState\" : \"None\" , \"name\" : \"FallbackIntent\" , \"state\" : \"ReadyForFulfillment\" } }, { \"intent\" : { \"slots\" : {}, \"confirmationState\" : \"None\" , \"name\" : \"Welcome\" , \"state\" : \"ReadyForFulfillment\" }, \"nluConfidence\" : 0.23 } ], \"responseContentType\" : \"text/plain; charset=utf-8\" , \"sessionState\" : { \"sessionAttributes\" : {}, \"activeContexts\" : [], \"intent\" : { \"slots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ], \"interpretedValue\" : \"1990-01-01\" } }, \"accountType\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"savings\" , \"resolvedValues\" : [ \"Savings\" ], \"interpretedValue\" : \"Savings\" } } }, \"confirmationState\" : \"None\" , \"name\" : \"CheckBalance\" , \"state\" : \"ReadyForFulfillment\" }, \"originatingRequestId\" : \"f57dfc3f-44be-4df9-ae72-9681fc14e67f\" }, \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"FulfillmentCodeHook\" , \"transcriptions\" : [ { \"transcription\" : \"01/01/1990\" , \"transcriptionConfidence\" : 1 , \"resolvedSlots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ] } } }, \"resolvedContext\" : { \"intent\" : \"CheckBalance\" } } ], \"inputMode\" : \"Text\" , \"bot\" : { \"aliasName\" : \"TestBotAlias\" , \"aliasId\" : \"TSTALIASID\" , \"name\" : \"BankingBot\" , \"version\" : \"DRAFT\" , \"localeId\" : \"en_US\" , \"id\" : \"J866BA0UQC\" } } Generating sample events via SAM CLI \u00b6 # Github PR (https://github.com/aws/aws-sam-cli/pull/3649) Response \u00b6 Lex V2 response schema \u00b6 Lex V2 response schema { \"sessionState\" : { \"activeContexts\" : [ { \"name\" : \"string\" , \"contextAttributes\" : { \"key\" : \"value\" }, \"timeToLive\" : { \"timeToLiveInSeconds\" : nu mber , \"turnsToLive\" : nu mber } } ], \"sessionAttributes\" : { \"string\" : \"string\" }, \"runtimeHints\" : { \"slotHints\" : { \"string\" : { \"string\" : { \"runtimeHintValues\" : [ { \"phrase\" : \"string\" }, { \"phrase\" : \"string\" } ] } } } }, \"dialogAction\" : { \"slotElicitationStyle\" : \"Default | SpellByLetter | SpellByWord\" , \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" } }, \"messages\" : [ { \"contentType\" : \"CustomPayload | ImageResponseCard | PlainText | SSML\" , \"content\" : \"string\" , \"imageResponseCard\" : { \"title\" : \"string\" , \"subtitle\" : \"string\" , \"imageUrl\" : \"string\" , \"buttons\" : [ { \"text\" : \"string\" , \"value\" : \"string\" } ] } } ], \"requestAttributes\" : { \"string\" : \"string\" } } Libraries \u00b6 AWS Solution using Lex V2 A Question and Answer Bot Using Amazon Lex and Amazon Alexa Typed Lambda handlers by Language Typescript - LexV2Event - NPM package @types/aws-lambda Reference Docs \u00b6 Using AWS Lambda with Amazon Lex V2 Creating a BankingBot on Amazon Lex V2 Console with support for English and Spanish Hands On: Create a BankingBot with support for English and Spanish on the Amazon Lex V2 console","title":"Amazon Lex V2"},{"location":"lex-v2/#amazon-lex-v2","text":"Event-driven, synchronous invocation. Amazon Lex V2 uses one Lambda function per bot alias per language instead of one Lambda function for each intent. To use an individual function for each intent, the Lambda function router section provides a function that you can use.","title":"Amazon Lex V2"},{"location":"lex-v2/#input","text":"","title":"Input"},{"location":"lex-v2/#lex-v2-input-schema","text":"Event fields notes: invocationSource Indicates the action that called the Lambda function. When the source is DialogCodeHook, the Lambda function was called after input from the user.When the source is FulfillmentCodeHook the Lambda function was called after all required slots have been filled and the intent is ready for fulfillment. inputTranscript : The text that was used to process the input from the user. For text or DTMF input, this is the text that the user typed. For speech input, this is the text that was recognized from the speech. interpretations One or more intents that Amazon Lex V2 considers possible matches to the user's utterance. For more information, see Interpretation. proposedNextState The next state of the dialog between the user and the bot if the Lambda function doesn't change the flow. For more information, see proposedNextState structure. requestAttributes Request-specific attributes that the client sends in the request. Use request attributes to pass information that doesn't need to persist for the entire session. sessionState The current state of the conversation between the user and your Amazon Lex V2 bot. For more information about the session state, see SessionState. transcriptions one or more transcriptions that Amazon Lex V2 considers possible matches to the user's audio utterance. For more information, see Using voice transcription confidence scores. Lex V2 schema { \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"DialogCodeHook | FulfillmentCodeHook\" , \"inputMode\" : \"DTMF | Speech | Text\" , \"responseContentType\" : \"CustomPayload | ImageResponseCard | PlainText | SSML\" , \"sessionId\" : \"string\" , \"inputTranscript\" : \"string\" , \"bot\" : { \"id\" : \"string\" , \"name\" : \"string\" , \"aliasId\" : \"string\" , \"localeId\" : \"string\" , \"version\" : \"string\" }, \"interpretations\" : [ { \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" , \"kendraResponse\" : { // O nl y prese nt whe n i ntent is Ke n draSearchI ntent . For de ta ils , see // h tt ps : //docs.aws.amazo n .com/ke n dra/la test /dg/API_Query.h t ml#API_Query_Respo nse Sy nta x } }, \"nluConfidence\" : { \"score\" : nu mber }, \"sentimentResponse\" : { \"sentiment\" : \"string\" , \"sentimentScore\" : { \"mixed\" : nu mber , \"negative\" : nu mber , \"neutral\" : nu mber , \"positive\" : nu mber } } } ], \"proposedNextState\" : { \"dialogAction\" : { \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"name\" : \"string\" , \"confirmationState\" : \"Confirmed | Denied | None\" , \"slots\" : {}, \"state\" : \"Failed | Fulfilled | InProgress | ReadyForFulfillment | Waiting\" } }, \"requestAttributes\" : { \"string\" : \"string\" }, \"sessionState\" : { \"activeContexts\" : [ { \"name\" : \"string\" , \"contextAttributes\" : { \"string\" : \"string\" }, \"timeToLive\" : { \"timeToLiveInSeconds\" : nu mber , \"turnsToLive\" : nu mber } } ], \"sessionAttributes\" : { \"string\" : \"string\" }, \"runtimeHints\" : { \"slotHints\" : { \"string\" : { \"string\" : { \"runtimeHintValues\" : [ { \"phrase\" : \"string\" }, { \"phrase\" : \"string\" } ] } } } }, \"dialogAction\" : { \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" , \"kendraResponse\" : { // O nl y prese nt whe n i ntent is Ke n draSearchI ntent . For de ta ils , see // h tt ps : //docs.aws.amazo n .com/ke n dra/la test /dg/API_Query.h t ml#API_Query_Respo nse Sy nta x } }, \"originatingRequestId\" : \"string\" } }, \"transcriptions\" : [ { \"transcription\" : \"string\" , \"transcriptionConfidence\" : { \"score\" : \"number\" }, \"resolvedContext\" : { \"intent\" : \"string\" }, \"resolvedSlots\" : { \"string\" : { \"shape\" : \"List\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } } } ] }","title":"Lex V2 input schema"},{"location":"lex-v2/#lex-v2-example-requests","text":"Banking bot: CheckBalance { \"sessionId\" : \"254688924456798\" , \"inputTranscript\" : \"01/01/1990\" , \"interpretations\" : [ { \"intent\" : { \"slots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ], \"interpretedValue\" : \"1990-01-01\" } }, \"accountType\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"savings\" , \"resolvedValues\" : [ \"Savings\" ], \"interpretedValue\" : \"Savings\" } } }, \"confirmationState\" : \"None\" , \"name\" : \"CheckBalance\" , \"state\" : \"ReadyForFulfillment\" }, \"nluConfidence\" : 1 }, { \"intent\" : { \"slots\" : {}, \"confirmationState\" : \"None\" , \"name\" : \"FallbackIntent\" , \"state\" : \"ReadyForFulfillment\" } }, { \"intent\" : { \"slots\" : {}, \"confirmationState\" : \"None\" , \"name\" : \"Welcome\" , \"state\" : \"ReadyForFulfillment\" }, \"nluConfidence\" : 0.23 } ], \"responseContentType\" : \"text/plain; charset=utf-8\" , \"sessionState\" : { \"sessionAttributes\" : {}, \"activeContexts\" : [], \"intent\" : { \"slots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ], \"interpretedValue\" : \"1990-01-01\" } }, \"accountType\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"savings\" , \"resolvedValues\" : [ \"Savings\" ], \"interpretedValue\" : \"Savings\" } } }, \"confirmationState\" : \"None\" , \"name\" : \"CheckBalance\" , \"state\" : \"ReadyForFulfillment\" }, \"originatingRequestId\" : \"f57dfc3f-44be-4df9-ae72-9681fc14e67f\" }, \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"FulfillmentCodeHook\" , \"transcriptions\" : [ { \"transcription\" : \"01/01/1990\" , \"transcriptionConfidence\" : 1 , \"resolvedSlots\" : { \"dateofBirth\" : { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"01/01/1990\" , \"resolvedValues\" : [ \"1990-01-01\" ] } } }, \"resolvedContext\" : { \"intent\" : \"CheckBalance\" } } ], \"inputMode\" : \"Text\" , \"bot\" : { \"aliasName\" : \"TestBotAlias\" , \"aliasId\" : \"TSTALIASID\" , \"name\" : \"BankingBot\" , \"version\" : \"DRAFT\" , \"localeId\" : \"en_US\" , \"id\" : \"J866BA0UQC\" } }","title":"Lex V2 example requests"},{"location":"lex-v2/#generating-sample-events-via-sam-cli","text":"# Github PR (https://github.com/aws/aws-sam-cli/pull/3649)","title":"Generating sample events via SAM CLI"},{"location":"lex-v2/#response","text":"","title":"Response"},{"location":"lex-v2/#lex-v2-response-schema","text":"Lex V2 response schema { \"sessionState\" : { \"activeContexts\" : [ { \"name\" : \"string\" , \"contextAttributes\" : { \"key\" : \"value\" }, \"timeToLive\" : { \"timeToLiveInSeconds\" : nu mber , \"turnsToLive\" : nu mber } } ], \"sessionAttributes\" : { \"string\" : \"string\" }, \"runtimeHints\" : { \"slotHints\" : { \"string\" : { \"string\" : { \"runtimeHintValues\" : [ { \"phrase\" : \"string\" }, { \"phrase\" : \"string\" } ] } } } }, \"dialogAction\" : { \"slotElicitationStyle\" : \"Default | SpellByLetter | SpellByWord\" , \"slotToElicit\" : \"string\" , \"type\" : \"Close | ConfirmIntent | Delegate | ElicitIntent | ElicitSlot\" }, \"intent\" : { \"confirmationState\" : \"Confirmed | Denied | None\" , \"name\" : \"string\" , \"slots\" : { \"string\" : { \"value\" : { \"interpretedValue\" : \"string\" , \"originalValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, \"string\" : { \"shape\" : \"List\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] }, \"values\" : [ { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } }, { \"shape\" : \"Scalar\" , \"value\" : { \"originalValue\" : \"string\" , \"interpretedValue\" : \"string\" , \"resolvedValues\" : [ \"string\" ] } } ] } }, \"state\" : \"Failed | Fulfilled | FulfillmentInProgress | InProgress | ReadyForFulfillment | Waiting\" } }, \"messages\" : [ { \"contentType\" : \"CustomPayload | ImageResponseCard | PlainText | SSML\" , \"content\" : \"string\" , \"imageResponseCard\" : { \"title\" : \"string\" , \"subtitle\" : \"string\" , \"imageUrl\" : \"string\" , \"buttons\" : [ { \"text\" : \"string\" , \"value\" : \"string\" } ] } } ], \"requestAttributes\" : { \"string\" : \"string\" } }","title":"Lex V2 response schema"},{"location":"lex-v2/#libraries","text":"AWS Solution using Lex V2 A Question and Answer Bot Using Amazon Lex and Amazon Alexa Typed Lambda handlers by Language Typescript - LexV2Event - NPM package @types/aws-lambda","title":"Libraries"},{"location":"lex-v2/#reference-docs","text":"Using AWS Lambda with Amazon Lex V2 Creating a BankingBot on Amazon Lex V2 Console with support for English and Spanish Hands On: Create a BankingBot with support for English and Spanish on the Amazon Lex V2 console","title":"Reference Docs"},{"location":"lex/","text":"Amazon Lex \u00b6 The Amazon Lex bot invokes your Lambda function synchronously. Input \u00b6 Generating sample events via SAM CLI \u00b6 sam local generate-event lex book-car sam local generate-event lex book-hotel sam local generate-event lex make-appointment sam local generate-event lex order-flowers Input Event structure \u00b6 { \"currentIntent\" : { \"name\" : \"intent-name\" , \"nluIntentConfidenceScore\" : score , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"slotDetails\" : { \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" }, \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" } }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" }, \"alternativeIntents\" : [ { \"name\" : \"intent-name\" , \"nluIntentConfidenceScore\" : score , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"slotDetails\" : { \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" }, \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" } }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" } ], \"bot\" : { \"name\" : \"bot name\" , \"alias\" : \"bot alias\" , \"version\" : \"bot version\" }, \"userId\" : \"User ID specified in the POST request to Amazon Lex.\" , \"inputTranscript\" : \"Text used to process the request\" , \"invocationSource\" : \"FulfillmentCodeHook or DialogCodeHook\" , \"outputDialogMode\" : \"Text or Voice, based on ContentType request header in runtime API request\" , \"messageVersion\" : \"1.0\" , \"sessionAttributes\" : { \"key\" : \"value\" , \"key\" : \"value\" }, \"requestAttributes\" : { \"key\" : \"value\" , \"key\" : \"value\" }, \"recentIntentSummaryView\" : [ { \"intentName\" : \"Name\" , \"checkpointLabel\" : Label , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" , \"dialogActionType\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , \"fulfillmentState\" : \"Fulfilled or Failed\" , \"slotToElicit\" : \"Next slot to elicit\" } ], \"sentimentResponse\" : { \"sentimentLabel\" : \"sentiment\" , \"sentimentScore\" : \"score\" }, \"kendraResponse\" : { Comple te query respo nse fr om Amazo n Ke n dra }, \"activeContexts\" : [ { \"timeToLive\" : { \"timeToLiveInSeconds\" : seco n ds , \"turnsToLive\" : turns }, \"name\" : \"name\" , \"parameters\" : { \"key name\" : \"value\" } } ] } Example event \u00b6 Example order flowers { \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"FulfillmentCodeHook\" , \"userId\" : \"ABCD1234\" , \"sessionAttributes\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" , }, \"bot\" : { \"name\" : \"OrderFlowers\" , \"alias\" : \"prod\" , \"version\" : \"1\" }, \"outputDialogMode\" : \"Text\" , \"currentIntent\" : { \"name\" : \"OrderFlowers\" , \"slots\" : { \"FlowerType\" : \"lilies\" , \"PickupDate\" : \"2030-11-08\" , \"PickupTime\" : \"10:00\" }, \"confirmationStatus\" : \"Confirmed\" } } Response \u00b6 Response Event structure \u00b6 Event Structure { \"sessionAttributes\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" ... }, \"recentIntentSummaryView\" : [ { \"intentName\" : \"Name\" , \"checkpointLabel\" : \"Label\" , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" , \"dialogActionType\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , \"fulfillmentState\" : \"Fulfilled or Failed\" , \"slotToElicit\" : \"Next slot to elicit\" } ], \"activeContexts\" : [ { \"timeToLive\" : { \"timeToLiveInSeconds\" : seco n ds , \"turnsToLive\" : turns }, \"name\" : \"name\" , \"parameters\" : { \"key name\" : \"value\" } } ], \"dialogAction\" : { \"type\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , Full s tru c ture based o n t he t ype f ield. See below f or de ta ils. } } Libraries \u00b6 Typescript - lex.d.ts - NPM @types/aws-lambda Reference Docs \u00b6 Using AWS Lambda with Amazon Lex Lambda Function Input Event and Response Format Create a Question and Answer Bot with Amazon Lex and Amazon Alexa - Now updated to use Lex V2","title":"Amazon Lex"},{"location":"lex/#amazon-lex","text":"The Amazon Lex bot invokes your Lambda function synchronously.","title":"Amazon Lex"},{"location":"lex/#input","text":"","title":"Input"},{"location":"lex/#generating-sample-events-via-sam-cli","text":"sam local generate-event lex book-car sam local generate-event lex book-hotel sam local generate-event lex make-appointment sam local generate-event lex order-flowers","title":"Generating sample events via SAM CLI"},{"location":"lex/#input-event-structure","text":"{ \"currentIntent\" : { \"name\" : \"intent-name\" , \"nluIntentConfidenceScore\" : score , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"slotDetails\" : { \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" }, \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" } }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" }, \"alternativeIntents\" : [ { \"name\" : \"intent-name\" , \"nluIntentConfidenceScore\" : score , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"slotDetails\" : { \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" }, \"slot name\" : { \"resolutions\" : [ { \"value\" : \"resolved value\" }, { \"value\" : \"resolved value\" } ], \"originalValue\" : \"original text\" } }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" } ], \"bot\" : { \"name\" : \"bot name\" , \"alias\" : \"bot alias\" , \"version\" : \"bot version\" }, \"userId\" : \"User ID specified in the POST request to Amazon Lex.\" , \"inputTranscript\" : \"Text used to process the request\" , \"invocationSource\" : \"FulfillmentCodeHook or DialogCodeHook\" , \"outputDialogMode\" : \"Text or Voice, based on ContentType request header in runtime API request\" , \"messageVersion\" : \"1.0\" , \"sessionAttributes\" : { \"key\" : \"value\" , \"key\" : \"value\" }, \"requestAttributes\" : { \"key\" : \"value\" , \"key\" : \"value\" }, \"recentIntentSummaryView\" : [ { \"intentName\" : \"Name\" , \"checkpointLabel\" : Label , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" , \"dialogActionType\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , \"fulfillmentState\" : \"Fulfilled or Failed\" , \"slotToElicit\" : \"Next slot to elicit\" } ], \"sentimentResponse\" : { \"sentimentLabel\" : \"sentiment\" , \"sentimentScore\" : \"score\" }, \"kendraResponse\" : { Comple te query respo nse fr om Amazo n Ke n dra }, \"activeContexts\" : [ { \"timeToLive\" : { \"timeToLiveInSeconds\" : seco n ds , \"turnsToLive\" : turns }, \"name\" : \"name\" , \"parameters\" : { \"key name\" : \"value\" } } ] }","title":"Input Event structure"},{"location":"lex/#example-event","text":"Example order flowers { \"messageVersion\" : \"1.0\" , \"invocationSource\" : \"FulfillmentCodeHook\" , \"userId\" : \"ABCD1234\" , \"sessionAttributes\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" , }, \"bot\" : { \"name\" : \"OrderFlowers\" , \"alias\" : \"prod\" , \"version\" : \"1\" }, \"outputDialogMode\" : \"Text\" , \"currentIntent\" : { \"name\" : \"OrderFlowers\" , \"slots\" : { \"FlowerType\" : \"lilies\" , \"PickupDate\" : \"2030-11-08\" , \"PickupTime\" : \"10:00\" }, \"confirmationStatus\" : \"Confirmed\" } }","title":"Example event"},{"location":"lex/#response","text":"","title":"Response"},{"location":"lex/#response-event-structure","text":"Event Structure { \"sessionAttributes\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" ... }, \"recentIntentSummaryView\" : [ { \"intentName\" : \"Name\" , \"checkpointLabel\" : \"Label\" , \"slots\" : { \"slot name\" : \"value\" , \"slot name\" : \"value\" }, \"confirmationStatus\" : \"None, Confirmed, or Denied (intent confirmation, if configured)\" , \"dialogActionType\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , \"fulfillmentState\" : \"Fulfilled or Failed\" , \"slotToElicit\" : \"Next slot to elicit\" } ], \"activeContexts\" : [ { \"timeToLive\" : { \"timeToLiveInSeconds\" : seco n ds , \"turnsToLive\" : turns }, \"name\" : \"name\" , \"parameters\" : { \"key name\" : \"value\" } } ], \"dialogAction\" : { \"type\" : \"ElicitIntent, ElicitSlot, ConfirmIntent, Delegate, or Close\" , Full s tru c ture based o n t he t ype f ield. See below f or de ta ils. } }","title":"Response Event structure"},{"location":"lex/#libraries","text":"Typescript - lex.d.ts - NPM @types/aws-lambda","title":"Libraries"},{"location":"lex/#reference-docs","text":"Using AWS Lambda with Amazon Lex Lambda Function Input Event and Response Format Create a Question and Answer Bot with Amazon Lex and Amazon Alexa - Now updated to use Lex V2","title":"Reference Docs"},{"location":"mq/","text":"Amazon MQ \u00b6 Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ, invokes the function synchronously Input \u00b6 ActiveMQ \u00b6 { \"eventSource\" : \"aws:amq\" , \"eventSourceArn\" : \"arn:aws:mq:us-west-2:112556298976:broker:test:b-9bcfa592-423a-4942-879d-eb284b418fc8\" , \"messages\" : [ { \"messageID\" : \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\" , \"messageType\" : \"jms/text-message\" , \"data\" : \"QUJDOkFBQUE=\" , \"connectionId\" : \"myJMSCoID\" , \"redelivered\" : false , \"destination\" : { \"physicalname\" : \"testQueue\" }, \"timestamp\" : 1598827811958 , \"brokerInTime\" : 1598827811958 , \"brokerOutTime\" : 1598827811959 }, { \"messageID\" : \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\" , \"messageType\" : \"jms/bytes-message\" , \"data\" : \"3DTOOW7crj51prgVLQaGQ82S48k=\" , \"connectionId\" : \"myJMSCoID1\" , \"persistent\" : false , \"destination\" : { \"physicalname\" : \"testQueue\" }, \"timestamp\" : 1598827811958 , \"brokerInTime\" : 1598827811958 , \"brokerOutTime\" : 1598827811959 } ] } RabbitMQ \u00b6 { \"eventSource\" : \"aws:rmq\" , \"eventSourceArn\" : \"arn:aws:mq:us-west-2:112556298976:broker:pizzaBroker:b-9bcfa592-423a-4942-879d-eb284b418fc8\" , \"rmqMessagesByQueue\" : { \"pizzaQueue::/\" : [ { \"basicProperties\" : { \"contentType\" : \"text/plain\" , \"contentEncoding\" : null , \"headers\" : { \"header1\" : { \"bytes\" : [ 118 , 97 , 108 , 117 , 101 , 49 ] }, \"header2\" : { \"bytes\" : [ 118 , 97 , 108 , 117 , 101 , 50 ] }, \"numberInHeader\" : 10 } \"deliveryMode\" : 1 , \"priority\" : 34 , \"correlationId\" : null , \"replyTo\" : null , \"expiration\" : \"60000\" , \"messageId\" : null , \"timestamp\" : \"Jan 1, 1970, 12:33:41 AM\" , \"type\" : null , \"userId\" : \"AIDACKCEVSQ6C2EXAMPLE\" , \"appId\" : null , \"clusterId\" : null , \"bodySize\" : 80 }, \"redelivered\" : false , \"data\" : \"eyJ0aW1lb3V0IjowLCJkYXRhIjoiQ1pybWYwR3c4T3Y0YnFMUXhENEUifQ==\" } ] } } Response \u00b6 Libraries \u00b6 Python - Active MQ Python - Rabbit MQ Reference Docs \u00b6 Using Lambda with Amazon MQ Using Amazon MQ as an event source for AWS Lambda","title":"Amazon MQ"},{"location":"mq/#amazon-mq","text":"Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ, invokes the function synchronously","title":"Amazon MQ"},{"location":"mq/#input","text":"","title":"Input"},{"location":"mq/#activemq","text":"{ \"eventSource\" : \"aws:amq\" , \"eventSourceArn\" : \"arn:aws:mq:us-west-2:112556298976:broker:test:b-9bcfa592-423a-4942-879d-eb284b418fc8\" , \"messages\" : [ { \"messageID\" : \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\" , \"messageType\" : \"jms/text-message\" , \"data\" : \"QUJDOkFBQUE=\" , \"connectionId\" : \"myJMSCoID\" , \"redelivered\" : false , \"destination\" : { \"physicalname\" : \"testQueue\" }, \"timestamp\" : 1598827811958 , \"brokerInTime\" : 1598827811958 , \"brokerOutTime\" : 1598827811959 }, { \"messageID\" : \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\" , \"messageType\" : \"jms/bytes-message\" , \"data\" : \"3DTOOW7crj51prgVLQaGQ82S48k=\" , \"connectionId\" : \"myJMSCoID1\" , \"persistent\" : false , \"destination\" : { \"physicalname\" : \"testQueue\" }, \"timestamp\" : 1598827811958 , \"brokerInTime\" : 1598827811958 , \"brokerOutTime\" : 1598827811959 } ] }","title":"ActiveMQ"},{"location":"mq/#rabbitmq","text":"{ \"eventSource\" : \"aws:rmq\" , \"eventSourceArn\" : \"arn:aws:mq:us-west-2:112556298976:broker:pizzaBroker:b-9bcfa592-423a-4942-879d-eb284b418fc8\" , \"rmqMessagesByQueue\" : { \"pizzaQueue::/\" : [ { \"basicProperties\" : { \"contentType\" : \"text/plain\" , \"contentEncoding\" : null , \"headers\" : { \"header1\" : { \"bytes\" : [ 118 , 97 , 108 , 117 , 101 , 49 ] }, \"header2\" : { \"bytes\" : [ 118 , 97 , 108 , 117 , 101 , 50 ] }, \"numberInHeader\" : 10 } \"deliveryMode\" : 1 , \"priority\" : 34 , \"correlationId\" : null , \"replyTo\" : null , \"expiration\" : \"60000\" , \"messageId\" : null , \"timestamp\" : \"Jan 1, 1970, 12:33:41 AM\" , \"type\" : null , \"userId\" : \"AIDACKCEVSQ6C2EXAMPLE\" , \"appId\" : null , \"clusterId\" : null , \"bodySize\" : 80 }, \"redelivered\" : false , \"data\" : \"eyJ0aW1lb3V0IjowLCJkYXRhIjoiQ1pybWYwR3c4T3Y0YnFMUXhENEUifQ==\" } ] } }","title":"RabbitMQ"},{"location":"mq/#response","text":"","title":"Response"},{"location":"mq/#libraries","text":"Python - Active MQ Python - Rabbit MQ","title":"Libraries"},{"location":"mq/#reference-docs","text":"Using Lambda with Amazon MQ Using Amazon MQ as an event source for AWS Lambda","title":"Reference Docs"},{"location":"rest-api-custom-authorizer/","text":"API Gateway Rest Authorizer \u00b6 Event driven, synchronous. Input \u00b6 Token authorizer \u00b6 methodArn (String) ARN of the incoming method request and is populated by API Gateway in accordance with the Lambda authorizer configuration Token schema { \"type\" : \"TOKEN\" , \"authorizationToken\" : \"{caller-supplied-token}\" , \"methodArn\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } Example get call for token authorizer { \"type\" : \"TOKEN\" , \"authorizationToken\" : \"allow\" , \"methodArn\" : \"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/*/GET/\" } Introducing custom authorizers in Amazon API Gateway Request authorizer \u00b6 { \"type\" : \"REQUEST\" , \"methodArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"resource\" : \"/request\" , \"path\" : \"/request\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"X-AMZ-Date\" : \"20170718T062915Z\" , \"Accept\" : \"*/*\" , \"HeaderAuth1\" : \"headerValue1\" , \"CloudFront-Viewer-Country\" : \"US\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"User-Agent\" : \"...\" }, \"queryStringParameters\" : { \"QueryString1\" : \"queryValue1\" }, \"pathParameters\" : {}, \"stageVariables\" : { \"StageVar1\" : \"stageValue1\" }, \"requestContext\" : { \"path\" : \"/request\" , \"accountId\" : \"123456789012\" , \"resourceId\" : \"05c7jb\" , \"stage\" : \"test\" , \"requestId\" : \"...\" , \"identity\" : { \"apiKey\" : \"...\" , \"sourceIp\" : \"...\" , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"resourcePath\" : \"/request\" , \"httpMethod\" : \"GET\" , \"apiId\" : \"abcdef123\" } } Response \u00b6 Response schema { \"principalId\" : \"yyyyyyyy\" , // The pri n cipal user ide nt i f ica t io n associa te d wi t h t he t oke n se nt by t he clie nt . \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Allow|Deny\" , \"Resource\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } ] }, \"context\" : { \"stringKey\" : \"value\" , \"numberKey\" : \"1\" , \"booleanKey\" : \"true\" }, \"usageIdentifierKey\" : \"{api-key}\" } The example output contains a policy statement to block (Deny) calls to the GET method { \"principalId\" : \"user\" , \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Deny\" , \"Resource\" : \"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/dev/GET/\" } ] } } Libraries \u00b6 Amazon API Gateway - Custom Authorizer Blueprints for AWS Lambda Python - APIGatewayAuthorizerTokenEvent - pip aws-lambda-powertools Typescript - APIGatewayTokenAuthorizerEvent Java - APIGatewayCustomAuthorizerEvent Code examples \u00b6 Token authorizer from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( APIGatewayAuthorizerTokenEvent , APIGatewayAuthorizerResponse , ) @event_source ( data_class = APIGatewayAuthorizerTokenEvent ) def handler ( event : APIGatewayAuthorizerTokenEvent , context ): arn = event . parsed_arn policy = APIGatewayAuthorizerResponse ( principal_id = \"user\" , region = arn . region , aws_account_id = arn . aws_account_id , api_id = arn . api_id , stage = arn . stage ) if event . authorization_token == \"42\" : policy . allow_all_routes () else : policy . deny_all_routes () return policy . asdict () Request authorizer from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( DENY_ALL_RESPONSE , APIGatewayAuthorizerRequestEvent , APIGatewayAuthorizerResponse , HttpVerb , ) from secrets import compare_digest def get_user_by_token ( token ): if compare_digest ( token , \"admin-foo\" ): return { \"id\" : 0 , \"name\" : \"Admin\" , \"isAdmin\" : True } elif compare_digest ( token , \"regular-foo\" ): return { \"id\" : 1 , \"name\" : \"Joe\" } else : return None @event_source ( data_class = APIGatewayAuthorizerRequestEvent ) def handler ( event : APIGatewayAuthorizerRequestEvent , context ): user = get_user_by_token ( event . get_header_value ( \"Authorization\" )) if user is None : # No user was found # to return 401 - `{\"message\":\"Unauthorized\"}`, but pollutes lambda error count metrics # raise Exception(\"Unauthorized\") # to return 403 - `{\"message\":\"Forbidden\"}` return DENY_ALL_RESPONSE # parse the `methodArn` as an `APIGatewayRouteArn` arn = event . parsed_arn # Create the response builder from parts of the `methodArn` # and set the logged in user id and context policy = APIGatewayAuthorizerResponse ( principal_id = user [ \"id\" ], context = user , region = arn . region , aws_account_id = arn . aws_account_id , api_id = arn . api_id , stage = arn . stage , ) # Conditional IAM Policy if user . get ( \"isAdmin\" , False ): policy . allow_all_routes () else : policy . allow_route ( HttpVerb . GET , \"/user-profile\" ) return policy . asdict () Reference Docs \u00b6 Use API Gateway Lambda authorizers The Complete Guide to Custom Authorizers with AWS Lambda and API Gateway","title":"API Gateway Rest Authorizer"},{"location":"rest-api-custom-authorizer/#api-gateway-rest-authorizer","text":"Event driven, synchronous.","title":"API Gateway Rest Authorizer"},{"location":"rest-api-custom-authorizer/#input","text":"","title":"Input"},{"location":"rest-api-custom-authorizer/#token-authorizer","text":"methodArn (String) ARN of the incoming method request and is populated by API Gateway in accordance with the Lambda authorizer configuration Token schema { \"type\" : \"TOKEN\" , \"authorizationToken\" : \"{caller-supplied-token}\" , \"methodArn\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } Example get call for token authorizer { \"type\" : \"TOKEN\" , \"authorizationToken\" : \"allow\" , \"methodArn\" : \"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/*/GET/\" } Introducing custom authorizers in Amazon API Gateway","title":"Token authorizer"},{"location":"rest-api-custom-authorizer/#request-authorizer","text":"{ \"type\" : \"REQUEST\" , \"methodArn\" : \"arn:aws:execute-api:us-east-1:123456789012:abcdef123/test/GET/request\" , \"resource\" : \"/request\" , \"path\" : \"/request\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"X-AMZ-Date\" : \"20170718T062915Z\" , \"Accept\" : \"*/*\" , \"HeaderAuth1\" : \"headerValue1\" , \"CloudFront-Viewer-Country\" : \"US\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"User-Agent\" : \"...\" }, \"queryStringParameters\" : { \"QueryString1\" : \"queryValue1\" }, \"pathParameters\" : {}, \"stageVariables\" : { \"StageVar1\" : \"stageValue1\" }, \"requestContext\" : { \"path\" : \"/request\" , \"accountId\" : \"123456789012\" , \"resourceId\" : \"05c7jb\" , \"stage\" : \"test\" , \"requestId\" : \"...\" , \"identity\" : { \"apiKey\" : \"...\" , \"sourceIp\" : \"...\" , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"resourcePath\" : \"/request\" , \"httpMethod\" : \"GET\" , \"apiId\" : \"abcdef123\" } }","title":"Request authorizer"},{"location":"rest-api-custom-authorizer/#response","text":"Response schema { \"principalId\" : \"yyyyyyyy\" , // The pri n cipal user ide nt i f ica t io n associa te d wi t h t he t oke n se nt by t he clie nt . \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Allow|Deny\" , \"Resource\" : \"arn:aws:execute-api:{regionId}:{accountId}:{apiId}/{stage}/{httpVerb}/[{resource}/[{child-resources}]]\" } ] }, \"context\" : { \"stringKey\" : \"value\" , \"numberKey\" : \"1\" , \"booleanKey\" : \"true\" }, \"usageIdentifierKey\" : \"{api-key}\" } The example output contains a policy statement to block (Deny) calls to the GET method { \"principalId\" : \"user\" , \"policyDocument\" : { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Action\" : \"execute-api:Invoke\" , \"Effect\" : \"Deny\" , \"Resource\" : \"arn:aws:execute-api:us-west-2:123456789012:ymy8tbxw7b/dev/GET/\" } ] } }","title":"Response"},{"location":"rest-api-custom-authorizer/#libraries","text":"Amazon API Gateway - Custom Authorizer Blueprints for AWS Lambda Python - APIGatewayAuthorizerTokenEvent - pip aws-lambda-powertools Typescript - APIGatewayTokenAuthorizerEvent Java - APIGatewayCustomAuthorizerEvent","title":"Libraries"},{"location":"rest-api-custom-authorizer/#code-examples","text":"Token authorizer from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( APIGatewayAuthorizerTokenEvent , APIGatewayAuthorizerResponse , ) @event_source ( data_class = APIGatewayAuthorizerTokenEvent ) def handler ( event : APIGatewayAuthorizerTokenEvent , context ): arn = event . parsed_arn policy = APIGatewayAuthorizerResponse ( principal_id = \"user\" , region = arn . region , aws_account_id = arn . aws_account_id , api_id = arn . api_id , stage = arn . stage ) if event . authorization_token == \"42\" : policy . allow_all_routes () else : policy . deny_all_routes () return policy . asdict () Request authorizer from aws_lambda_powertools.utilities.data_classes import event_source from aws_lambda_powertools.utilities.data_classes.api_gateway_authorizer_event import ( DENY_ALL_RESPONSE , APIGatewayAuthorizerRequestEvent , APIGatewayAuthorizerResponse , HttpVerb , ) from secrets import compare_digest def get_user_by_token ( token ): if compare_digest ( token , \"admin-foo\" ): return { \"id\" : 0 , \"name\" : \"Admin\" , \"isAdmin\" : True } elif compare_digest ( token , \"regular-foo\" ): return { \"id\" : 1 , \"name\" : \"Joe\" } else : return None @event_source ( data_class = APIGatewayAuthorizerRequestEvent ) def handler ( event : APIGatewayAuthorizerRequestEvent , context ): user = get_user_by_token ( event . get_header_value ( \"Authorization\" )) if user is None : # No user was found # to return 401 - `{\"message\":\"Unauthorized\"}`, but pollutes lambda error count metrics # raise Exception(\"Unauthorized\") # to return 403 - `{\"message\":\"Forbidden\"}` return DENY_ALL_RESPONSE # parse the `methodArn` as an `APIGatewayRouteArn` arn = event . parsed_arn # Create the response builder from parts of the `methodArn` # and set the logged in user id and context policy = APIGatewayAuthorizerResponse ( principal_id = user [ \"id\" ], context = user , region = arn . region , aws_account_id = arn . aws_account_id , api_id = arn . api_id , stage = arn . stage , ) # Conditional IAM Policy if user . get ( \"isAdmin\" , False ): policy . allow_all_routes () else : policy . allow_route ( HttpVerb . GET , \"/user-profile\" ) return policy . asdict ()","title":"Code examples"},{"location":"rest-api-custom-authorizer/#reference-docs","text":"Use API Gateway Lambda authorizers The Complete Guide to Custom Authorizers with AWS Lambda and API Gateway","title":"Reference Docs"},{"location":"rest-api/","text":"API Gateway Rest API \u00b6 Events are sent synchronously to the Lambda function with a timeout of 25 seconds. Note The input and out format matches Http api format 1.0 Input \u00b6 Http GET request example { \"resource\" : \"/my/path\" , \"path\" : \"/my/path\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"header1\" : \"value1\" , \"header2\" : \"value2\" }, \"multiValueHeaders\" : { \"header1\" : [ \"value1\" ], \"header2\" : [ \"value1\" , \"value2\" ] }, \"queryStringParameters\" : { \"parameter1\" : \"value1\" , \"parameter2\" : \"value\" }, \"multiValueQueryStringParameters\" : { \"parameter1\" : [ \"value1\" , \"value2\" ], \"parameter2\" : [ \"value\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"id\" , \"authorizer\" : { \"claims\" : null , \"scopes\" : null }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"extendedRequestId\" : \"request-id\" , \"httpMethod\" : \"GET\" , \"identity\" : { \"accessKey\" : null , \"accountId\" : null , \"caller\" : null , \"cognitoAuthenticationProvider\" : null , \"cognitoAuthenticationType\" : null , \"cognitoIdentityId\" : null , \"cognitoIdentityPoolId\" : null , \"principalOrgId\" : null , \"sourceIp\" : \"IP\" , \"user\" : null , \"userAgent\" : \"user-agent\" , \"userArn\" : null , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"requestId\" : \"id=\" , \"requestTime\" : \"04/Mar/2020:19:15:17 +0000\" , \"requestTimeEpoch\" : 1583349317135 , \"resourceId\" : null , \"resourcePath\" : \"/my/path\" , \"stage\" : \"$default\" }, \"pathParameters\" : null , \"stageVariables\" : null , \"body\" : \"Hello from Lambda!\" , \"isBase64Encoded\" : false } Http post request { \"body\" : \"eyJ0ZXN0IjoiYm9keSJ9\" , \"resource\" : \"/{proxy+}\" , \"path\" : \"/path/to/resource\" , \"httpMethod\" : \"POST\" , \"isBase64Encoded\" : true , \"queryStringParameters\" : { \"foo\" : \"bar\" }, \"multiValueQueryStringParameters\" : { \"foo\" : [ \"bar\" ] }, \"pathParameters\" : { \"proxy\" : \"/path/to/resource\" }, \"stageVariables\" : { \"baz\" : \"qux\" }, \"headers\" : { \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\" , \"Accept-Encoding\" : \"gzip, deflate, sdch\" , \"Accept-Language\" : \"en-US,en;q=0.8\" , \"Cache-Control\" : \"max-age=0\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Desktop-Viewer\" : \"true\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"CloudFront-Is-SmartTV-Viewer\" : \"false\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Viewer-Country\" : \"US\" , \"Host\" : \"1234567890.execute-api.us-east-1.amazonaws.com\" , \"Upgrade-Insecure-Requests\" : \"1\" , \"User-Agent\" : \"Custom User Agent String\" , \"Via\" : \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\" , \"X-Amz-Cf-Id\" : \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\" , \"X-Forwarded-For\" : \"127.0.0.1, 127.0.0.2\" , \"X-Forwarded-Port\" : \"443\" , \"X-Forwarded-Proto\" : \"https\" }, \"multiValueHeaders\" : { \"Accept\" : [ \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\" ], \"Accept-Encoding\" : [ \"gzip, deflate, sdch\" ], \"Accept-Language\" : [ \"en-US,en;q=0.8\" ], \"Cache-Control\" : [ \"max-age=0\" ], \"CloudFront-Forwarded-Proto\" : [ \"https\" ], \"CloudFront-Is-Desktop-Viewer\" : [ \"true\" ], \"CloudFront-Is-Mobile-Viewer\" : [ \"false\" ], \"CloudFront-Is-SmartTV-Viewer\" : [ \"false\" ], \"CloudFront-Is-Tablet-Viewer\" : [ \"false\" ], \"CloudFront-Viewer-Country\" : [ \"US\" ], \"Host\" : [ \"0123456789.execute-api.us-east-1.amazonaws.com\" ], \"Upgrade-Insecure-Requests\" : [ \"1\" ], \"User-Agent\" : [ \"Custom User Agent String\" ], \"Via\" : [ \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\" ], \"X-Amz-Cf-Id\" : [ \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\" ], \"X-Forwarded-For\" : [ \"127.0.0.1, 127.0.0.2\" ], \"X-Forwarded-Port\" : [ \"443\" ], \"X-Forwarded-Proto\" : [ \"https\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"resourceId\" : \"123456\" , \"stage\" : \"prod\" , \"requestId\" : \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\" , \"requestTime\" : \"09/Apr/2015:12:34:56 +0000\" , \"requestTimeEpoch\" : 1428582896000 , \"identity\" : { \"cognitoIdentityPoolId\" : null , \"accountId\" : null , \"cognitoIdentityId\" : null , \"caller\" : null , \"accessKey\" : null , \"sourceIp\" : \"127.0.0.1\" , \"cognitoAuthenticationType\" : null , \"cognitoAuthenticationProvider\" : null , \"userArn\" : null , \"userAgent\" : \"Custom User Agent String\" , \"user\" : null }, \"path\" : \"/prod/path/to/resource\" , \"resourcePath\" : \"/{proxy+}\" , \"httpMethod\" : \"POST\" , \"apiId\" : \"1234567890\" , \"protocol\" : \"HTTP/1.1\" } } Getting the correlation id \u00b6 JSON path to correlation id: requestContext.requestId Generating sample events via SAM CLI \u00b6 sam local generate-event apigateway aws-proxy --body { \"test\" : \"body\" } --path foo --method POST sam local generate-event apigateway aws-proxy --path foo --method GET Response \u00b6 Output data structure { \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headerName\" : \"headerValue\" , ... }, \"multiValueHeaders\" : { \"headerName\" : [ \"headerValue\" , \"headerValue2\" , ... ], ... }, \"body\" : \"...\" } Rest api response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" }, \"body\" : \"{\\\"foo\\\": \\\"value\\\"}\" , \"isBase64Encoded\" : false } Base64 encoded response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" , \"Content-Encoding\" : \"gzip\" }, \"body\" : \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\" , \"isBase64Encoded\" : true } Libraries \u00b6 Typed Lambda handlers by Language Python - data class and parser - Pip aws-lambda-powertools Typescript - api-gateway-proxy.d.ts - NPM @types/aws-lambda Rust - apigw/mod.rs traits - Cargo aws_lambda_events Go - ApiGatewayEvent typing - Crate github.com/aws/aws-lambda-go/events Java - APIGatewayProxyRequestEvent data classes - Maven aws-lambda-java-events PHP - typing - Composer bref/bref DoNet - APIGatewayEvents data classes - NuGet Amazon.Lambda.APIGatewayEvents Event Handlers by Language Chalice Python AWS Lambda Powertools Python PHP Bref for webapps Serverless Java container - has support for SpringBoot, Apache Struts, Jersey, Spark and Micronaut Ruby - Routing - Gem jets Reference Docs \u00b6 Input format of a Lambda function for proxy integration","title":"API Gateway Rest API"},{"location":"rest-api/#api-gateway-rest-api","text":"Events are sent synchronously to the Lambda function with a timeout of 25 seconds. Note The input and out format matches Http api format 1.0","title":"API Gateway Rest API"},{"location":"rest-api/#input","text":"Http GET request example { \"resource\" : \"/my/path\" , \"path\" : \"/my/path\" , \"httpMethod\" : \"GET\" , \"headers\" : { \"header1\" : \"value1\" , \"header2\" : \"value2\" }, \"multiValueHeaders\" : { \"header1\" : [ \"value1\" ], \"header2\" : [ \"value1\" , \"value2\" ] }, \"queryStringParameters\" : { \"parameter1\" : \"value1\" , \"parameter2\" : \"value\" }, \"multiValueQueryStringParameters\" : { \"parameter1\" : [ \"value1\" , \"value2\" ], \"parameter2\" : [ \"value\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"apiId\" : \"id\" , \"authorizer\" : { \"claims\" : null , \"scopes\" : null }, \"domainName\" : \"id.execute-api.us-east-1.amazonaws.com\" , \"domainPrefix\" : \"id\" , \"extendedRequestId\" : \"request-id\" , \"httpMethod\" : \"GET\" , \"identity\" : { \"accessKey\" : null , \"accountId\" : null , \"caller\" : null , \"cognitoAuthenticationProvider\" : null , \"cognitoAuthenticationType\" : null , \"cognitoIdentityId\" : null , \"cognitoIdentityPoolId\" : null , \"principalOrgId\" : null , \"sourceIp\" : \"IP\" , \"user\" : null , \"userAgent\" : \"user-agent\" , \"userArn\" : null , \"clientCert\" : { \"clientCertPem\" : \"CERT_CONTENT\" , \"subjectDN\" : \"www.example.com\" , \"issuerDN\" : \"Example issuer\" , \"serialNumber\" : \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\" , \"validity\" : { \"notBefore\" : \"May 28 12:30:02 2019 GMT\" , \"notAfter\" : \"Aug 5 09:36:04 2021 GMT\" } } }, \"path\" : \"/my/path\" , \"protocol\" : \"HTTP/1.1\" , \"requestId\" : \"id=\" , \"requestTime\" : \"04/Mar/2020:19:15:17 +0000\" , \"requestTimeEpoch\" : 1583349317135 , \"resourceId\" : null , \"resourcePath\" : \"/my/path\" , \"stage\" : \"$default\" }, \"pathParameters\" : null , \"stageVariables\" : null , \"body\" : \"Hello from Lambda!\" , \"isBase64Encoded\" : false } Http post request { \"body\" : \"eyJ0ZXN0IjoiYm9keSJ9\" , \"resource\" : \"/{proxy+}\" , \"path\" : \"/path/to/resource\" , \"httpMethod\" : \"POST\" , \"isBase64Encoded\" : true , \"queryStringParameters\" : { \"foo\" : \"bar\" }, \"multiValueQueryStringParameters\" : { \"foo\" : [ \"bar\" ] }, \"pathParameters\" : { \"proxy\" : \"/path/to/resource\" }, \"stageVariables\" : { \"baz\" : \"qux\" }, \"headers\" : { \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\" , \"Accept-Encoding\" : \"gzip, deflate, sdch\" , \"Accept-Language\" : \"en-US,en;q=0.8\" , \"Cache-Control\" : \"max-age=0\" , \"CloudFront-Forwarded-Proto\" : \"https\" , \"CloudFront-Is-Desktop-Viewer\" : \"true\" , \"CloudFront-Is-Mobile-Viewer\" : \"false\" , \"CloudFront-Is-SmartTV-Viewer\" : \"false\" , \"CloudFront-Is-Tablet-Viewer\" : \"false\" , \"CloudFront-Viewer-Country\" : \"US\" , \"Host\" : \"1234567890.execute-api.us-east-1.amazonaws.com\" , \"Upgrade-Insecure-Requests\" : \"1\" , \"User-Agent\" : \"Custom User Agent String\" , \"Via\" : \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\" , \"X-Amz-Cf-Id\" : \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\" , \"X-Forwarded-For\" : \"127.0.0.1, 127.0.0.2\" , \"X-Forwarded-Port\" : \"443\" , \"X-Forwarded-Proto\" : \"https\" }, \"multiValueHeaders\" : { \"Accept\" : [ \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\" ], \"Accept-Encoding\" : [ \"gzip, deflate, sdch\" ], \"Accept-Language\" : [ \"en-US,en;q=0.8\" ], \"Cache-Control\" : [ \"max-age=0\" ], \"CloudFront-Forwarded-Proto\" : [ \"https\" ], \"CloudFront-Is-Desktop-Viewer\" : [ \"true\" ], \"CloudFront-Is-Mobile-Viewer\" : [ \"false\" ], \"CloudFront-Is-SmartTV-Viewer\" : [ \"false\" ], \"CloudFront-Is-Tablet-Viewer\" : [ \"false\" ], \"CloudFront-Viewer-Country\" : [ \"US\" ], \"Host\" : [ \"0123456789.execute-api.us-east-1.amazonaws.com\" ], \"Upgrade-Insecure-Requests\" : [ \"1\" ], \"User-Agent\" : [ \"Custom User Agent String\" ], \"Via\" : [ \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\" ], \"X-Amz-Cf-Id\" : [ \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\" ], \"X-Forwarded-For\" : [ \"127.0.0.1, 127.0.0.2\" ], \"X-Forwarded-Port\" : [ \"443\" ], \"X-Forwarded-Proto\" : [ \"https\" ] }, \"requestContext\" : { \"accountId\" : \"123456789012\" , \"resourceId\" : \"123456\" , \"stage\" : \"prod\" , \"requestId\" : \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\" , \"requestTime\" : \"09/Apr/2015:12:34:56 +0000\" , \"requestTimeEpoch\" : 1428582896000 , \"identity\" : { \"cognitoIdentityPoolId\" : null , \"accountId\" : null , \"cognitoIdentityId\" : null , \"caller\" : null , \"accessKey\" : null , \"sourceIp\" : \"127.0.0.1\" , \"cognitoAuthenticationType\" : null , \"cognitoAuthenticationProvider\" : null , \"userArn\" : null , \"userAgent\" : \"Custom User Agent String\" , \"user\" : null }, \"path\" : \"/prod/path/to/resource\" , \"resourcePath\" : \"/{proxy+}\" , \"httpMethod\" : \"POST\" , \"apiId\" : \"1234567890\" , \"protocol\" : \"HTTP/1.1\" } }","title":"Input"},{"location":"rest-api/#getting-the-correlation-id","text":"JSON path to correlation id: requestContext.requestId","title":"Getting the correlation id"},{"location":"rest-api/#generating-sample-events-via-sam-cli","text":"sam local generate-event apigateway aws-proxy --body { \"test\" : \"body\" } --path foo --method POST sam local generate-event apigateway aws-proxy --path foo --method GET","title":"Generating sample events via SAM CLI"},{"location":"rest-api/#response","text":"Output data structure { \"isBase64Encoded\" : true | false , \"statusCode\" : h tt pS tatus Code , \"headers\" : { \"headerName\" : \"headerValue\" , ... }, \"multiValueHeaders\" : { \"headerName\" : [ \"headerValue\" , \"headerValue2\" , ... ], ... }, \"body\" : \"...\" } Rest api response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" }, \"body\" : \"{\\\"foo\\\": \\\"value\\\"}\" , \"isBase64Encoded\" : false } Base64 encoded response example { \"statusCode\" : 200 , \"headers\" : { \"Content-Type\" : \"application/json\" , \"Content-Encoding\" : \"gzip\" }, \"body\" : \"H4sIAAAAAAACE6tWKkktLlGyUlAqS8wpTVWqBQCJ88g/EQAAAA==\" , \"isBase64Encoded\" : true }","title":"Response"},{"location":"rest-api/#libraries","text":"Typed Lambda handlers by Language Python - data class and parser - Pip aws-lambda-powertools Typescript - api-gateway-proxy.d.ts - NPM @types/aws-lambda Rust - apigw/mod.rs traits - Cargo aws_lambda_events Go - ApiGatewayEvent typing - Crate github.com/aws/aws-lambda-go/events Java - APIGatewayProxyRequestEvent data classes - Maven aws-lambda-java-events PHP - typing - Composer bref/bref DoNet - APIGatewayEvents data classes - NuGet Amazon.Lambda.APIGatewayEvents Event Handlers by Language Chalice Python AWS Lambda Powertools Python PHP Bref for webapps Serverless Java container - has support for SpringBoot, Apache Struts, Jersey, Spark and Micronaut Ruby - Routing - Gem jets","title":"Libraries"},{"location":"rest-api/#reference-docs","text":"Input format of a Lambda function for proxy integration","title":"Reference Docs"},{"location":"s3-batch/","text":"S3 Batch Operations \u00b6 When the batch job starts, Amazon S3 invokes the Lambda function synchronously for each object in the manifest. The event parameter includes the names of the bucket and the object. Request \u00b6 Example Amazon S3 batch request event { \"invocationSchemaVersion\" : \"1.0\" , \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\" , \"job\" :{ \"id\" : \"f3cc4f60-61f6-4a2b-8a21-d07600c373ce\" }, \"tasks\" :[ { \"taskId\" : \"dGFza2lkZ29lc2hlcmUK\" , \"s3Key\" : \"customerImage1.jpg\" , \"s3VersionId\" : \"1\" , \"s3BucketArn\" : \"arn:aws:s3:us-east-1:0123456788:examplebucket\" } ] } Response \u00b6 resultCode is the result of the Lambda function. Succeeded , TemporaryFailure or PermanentFailure Example Amazon S3 batch response { \"invocationSchemaVersion\" : \"1.0\" , \"treatMissingKeysAs\" : \"PermanentFailure\" , \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\" , \"results\" : [ { \"taskId\" : \"dGFza2lkZ29lc2hlcmUK\" , \"resultCode\" : \"Succeeded\" , \"resultString\" : \"[\" Alice \", \" Bob \"]\" } ] } Libraries \u00b6 S3 Batch - Typescript - NPM @types/aws-lambda S3 Batch - Go - github.com/aws/aws-lambda-go/events S3BatchEvent - Java - Maven aws-lambda-java-events S3BatchJobEvent - Crate aws-lambda-events The serverless-s3-batch plugin is designed to make it easy to work with S3 Batch operations. NPM serverless-s3-batch Documentation \u00b6 Using AWS Lambda with Amazon S3 batch operations S3 Batch - Invoke AWS Lambda function A Guide to S3 Batch on AWS","title":"S3 Batch"},{"location":"s3-batch/#s3-batch-operations","text":"When the batch job starts, Amazon S3 invokes the Lambda function synchronously for each object in the manifest. The event parameter includes the names of the bucket and the object.","title":"S3 Batch Operations"},{"location":"s3-batch/#request","text":"Example Amazon S3 batch request event { \"invocationSchemaVersion\" : \"1.0\" , \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\" , \"job\" :{ \"id\" : \"f3cc4f60-61f6-4a2b-8a21-d07600c373ce\" }, \"tasks\" :[ { \"taskId\" : \"dGFza2lkZ29lc2hlcmUK\" , \"s3Key\" : \"customerImage1.jpg\" , \"s3VersionId\" : \"1\" , \"s3BucketArn\" : \"arn:aws:s3:us-east-1:0123456788:examplebucket\" } ] }","title":"Request"},{"location":"s3-batch/#response","text":"resultCode is the result of the Lambda function. Succeeded , TemporaryFailure or PermanentFailure Example Amazon S3 batch response { \"invocationSchemaVersion\" : \"1.0\" , \"treatMissingKeysAs\" : \"PermanentFailure\" , \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\" , \"results\" : [ { \"taskId\" : \"dGFza2lkZ29lc2hlcmUK\" , \"resultCode\" : \"Succeeded\" , \"resultString\" : \"[\" Alice \", \" Bob \"]\" } ] }","title":"Response"},{"location":"s3-batch/#libraries","text":"S3 Batch - Typescript - NPM @types/aws-lambda S3 Batch - Go - github.com/aws/aws-lambda-go/events S3BatchEvent - Java - Maven aws-lambda-java-events S3BatchJobEvent - Crate aws-lambda-events The serverless-s3-batch plugin is designed to make it easy to work with S3 Batch operations. NPM serverless-s3-batch","title":"Libraries"},{"location":"s3-batch/#documentation","text":"Using AWS Lambda with Amazon S3 batch operations S3 Batch - Invoke AWS Lambda function A Guide to S3 Batch on AWS","title":"Documentation"},{"location":"s3-object-lambda/","text":"S3 Object Lambda \u00b6 Calls are made synchronously. Input \u00b6 Fields \u00b6 xAmzRequestId (String) The Amazon S3 request ID for this request. We recommend that you log this value to help with debugging. protocolVersion (String) The version ID of the context provided. getObjectContext (Map) The input and output details for connections to Amazon S3 and S3 Object Lambda. inputS3Url - String - A pre-signed URL that can be used to fetch the original object from Amazon S3. The URL is signed using the original caller\u2019s identity, and their permissions will apply when the URL is used. If there are signed headers in the URL, the Lambda function must include these in the call to Amazon S3, except for the Host. outputRoute - String - A routing token that is added to the S3 Object Lambda URL when the Lambda function calls WriteGetObjectResponse . outputToken - String - An opaque token used by S3 Object Lambda to match the WriteGetObjectResponse call with the original caller. configuration (Map) Configuration information about the S3 Object Lambda access point. accessPointArn - String - The Amazon Resource Name (ARN) of the S3 Object Lambda access point that received this request. supportingAccessPointArn - String - The ARN of the supporting access point that is specified in the S3 Object Lambda access point configuration. payload - String - Custom data that is applied to the S3 Object Lambda access point configuration. S3 Object Lambda treats this as an opaque string, so it might need to be decoded before use. userRequest (Map) Information about the original call to S3 Object Lambda. url - String - The decoded URL of the request as received by S3 Object Lambda, excluding any authorization-related query parameters. headers - Map - A map of string to strings containing the HTTP headers and their values from the original call, excluding any authorization-related headers. If the same header appears multiple times, their values are combined into a comma-delimited list. The case of the original headers is retained in this map. userIdentity (Map) Map - Details about the identity that made the call to S3 Object Lambda. type - Strimg - The source of the temporary security credentials, such as Root, IAMUser, or Role. principalId - String - The internal ID of the entity that was used to get credentials. arn - String - The ARN of the principal that made the call. The last section of the ARN contains the user or role that made the call. accountId - String - The account that owns the entity that granted permissions for the request. If the request was made with temporary security credentials, this is the account that owns the IAM user or role that was used to obtain credentials. accessKeyId - String - The access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials. For security reasons, accessKeyId might not be present, or might be displayed as an empty string. userName - String - TThe friendly name of the identity that made the call. sessionContext - Optional - If the request was made with temporary security credentials, this element provides information about the session that was created for those credentials. attributes - Session attributes. creationDate - String - The date and time when the temporary security credentials were issued. Represented in ISO 8601 basic notation. mfaAuthenticated - Boolean - The value is true if the root user or IAM user whose credentials were used for the request also was authenticated with an MFA device; otherwise, false sessionIssuer - If the request was made with temporary security credentials, an element that provides information about how the credentials were obtained. type - String - The source of the temporary security credentials, such as Root, IAMUser, or Role. userName - String - The friendly name of the user or role that issued the session. principalId - String - The internal ID of the entity that was used to get credentials. arn - String - The ARN of the source (account, IAM user, or role) that was used to get temporary security credentials. accountId - String - The account that owns the entity that was used to get credentials. Getting the correlation id \u00b6 JSON path to correlation id: xAmzRequestId Examples \u00b6 IAM User { \"xAmzRequestId\" : \"1a5ed718-5f53-471d-b6fe-5cf62d88d02a\" , \"getObjectContext\" : { \"inputS3Url\" : \"https://myap-123412341234.s3-accesspoint.us-east-1.amazonaws.com/s3.txt?X-Amz-Security-Token=...\" , \"outputRoute\" : \"io-iad-cell001\" , \"outputToken\" : \"...\" }, \"configuration\" : { \"accessPointArn\" : \"arn:aws:s3-object-lambda:us-east-1:123412341234:accesspoint/myolap\" , \"supportingAccessPointArn\" : \"arn:aws:s3:us-east-1:123412341234:accesspoint/myap\" , \"payload\" : \"test\" }, \"userRequest\" : { \"url\" : \"/s3.txt\" , \"headers\" : { \"Host\" : \"myolap-123412341234.s3-object-lambda.us-east-1.amazonaws.com\" , \"Accept-Encoding\" : \"identity\" , \"X-Amz-Content-SHA256\" : \"e3b0c44297fc1c149afbf4c8995fb92427ae41e4649b934ca495991b7852b855\" } }, \"userIdentity\" : { \"type\" : \"IAMUser\" , \"principalId\" : \"...\" , \"arn\" : \"arn:aws:iam::123412341234:user/myuser\" , \"accountId\" : \"123412341234\" , \"accessKeyId\" : \"...\" , \"userName\" : \"Alice\" }, \"protocolVersion\" : \"1.00\" } Temp Credentials { \"xAmzRequestId\" : \"requestId\" , \"getObjectContext\" : { \"inputS3Url\" : \"https://my-s3-ap-111122223333.s3-accesspoint.us-east-1.amazonaws.com/example?X-Amz-Security-Token=<snip>\" , \"outputRoute\" : \"io-use1-001\" , \"outputToken\" : \"OutputToken\" }, \"configuration\" : { \"accessPointArn\" : \"arn:aws:s3-object-lambda:us-east-1:111122223333:accesspoint/example-object-lambda-ap\" , \"supportingAccessPointArn\" : \"arn:aws:s3:us-east-1:111122223333:accesspoint/example-ap\" , \"payload\" : \"{}\" }, \"userRequest\" : { \"url\" : \"https://object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com/example\" , \"headers\" : { \"Host\" : \"object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com\" , \"Accept-Encoding\" : \"identity\" , \"X-Amz-Content-SHA256\" : \"e3b0c44298fc1example\" } }, \"userIdentity\" : { \"type\" : \"AssumedRole\" , \"principalId\" : \"principalId\" , \"arn\" : \"arn:aws:sts::111122223333:assumed-role/Admin/example\" , \"accountId\" : \"111122223333\" , \"accessKeyId\" : \"accessKeyId\" , \"sessionContext\" : { \"attributes\" : { \"mfaAuthenticated\" : \"false\" , \"creationDate\" : \"Wed Mar 10 23:41:52 UTC 2021\" }, \"sessionIssuer\" : { \"type\" : \"Role\" , \"principalId\" : \"principalId\" , \"arn\" : \"arn:aws:iam::111122223333:role/Admin\" , \"accountId\" : \"111122223333\" , \"userName\" : \"Admin\" } } }, \"protocolVersion\" : \"1.00\" } Response \u00b6 { \"status_code\" : 200 } Libraries \u00b6 Python - data class and utilities - Pip aws-lambda-powertools Java - S3ObjectLambdaEvent - Maven aws-lambda-java-events Code Examples \u00b6 Example using AWS Lambda Powertools to upper case the file app.py import boto3 import requests from aws_lambda_powertools import Logger from aws_lambda_powertools.logging.correlation_paths import S3_OBJECT_LAMBDA from aws_lambda_powertools.utilities.data_classes.s3_object_event import S3ObjectLambdaEvent logger = Logger () session = boto3 . Session () s3 = session . client ( \"s3\" ) @logger . inject_lambda_context ( correlation_id_path = S3_OBJECT_LAMBDA , log_event = True ) def lambda_handler ( event , context ): event = S3ObjectLambdaEvent ( event ) # Get object from S3 response = requests . get ( event . input_s3_url ) original_object = response . content . decode ( \"utf-8\" ) # Make changes to the object about to be returned transformed_object = original_object . upper () # Write object back to S3 Object Lambda s3 . write_get_object_response ( Body = transformed_object , RequestRoute = event . request_route , RequestToken = event . request_token ) return { \"status_code\" : 200 } Reference Docs \u00b6 Writing and debugging AWS Lambda functions for Amazon S3 Object Lambda Access Points Transforming objects with S3 Object Lambda Introducing Amazon S3 Object Lambda \u2013 Use Your Code to Process Data as It Is Being Retrieved from S3","title":"S3 Object Lambda"},{"location":"s3-object-lambda/#s3-object-lambda","text":"Calls are made synchronously.","title":"S3 Object Lambda"},{"location":"s3-object-lambda/#input","text":"","title":"Input"},{"location":"s3-object-lambda/#fields","text":"xAmzRequestId (String) The Amazon S3 request ID for this request. We recommend that you log this value to help with debugging. protocolVersion (String) The version ID of the context provided. getObjectContext (Map) The input and output details for connections to Amazon S3 and S3 Object Lambda. inputS3Url - String - A pre-signed URL that can be used to fetch the original object from Amazon S3. The URL is signed using the original caller\u2019s identity, and their permissions will apply when the URL is used. If there are signed headers in the URL, the Lambda function must include these in the call to Amazon S3, except for the Host. outputRoute - String - A routing token that is added to the S3 Object Lambda URL when the Lambda function calls WriteGetObjectResponse . outputToken - String - An opaque token used by S3 Object Lambda to match the WriteGetObjectResponse call with the original caller. configuration (Map) Configuration information about the S3 Object Lambda access point. accessPointArn - String - The Amazon Resource Name (ARN) of the S3 Object Lambda access point that received this request. supportingAccessPointArn - String - The ARN of the supporting access point that is specified in the S3 Object Lambda access point configuration. payload - String - Custom data that is applied to the S3 Object Lambda access point configuration. S3 Object Lambda treats this as an opaque string, so it might need to be decoded before use. userRequest (Map) Information about the original call to S3 Object Lambda. url - String - The decoded URL of the request as received by S3 Object Lambda, excluding any authorization-related query parameters. headers - Map - A map of string to strings containing the HTTP headers and their values from the original call, excluding any authorization-related headers. If the same header appears multiple times, their values are combined into a comma-delimited list. The case of the original headers is retained in this map. userIdentity (Map) Map - Details about the identity that made the call to S3 Object Lambda. type - Strimg - The source of the temporary security credentials, such as Root, IAMUser, or Role. principalId - String - The internal ID of the entity that was used to get credentials. arn - String - The ARN of the principal that made the call. The last section of the ARN contains the user or role that made the call. accountId - String - The account that owns the entity that granted permissions for the request. If the request was made with temporary security credentials, this is the account that owns the IAM user or role that was used to obtain credentials. accessKeyId - String - The access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials. For security reasons, accessKeyId might not be present, or might be displayed as an empty string. userName - String - TThe friendly name of the identity that made the call. sessionContext - Optional - If the request was made with temporary security credentials, this element provides information about the session that was created for those credentials. attributes - Session attributes. creationDate - String - The date and time when the temporary security credentials were issued. Represented in ISO 8601 basic notation. mfaAuthenticated - Boolean - The value is true if the root user or IAM user whose credentials were used for the request also was authenticated with an MFA device; otherwise, false sessionIssuer - If the request was made with temporary security credentials, an element that provides information about how the credentials were obtained. type - String - The source of the temporary security credentials, such as Root, IAMUser, or Role. userName - String - The friendly name of the user or role that issued the session. principalId - String - The internal ID of the entity that was used to get credentials. arn - String - The ARN of the source (account, IAM user, or role) that was used to get temporary security credentials. accountId - String - The account that owns the entity that was used to get credentials.","title":"Fields"},{"location":"s3-object-lambda/#getting-the-correlation-id","text":"JSON path to correlation id: xAmzRequestId","title":"Getting the correlation id"},{"location":"s3-object-lambda/#examples","text":"IAM User { \"xAmzRequestId\" : \"1a5ed718-5f53-471d-b6fe-5cf62d88d02a\" , \"getObjectContext\" : { \"inputS3Url\" : \"https://myap-123412341234.s3-accesspoint.us-east-1.amazonaws.com/s3.txt?X-Amz-Security-Token=...\" , \"outputRoute\" : \"io-iad-cell001\" , \"outputToken\" : \"...\" }, \"configuration\" : { \"accessPointArn\" : \"arn:aws:s3-object-lambda:us-east-1:123412341234:accesspoint/myolap\" , \"supportingAccessPointArn\" : \"arn:aws:s3:us-east-1:123412341234:accesspoint/myap\" , \"payload\" : \"test\" }, \"userRequest\" : { \"url\" : \"/s3.txt\" , \"headers\" : { \"Host\" : \"myolap-123412341234.s3-object-lambda.us-east-1.amazonaws.com\" , \"Accept-Encoding\" : \"identity\" , \"X-Amz-Content-SHA256\" : \"e3b0c44297fc1c149afbf4c8995fb92427ae41e4649b934ca495991b7852b855\" } }, \"userIdentity\" : { \"type\" : \"IAMUser\" , \"principalId\" : \"...\" , \"arn\" : \"arn:aws:iam::123412341234:user/myuser\" , \"accountId\" : \"123412341234\" , \"accessKeyId\" : \"...\" , \"userName\" : \"Alice\" }, \"protocolVersion\" : \"1.00\" } Temp Credentials { \"xAmzRequestId\" : \"requestId\" , \"getObjectContext\" : { \"inputS3Url\" : \"https://my-s3-ap-111122223333.s3-accesspoint.us-east-1.amazonaws.com/example?X-Amz-Security-Token=<snip>\" , \"outputRoute\" : \"io-use1-001\" , \"outputToken\" : \"OutputToken\" }, \"configuration\" : { \"accessPointArn\" : \"arn:aws:s3-object-lambda:us-east-1:111122223333:accesspoint/example-object-lambda-ap\" , \"supportingAccessPointArn\" : \"arn:aws:s3:us-east-1:111122223333:accesspoint/example-ap\" , \"payload\" : \"{}\" }, \"userRequest\" : { \"url\" : \"https://object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com/example\" , \"headers\" : { \"Host\" : \"object-lambda-111122223333.s3-object-lambda.us-east-1.amazonaws.com\" , \"Accept-Encoding\" : \"identity\" , \"X-Amz-Content-SHA256\" : \"e3b0c44298fc1example\" } }, \"userIdentity\" : { \"type\" : \"AssumedRole\" , \"principalId\" : \"principalId\" , \"arn\" : \"arn:aws:sts::111122223333:assumed-role/Admin/example\" , \"accountId\" : \"111122223333\" , \"accessKeyId\" : \"accessKeyId\" , \"sessionContext\" : { \"attributes\" : { \"mfaAuthenticated\" : \"false\" , \"creationDate\" : \"Wed Mar 10 23:41:52 UTC 2021\" }, \"sessionIssuer\" : { \"type\" : \"Role\" , \"principalId\" : \"principalId\" , \"arn\" : \"arn:aws:iam::111122223333:role/Admin\" , \"accountId\" : \"111122223333\" , \"userName\" : \"Admin\" } } }, \"protocolVersion\" : \"1.00\" }","title":"Examples"},{"location":"s3-object-lambda/#response","text":"{ \"status_code\" : 200 }","title":"Response"},{"location":"s3-object-lambda/#libraries","text":"Python - data class and utilities - Pip aws-lambda-powertools Java - S3ObjectLambdaEvent - Maven aws-lambda-java-events","title":"Libraries"},{"location":"s3-object-lambda/#code-examples","text":"Example using AWS Lambda Powertools to upper case the file app.py import boto3 import requests from aws_lambda_powertools import Logger from aws_lambda_powertools.logging.correlation_paths import S3_OBJECT_LAMBDA from aws_lambda_powertools.utilities.data_classes.s3_object_event import S3ObjectLambdaEvent logger = Logger () session = boto3 . Session () s3 = session . client ( \"s3\" ) @logger . inject_lambda_context ( correlation_id_path = S3_OBJECT_LAMBDA , log_event = True ) def lambda_handler ( event , context ): event = S3ObjectLambdaEvent ( event ) # Get object from S3 response = requests . get ( event . input_s3_url ) original_object = response . content . decode ( \"utf-8\" ) # Make changes to the object about to be returned transformed_object = original_object . upper () # Write object back to S3 Object Lambda s3 . write_get_object_response ( Body = transformed_object , RequestRoute = event . request_route , RequestToken = event . request_token ) return { \"status_code\" : 200 }","title":"Code Examples"},{"location":"s3-object-lambda/#reference-docs","text":"Writing and debugging AWS Lambda functions for Amazon S3 Object Lambda Access Points Transforming objects with S3 Object Lambda Introducing Amazon S3 Object Lambda \u2013 Use Your Code to Process Data as It Is Being Retrieved from S3","title":"Reference Docs"},{"location":"s3/","text":"S3 - Event Notification \u00b6 Amazon S3 invokes your function asynchronously with an event that contains details about the object. Input \u00b6 Generating sample events via SAM CLI \u00b6 sam local generate-event s3 put sam local generate-event s3 delete Example event \u00b6 { \"Records\" : [ { \"eventVersion\" : \"2.1\" , \"eventSource\" : \"aws:s3\" , \"awsRegion\" : \"us-east-2\" , \"eventTime\" : \"2019-09-03T19:37:27.192Z\" , \"eventName\" : \"ObjectCreated:Put\" , \"userIdentity\" : { \"principalId\" : \"AWS:AIDAINPONIXQXHT3IKHL2\" }, \"requestParameters\" : { \"sourceIPAddress\" : \"205.255.255.255\" }, \"responseElements\" : { \"x-amz-request-id\" : \"D82B88E5F771F645\" , \"x-amz-id-2\" : \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj5NeC6qMa0emYBDXOo6QBU0Wo=\" }, \"s3\" : { \"s3SchemaVersion\" : \"1.0\" , \"configurationId\" : \"828aa6fc-f7b5-4305-8584-487c791949c1\" , \"bucket\" : { \"name\" : \"DOC-EXAMPLE-BUCKET\" , \"ownerIdentity\" : { \"principalId\" : \"A3I5XTEXAMAI3E\" }, \"arn\" : \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\" }, \"object\" : { \"key\" : \"b21b84d653bb07b05b1e6b33684dc11b\" , \"size\" : 1305107 , \"eTag\" : \"b21b84d653bb07b05b1e6b33684dc11b\" , \"sequencer\" : \"0C0F6F405D6ED209E1\" } } } ] } Response \u00b6 N/A Libraries \u00b6 Python - S3Event - Pip aws-lambda-powertools Php - S3Event - Composer bref/bref Typescript - S3Event - NPM @types/aws-lambda Rust - S3Event - Cargo aws_lambda_events Java - S3Event - Maven aws-lambda-java-events Lambda Handlers Python - on_s3_change - Pip chalice Ruby - s3_event - Gem jets Code examples using S3 bucket notifications Forwarding Emails Based on Content Language with Amazon Simple Email Service Docimentation \u00b6 Using AWS Lambda with Amazon S3","title":"S3"},{"location":"s3/#s3-event-notification","text":"Amazon S3 invokes your function asynchronously with an event that contains details about the object.","title":"S3 - Event Notification"},{"location":"s3/#input","text":"","title":"Input"},{"location":"s3/#generating-sample-events-via-sam-cli","text":"sam local generate-event s3 put sam local generate-event s3 delete","title":"Generating sample events via SAM CLI"},{"location":"s3/#example-event","text":"{ \"Records\" : [ { \"eventVersion\" : \"2.1\" , \"eventSource\" : \"aws:s3\" , \"awsRegion\" : \"us-east-2\" , \"eventTime\" : \"2019-09-03T19:37:27.192Z\" , \"eventName\" : \"ObjectCreated:Put\" , \"userIdentity\" : { \"principalId\" : \"AWS:AIDAINPONIXQXHT3IKHL2\" }, \"requestParameters\" : { \"sourceIPAddress\" : \"205.255.255.255\" }, \"responseElements\" : { \"x-amz-request-id\" : \"D82B88E5F771F645\" , \"x-amz-id-2\" : \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj5NeC6qMa0emYBDXOo6QBU0Wo=\" }, \"s3\" : { \"s3SchemaVersion\" : \"1.0\" , \"configurationId\" : \"828aa6fc-f7b5-4305-8584-487c791949c1\" , \"bucket\" : { \"name\" : \"DOC-EXAMPLE-BUCKET\" , \"ownerIdentity\" : { \"principalId\" : \"A3I5XTEXAMAI3E\" }, \"arn\" : \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\" }, \"object\" : { \"key\" : \"b21b84d653bb07b05b1e6b33684dc11b\" , \"size\" : 1305107 , \"eTag\" : \"b21b84d653bb07b05b1e6b33684dc11b\" , \"sequencer\" : \"0C0F6F405D6ED209E1\" } } } ] }","title":"Example event"},{"location":"s3/#response","text":"N/A","title":"Response"},{"location":"s3/#libraries","text":"Python - S3Event - Pip aws-lambda-powertools Php - S3Event - Composer bref/bref Typescript - S3Event - NPM @types/aws-lambda Rust - S3Event - Cargo aws_lambda_events Java - S3Event - Maven aws-lambda-java-events Lambda Handlers Python - on_s3_change - Pip chalice Ruby - s3_event - Gem jets Code examples using S3 bucket notifications Forwarding Emails Based on Content Language with Amazon Simple Email Service","title":"Libraries"},{"location":"s3/#docimentation","text":"Using AWS Lambda with Amazon S3","title":"Docimentation"},{"location":"secrets-manager/","text":"Secrets Manager \u00b6 Event-driven; synchronous invocation Input \u00b6 { \"Step\" : \"request.type\" , \"SecretId\" : \"string\" , \"ClientRequestToken\" : \"string\" } Response \u00b6 N/A Libraries \u00b6 Secrets Manager rotation function templates Reference Docs \u00b6 Using AWS Lambda with Secrets Manager How log rotation works","title":"Secrets Manager"},{"location":"secrets-manager/#secrets-manager","text":"Event-driven; synchronous invocation","title":"Secrets Manager"},{"location":"secrets-manager/#input","text":"{ \"Step\" : \"request.type\" , \"SecretId\" : \"string\" , \"ClientRequestToken\" : \"string\" }","title":"Input"},{"location":"secrets-manager/#response","text":"N/A","title":"Response"},{"location":"secrets-manager/#libraries","text":"Secrets Manager rotation function templates","title":"Libraries"},{"location":"secrets-manager/#reference-docs","text":"Using AWS Lambda with Secrets Manager How log rotation works","title":"Reference Docs"},{"location":"ses/","text":"AWS SES - Receiving emails \u00b6 The Lambda action calls your code through a Lambda function and, optionally, notifies you through Amazon SNS. Invocation type , the invocation type of the Lambda function. An invocation type of RequestResponse means that the execution of the function results in an immediate response. An invocation type of Event means that the function is invoked asynchronously. We recommend that you use Event invocation type unless synchronous execution is required for your use case.. Requirements The Lambda function that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email. The Amazon SNS topic that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email. Limits \u00b6 There is a 30-second timeout on RequestResponse invocations. Not available in all regions support receiving emails Region Name Email Receiving Endpoint US East (N. Virginia) inbound-smtp.us-east-1.amazonaws.com US West (Oregon) inbound-smtp.us-west-2.amazonaws.com Europe (Ireland) inbound-smtp.eu-west-1.amazonaws.com Soft Limits \u00b6 Resource Default quota Description Maximum message size (MB) 30 The maximum message size that can be sent to your identity and stored in an Amazon S3 bucket. Request \u00b6 Generating sample event \u00b6 Via AWS SAM CLI to can generate sample events # Get help via following command sam local generate-event ses email-receiving -h # Generate event do custom region sam local generate-event ses email-receiving --region us-west-1 --dns-suffix us-west-1.amazonaws.com Getting the correlation id \u00b6 JSON path to correlation id: Records[*].mail.messageId Request fields \u00b6 Records - array of Amazon SES events eventSource (String) The AWS service from which the SES event record originated. For SES, this is aws:ses eventVersion (String) The eventVersion key value contains a major and minor version in the form . . mail (Object) The mail object contains the email message. mail.timestamp (String) String that contains the time at which the email was received, in ISO8601 format. mail.source (String) String that contains the email address (specifically, the envelope MAIL FROM address) that the email was sent from. mail.messageId (String) String that contains the unique ID assigned to the email by Amazon SES. If the email was delivered to Amazon S3, the message ID is also the Amazon S3 object key that was used to write the message to your Amazon S3 bucket. mail.destination (List of strings) A complete list of all recipient addresses (including To: and CC: recipients) from the MIME headers of the incoming email. mail.headersTruncated (Boolean) String that specifies whether the headers were truncated in the notification, which will happen if the headers are larger than 10 KB. Possible values are true and false. mail.headers (Object) A list of Amazon SES headers and your custom headers. Each header in the list has a name field and a value field mail.commonHeaders (Object) A list of headers common to all emails. Each header in the list is composed of a name and a value. commonHeaders.returnPath (String) The values in the Return-Path header of the email. commonHeaders.from (String) The values in the From header of the email. commonHeaders.date (String) The date and time when Amazon SES received the message. commonHeaders.to (List of strings) The values in the To header of the email. commonHeaders.messageId (String) The ID of the original message. commonHeaders.subject (String) The value of the Subject header for the email. commonHeaders.cc (Optional, List of strings) The values in the CC header of the email. commonHeaders.bcc (Optional, List of strings) The values in the BCC header of the email. commonHeaders.sender (Optional, list of strings) The values in the Sender header of the email. commonHeaders.replyTo (Optional, list of strings) The values in the replyTo header of the email. receipt (Object) The receipt object contains information about the email message. receipt.timestamp (String) String that specifies the date and time at which the action was triggered, in ISO 8601 format. receipt.processingTimeMillis (Integer) String that specifies the period, in milliseconds, from the time Amazon SES received the message to the time it triggered the action. receipt.recipients (List of strings) A list of recipients (specifically, the envelope RCPT TO addresses) that were matched by the active receipt rule. The addresses listed here may differ from those listed by the destination field in the mail object. receipt.spamVerdict (Object) Object that indicates whether the message is spam. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.virusVerdict (Object) Object that indicates whether the message contains a virus. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.spfVerdict (Object) Object that indicates whether the Sender Policy Framework (SPF) check passed. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dkimVerdict (Object) Object that indicates whether the DomainKeys Identified Mail (DKIM) check passed Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dmarcVerdict (Object) Object that indicates whether the Domain-based Message Authentication, Reporting & Conformance (DMARC) check passed. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dmarcPolicy (String) ndicates the Domain-based Message Authentication, Reporting & Conformance (DMARC) settings for the sending domain. This field only appears if the message fails DMARC authentication. Possible values for this field are: none , quarantine , reject receipt.action (Object) Object that encapsulates information about the action that was executed. receipt.action.type (String) The type of action that was executed. Possible values are S3 , SNS , Bounce , Lambda , Stop , and WorkMail receipt.action.topicArn (Optional, String) The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. You can find the ARN of a topic by using the ListTopics operation in Amazon SNS. receipt.action.functionArn (String) String that contains the ARN of the Lambda function that was triggered. Present only for the Lambda action type. Example event \u00b6 Example Amazon SES message event { \"Records\" : [ { \"eventVersion\" : \"1.0\" , \"ses\" : { \"mail\" : { \"commonHeaders\" : { \"from\" : [ \"Amazon Web Services <aws@amazon.com>\" ], \"to\" : [ \"lambda@amazon.com\" ], \"returnPath\" : \"aws@amazon.com\" , \"messageId\" : \"<CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com>\" , \"date\" : \"Mon, 5 Dec 2016 18:40:08 -0800\" , \"subject\" : \"Test Subject\" }, \"source\" : \"aws@amazon.com\" , \"timestamp\" : \"1970-01-01T00:00:00.123Z\" , \"destination\" : [ \"lambda@amazon.com\" ], \"headers\" : [ { \"name\" : \"Return-Path\" , \"value\" : \"<aws@amazon.com>\" }, { \"name\" : \"Received\" , \"value\" : \"from mx.amazon.com (mx.amazon.com [127.0.0.1]) by inbound-smtp.us-east-1.amazonaws.com with SMTP id 6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1 for lambda@amazon.com; Tue, 06 Dec 2016 02:40:10 +0000 (UTC)\" }, { \"name\" : \"DKIM-Signature\" , \"value\" : \"v=1; a=rsa-sha256; c=relaxed/relaxed; d=iatn.net; s=amazon; h=mime-version:from:date:message-id:subject:to; bh=chlJxa/vZ11+0O9lf4tKDM/CcPjup2nhhdITm+hSf3c=; b=SsoNPK0wX7umtWnw8pln3YSib+E09XO99d704QdSc1TR1HxM0OTti/UaFxVD4e5b0+okBqo3rgVeWgNZ0sWZEUhBaZwSL3kTd/nHkcPexeV0XZqEgms1vmbg75F6vlz9igWflO3GbXyTRBNMM0gUXKU/686hpVW6aryEIfM/rLY=\" }, { \"name\" : \"MIME-Version\" , \"value\" : \"1.0\" }, { \"name\" : \"From\" , \"value\" : \"Amazon Web Services <aws@amazon.com>\" }, { \"name\" : \"Date\" , \"value\" : \"Mon, 5 Dec 2016 18:40:08 -0800\" }, { \"name\" : \"Message-ID\" , \"value\" : \"<CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com>\" }, { \"name\" : \"Subject\" , \"value\" : \"Test Subject\" }, { \"name\" : \"To\" , \"value\" : \"lambda@amazon.com\" }, { \"name\" : \"Content-Type\" , \"value\" : \"multipart/alternative; boundary=94eb2c0742269658b10542f452a9\" } ], \"headersTruncated\" : false , \"messageId\" : \"6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1\" }, \"receipt\" : { \"recipients\" : [ \"lambda@amazon.com\" ], \"timestamp\" : \"1970-01-01T00:00:00.123Z\" , \"spamVerdict\" : { \"status\" : \"PASS\" }, \"dkimVerdict\" : { \"status\" : \"PASS\" }, \"dmarcVerdict\" : { \"status\" : \"PASS\" }, \"dmarcPolicy\" : \"reject\" , \"processingTimeMillis\" : 574 , \"action\" : { \"type\" : \"Lambda\" , \"invocationType\" : \"Event\" , \"functionArn\" : \"arn:aws:lambda:us-east-1:000000000000:function:my-ses-lambda-function\" }, \"spfVerdict\" : { \"status\" : \"PASS\" }, \"virusVerdict\" : { \"status\" : \"PASS\" } } }, \"eventSource\" : \"aws:ses\" } ] } Response \u00b6 Response when doing a synchronous RequestResponse invocations must be in the follow format disposition (String) STOP_RULE - No further actions in the current receipt rule will be processed, but further receipt rules can be processed. STOP_RULE_SET - No further actions or receipt rules will be processed. CONTINUE - This means that further actions and receipt rules can be processed. { \"disposition\" : \"STOP_RULE_SET\" } Libraries \u00b6 Typing and utility class Typescript - SESEvent - NPM package: @types/aws-lambda Go - SimpleEmailEvent - github.com/aws/aws-lambda-go/events Python - SESEvent - PIP package: aws-lambda-powertools DotNet - SimpleEmailEvent - NuGet package: Amazon.Lambda.SimpleEmailEvents Rust - SimpleEmailEvent Full solutions NodeJS - AWS Lambda SES Email Forwarder - A Node.js script for AWS Lambda that uses the inbound/outbound capabilities of AWS Simple Email Service (SES) to run a \"serverless\" email forwarding service. Code examples Serverless Framework - node - email receiving Example \u00b6 Example use case of filtering incoming emails by subject and forwarding to a different email address. CDK infrastucture code setting up the receipt rules CDK code for receipt rules ReceiptRuleSet ( this , \"RecipientRuleSet\" , ReceiptRuleSetProps . builder () . receiptRuleSetName ( \"RevieveReceipt- $ namespace \" ) . dropSpam ( true ) . rules ( listOf ( ReceiptRuleOptions . builder () // List of recipients to forward . recipients ( listOf ( recipientEmail )) . scanEnabled ( true ) . actions ( listOf ( // Filter out emails by subject line Lambda ( LambdaProps . builder () . function ( subjectFilterLambda ) . invocationType ( LambdaInvocationType . REQUEST_RESPONSE ) . build () ), // Save email to S3 S3 ( S3Props . builder () . bucket ( emailBucket ) . objectKeyPrefix ( \"ar\" ) . build () ), // Forward email to recipients Lambda ( LambdaProps . builder () . function ( receiveLambda ) . invocationType ( LambdaInvocationType . EVENT ) . build () ) ) ) . build () ) ) . build () ) Example subject filtering lambda subjectFilterLambda.py import os from aws_lambda_powertools import Tracer , Logger tracer = Tracer ( service = \"example-ses-filter\" ) logger = Logger ( service = \"example-ses-filter\" ) allow_mail_source = os . environ [ \"MAIL_SOURCE\" ] allow_subjects = os . environ [ \"MAIL_SUBJECTS\" ] . split ( \";\" ) @tracer . capture_lambda_handler @logger . inject_lambda_context def lambda_handler ( event : dict , _ ) -> dict : \"\"\"Simple lambda that filters out emails that does not match `MAIL_SOURCE` and `MAIL_SUBJECTS`\"\"\" records = event . get ( \"Records\" ) if records is None or len ( records ) == 0 : return { \"disposition\" : \"STOP_RULE_SET\" } record = records [ 0 ] mail = record [ \"ses\" ][ \"mail\" ] mail_source : str = mail [ \"source\" ] if mail_source != allow_mail_source : logger . info ( \"SKIP(source not handled) mail_source: %s \" , mail_source ) return { \"disposition\" : \"STOP_RULE_SET\" } mail_subject : str = mail [ \"commonHeaders\" ][ \"subject\" ] tracer . put_metadata ( key = \"mail_subject\" , value = mail_subject ) if any ( allow_subject . strip () in mail_subject for allow_subject in allow_subjects ): return { \"disposition\" : \"CONTINUE\" } logger . info ( \"SKIP(subject not handled) mail_subject: %s \" , mail_subject ) return { \"disposition\" : \"STOP_RULE_SET\" } Documentation \u00b6 Using AWS Lambda with Amazon SES SES - Invoke Lambda function action Blog - Replace traditional email mailbox polling with real-time reads using Amazon SES and Lambda Blog - Forward Incoming Email to an External Destination Blog - Receive and Process Incoming Email with Amazon SES","title":"SES"},{"location":"ses/#aws-ses-receiving-emails","text":"The Lambda action calls your code through a Lambda function and, optionally, notifies you through Amazon SNS. Invocation type , the invocation type of the Lambda function. An invocation type of RequestResponse means that the execution of the function results in an immediate response. An invocation type of Event means that the function is invoked asynchronously. We recommend that you use Event invocation type unless synchronous execution is required for your use case.. Requirements The Lambda function that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email. The Amazon SNS topic that you choose must be in the same AWS Region as the Amazon SES endpoint that you use to receive email.","title":"AWS SES - Receiving emails"},{"location":"ses/#limits","text":"There is a 30-second timeout on RequestResponse invocations. Not available in all regions support receiving emails Region Name Email Receiving Endpoint US East (N. Virginia) inbound-smtp.us-east-1.amazonaws.com US West (Oregon) inbound-smtp.us-west-2.amazonaws.com Europe (Ireland) inbound-smtp.eu-west-1.amazonaws.com","title":"Limits"},{"location":"ses/#soft-limits","text":"Resource Default quota Description Maximum message size (MB) 30 The maximum message size that can be sent to your identity and stored in an Amazon S3 bucket.","title":"Soft Limits"},{"location":"ses/#request","text":"","title":"Request"},{"location":"ses/#generating-sample-event","text":"Via AWS SAM CLI to can generate sample events # Get help via following command sam local generate-event ses email-receiving -h # Generate event do custom region sam local generate-event ses email-receiving --region us-west-1 --dns-suffix us-west-1.amazonaws.com","title":"Generating sample event"},{"location":"ses/#getting-the-correlation-id","text":"JSON path to correlation id: Records[*].mail.messageId","title":"Getting the correlation id"},{"location":"ses/#request-fields","text":"Records - array of Amazon SES events eventSource (String) The AWS service from which the SES event record originated. For SES, this is aws:ses eventVersion (String) The eventVersion key value contains a major and minor version in the form . . mail (Object) The mail object contains the email message. mail.timestamp (String) String that contains the time at which the email was received, in ISO8601 format. mail.source (String) String that contains the email address (specifically, the envelope MAIL FROM address) that the email was sent from. mail.messageId (String) String that contains the unique ID assigned to the email by Amazon SES. If the email was delivered to Amazon S3, the message ID is also the Amazon S3 object key that was used to write the message to your Amazon S3 bucket. mail.destination (List of strings) A complete list of all recipient addresses (including To: and CC: recipients) from the MIME headers of the incoming email. mail.headersTruncated (Boolean) String that specifies whether the headers were truncated in the notification, which will happen if the headers are larger than 10 KB. Possible values are true and false. mail.headers (Object) A list of Amazon SES headers and your custom headers. Each header in the list has a name field and a value field mail.commonHeaders (Object) A list of headers common to all emails. Each header in the list is composed of a name and a value. commonHeaders.returnPath (String) The values in the Return-Path header of the email. commonHeaders.from (String) The values in the From header of the email. commonHeaders.date (String) The date and time when Amazon SES received the message. commonHeaders.to (List of strings) The values in the To header of the email. commonHeaders.messageId (String) The ID of the original message. commonHeaders.subject (String) The value of the Subject header for the email. commonHeaders.cc (Optional, List of strings) The values in the CC header of the email. commonHeaders.bcc (Optional, List of strings) The values in the BCC header of the email. commonHeaders.sender (Optional, list of strings) The values in the Sender header of the email. commonHeaders.replyTo (Optional, list of strings) The values in the replyTo header of the email. receipt (Object) The receipt object contains information about the email message. receipt.timestamp (String) String that specifies the date and time at which the action was triggered, in ISO 8601 format. receipt.processingTimeMillis (Integer) String that specifies the period, in milliseconds, from the time Amazon SES received the message to the time it triggered the action. receipt.recipients (List of strings) A list of recipients (specifically, the envelope RCPT TO addresses) that were matched by the active receipt rule. The addresses listed here may differ from those listed by the destination field in the mail object. receipt.spamVerdict (Object) Object that indicates whether the message is spam. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.virusVerdict (Object) Object that indicates whether the message contains a virus. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.spfVerdict (Object) Object that indicates whether the Sender Policy Framework (SPF) check passed. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dkimVerdict (Object) Object that indicates whether the DomainKeys Identified Mail (DKIM) check passed Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dmarcVerdict (Object) Object that indicates whether the Domain-based Message Authentication, Reporting & Conformance (DMARC) check passed. Possible values: PASS , FAIL , GRAY , PROCESSING_FAILED , DISABLED receipt.dmarcPolicy (String) ndicates the Domain-based Message Authentication, Reporting & Conformance (DMARC) settings for the sending domain. This field only appears if the message fails DMARC authentication. Possible values for this field are: none , quarantine , reject receipt.action (Object) Object that encapsulates information about the action that was executed. receipt.action.type (String) The type of action that was executed. Possible values are S3 , SNS , Bounce , Lambda , Stop , and WorkMail receipt.action.topicArn (Optional, String) The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is executed. You can find the ARN of a topic by using the ListTopics operation in Amazon SNS. receipt.action.functionArn (String) String that contains the ARN of the Lambda function that was triggered. Present only for the Lambda action type.","title":"Request fields"},{"location":"ses/#example-event","text":"Example Amazon SES message event { \"Records\" : [ { \"eventVersion\" : \"1.0\" , \"ses\" : { \"mail\" : { \"commonHeaders\" : { \"from\" : [ \"Amazon Web Services <aws@amazon.com>\" ], \"to\" : [ \"lambda@amazon.com\" ], \"returnPath\" : \"aws@amazon.com\" , \"messageId\" : \"<CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com>\" , \"date\" : \"Mon, 5 Dec 2016 18:40:08 -0800\" , \"subject\" : \"Test Subject\" }, \"source\" : \"aws@amazon.com\" , \"timestamp\" : \"1970-01-01T00:00:00.123Z\" , \"destination\" : [ \"lambda@amazon.com\" ], \"headers\" : [ { \"name\" : \"Return-Path\" , \"value\" : \"<aws@amazon.com>\" }, { \"name\" : \"Received\" , \"value\" : \"from mx.amazon.com (mx.amazon.com [127.0.0.1]) by inbound-smtp.us-east-1.amazonaws.com with SMTP id 6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1 for lambda@amazon.com; Tue, 06 Dec 2016 02:40:10 +0000 (UTC)\" }, { \"name\" : \"DKIM-Signature\" , \"value\" : \"v=1; a=rsa-sha256; c=relaxed/relaxed; d=iatn.net; s=amazon; h=mime-version:from:date:message-id:subject:to; bh=chlJxa/vZ11+0O9lf4tKDM/CcPjup2nhhdITm+hSf3c=; b=SsoNPK0wX7umtWnw8pln3YSib+E09XO99d704QdSc1TR1HxM0OTti/UaFxVD4e5b0+okBqo3rgVeWgNZ0sWZEUhBaZwSL3kTd/nHkcPexeV0XZqEgms1vmbg75F6vlz9igWflO3GbXyTRBNMM0gUXKU/686hpVW6aryEIfM/rLY=\" }, { \"name\" : \"MIME-Version\" , \"value\" : \"1.0\" }, { \"name\" : \"From\" , \"value\" : \"Amazon Web Services <aws@amazon.com>\" }, { \"name\" : \"Date\" , \"value\" : \"Mon, 5 Dec 2016 18:40:08 -0800\" }, { \"name\" : \"Message-ID\" , \"value\" : \"<CAEddw6POFV_On91m+ZoL_SN8B_M2goDe_Ni355owhc7QSjPQSQ@amazon.com>\" }, { \"name\" : \"Subject\" , \"value\" : \"Test Subject\" }, { \"name\" : \"To\" , \"value\" : \"lambda@amazon.com\" }, { \"name\" : \"Content-Type\" , \"value\" : \"multipart/alternative; boundary=94eb2c0742269658b10542f452a9\" } ], \"headersTruncated\" : false , \"messageId\" : \"6n4thuhcbhpfiuf25gshf70rss364fuejrvmqko1\" }, \"receipt\" : { \"recipients\" : [ \"lambda@amazon.com\" ], \"timestamp\" : \"1970-01-01T00:00:00.123Z\" , \"spamVerdict\" : { \"status\" : \"PASS\" }, \"dkimVerdict\" : { \"status\" : \"PASS\" }, \"dmarcVerdict\" : { \"status\" : \"PASS\" }, \"dmarcPolicy\" : \"reject\" , \"processingTimeMillis\" : 574 , \"action\" : { \"type\" : \"Lambda\" , \"invocationType\" : \"Event\" , \"functionArn\" : \"arn:aws:lambda:us-east-1:000000000000:function:my-ses-lambda-function\" }, \"spfVerdict\" : { \"status\" : \"PASS\" }, \"virusVerdict\" : { \"status\" : \"PASS\" } } }, \"eventSource\" : \"aws:ses\" } ] }","title":"Example event"},{"location":"ses/#response","text":"Response when doing a synchronous RequestResponse invocations must be in the follow format disposition (String) STOP_RULE - No further actions in the current receipt rule will be processed, but further receipt rules can be processed. STOP_RULE_SET - No further actions or receipt rules will be processed. CONTINUE - This means that further actions and receipt rules can be processed. { \"disposition\" : \"STOP_RULE_SET\" }","title":"Response"},{"location":"ses/#libraries","text":"Typing and utility class Typescript - SESEvent - NPM package: @types/aws-lambda Go - SimpleEmailEvent - github.com/aws/aws-lambda-go/events Python - SESEvent - PIP package: aws-lambda-powertools DotNet - SimpleEmailEvent - NuGet package: Amazon.Lambda.SimpleEmailEvents Rust - SimpleEmailEvent Full solutions NodeJS - AWS Lambda SES Email Forwarder - A Node.js script for AWS Lambda that uses the inbound/outbound capabilities of AWS Simple Email Service (SES) to run a \"serverless\" email forwarding service. Code examples Serverless Framework - node - email receiving","title":"Libraries"},{"location":"ses/#example","text":"Example use case of filtering incoming emails by subject and forwarding to a different email address. CDK infrastucture code setting up the receipt rules CDK code for receipt rules ReceiptRuleSet ( this , \"RecipientRuleSet\" , ReceiptRuleSetProps . builder () . receiptRuleSetName ( \"RevieveReceipt- $ namespace \" ) . dropSpam ( true ) . rules ( listOf ( ReceiptRuleOptions . builder () // List of recipients to forward . recipients ( listOf ( recipientEmail )) . scanEnabled ( true ) . actions ( listOf ( // Filter out emails by subject line Lambda ( LambdaProps . builder () . function ( subjectFilterLambda ) . invocationType ( LambdaInvocationType . REQUEST_RESPONSE ) . build () ), // Save email to S3 S3 ( S3Props . builder () . bucket ( emailBucket ) . objectKeyPrefix ( \"ar\" ) . build () ), // Forward email to recipients Lambda ( LambdaProps . builder () . function ( receiveLambda ) . invocationType ( LambdaInvocationType . EVENT ) . build () ) ) ) . build () ) ) . build () ) Example subject filtering lambda subjectFilterLambda.py import os from aws_lambda_powertools import Tracer , Logger tracer = Tracer ( service = \"example-ses-filter\" ) logger = Logger ( service = \"example-ses-filter\" ) allow_mail_source = os . environ [ \"MAIL_SOURCE\" ] allow_subjects = os . environ [ \"MAIL_SUBJECTS\" ] . split ( \";\" ) @tracer . capture_lambda_handler @logger . inject_lambda_context def lambda_handler ( event : dict , _ ) -> dict : \"\"\"Simple lambda that filters out emails that does not match `MAIL_SOURCE` and `MAIL_SUBJECTS`\"\"\" records = event . get ( \"Records\" ) if records is None or len ( records ) == 0 : return { \"disposition\" : \"STOP_RULE_SET\" } record = records [ 0 ] mail = record [ \"ses\" ][ \"mail\" ] mail_source : str = mail [ \"source\" ] if mail_source != allow_mail_source : logger . info ( \"SKIP(source not handled) mail_source: %s \" , mail_source ) return { \"disposition\" : \"STOP_RULE_SET\" } mail_subject : str = mail [ \"commonHeaders\" ][ \"subject\" ] tracer . put_metadata ( key = \"mail_subject\" , value = mail_subject ) if any ( allow_subject . strip () in mail_subject for allow_subject in allow_subjects ): return { \"disposition\" : \"CONTINUE\" } logger . info ( \"SKIP(subject not handled) mail_subject: %s \" , mail_subject ) return { \"disposition\" : \"STOP_RULE_SET\" }","title":"Example"},{"location":"ses/#documentation","text":"Using AWS Lambda with Amazon SES SES - Invoke Lambda function action Blog - Replace traditional email mailbox polling with real-time reads using Amazon SES and Lambda Blog - Forward Incoming Email to an External Destination Blog - Receive and Process Incoming Email with Amazon SES","title":"Documentation"},{"location":"sns/","text":"SNS \u00b6 Amazon SNS invokes your function asynchronously with an event that contains a message and metadata. Input \u00b6 Example Amazon SNS message event { \"Records\" : [ { \"EventVersion\" : \"1.0\" , \"EventSubscriptionArn\" : \"arn:aws:sns:us-east-2:123456789012:sns-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\" , \"EventSource\" : \"aws:sns\" , \"Sns\" : { \"SignatureVersion\" : \"1\" , \"Timestamp\" : \"2019-01-02T12:45:07.000Z\" , \"Signature\" : \"tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r==\" , \"SigningCertUrl\" : \"https://sns.us-east-2.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem\" , \"MessageId\" : \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\" , \"Message\" : \"Hello from SNS!\" , \"MessageAttributes\" : { \"Test\" : { \"Type\" : \"String\" , \"Value\" : \"TestString\" }, \"TestBinary\" : { \"Type\" : \"Binary\" , \"Value\" : \"TestBinary\" } }, \"Type\" : \"Notification\" , \"UnsubscribeUrl\" : \"https://sns.us-east-2.amazonaws.com/?Action=Unsubscribe&amp;SubscriptionArn=arn:aws:sns:us-east-2:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\" , \"TopicArn\" : \"arn:aws:sns:us-east-2:123456789012:sns-lambda\" , \"Subject\" : \"TestInvoke\" } } ] } Generating sample events via SAM CLI \u00b6 sam local generate-event sns notification Response \u00b6 N/A Libraries \u00b6 Input types for Amazon SNS events Java SNSEvent DotNet - SNSEvent Go - SNS Python - SNSEvent Php - SnsEvent - Composer bref/bref Full handler and infrastructure code solutions Ruby - sns_event - Gem jets Python - on_sns_message - pip chalice Reference Docs \u00b6 Using AWS Lambda with Amazon SNS","title":"SNS"},{"location":"sns/#sns","text":"Amazon SNS invokes your function asynchronously with an event that contains a message and metadata.","title":"SNS"},{"location":"sns/#input","text":"Example Amazon SNS message event { \"Records\" : [ { \"EventVersion\" : \"1.0\" , \"EventSubscriptionArn\" : \"arn:aws:sns:us-east-2:123456789012:sns-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\" , \"EventSource\" : \"aws:sns\" , \"Sns\" : { \"SignatureVersion\" : \"1\" , \"Timestamp\" : \"2019-01-02T12:45:07.000Z\" , \"Signature\" : \"tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r==\" , \"SigningCertUrl\" : \"https://sns.us-east-2.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem\" , \"MessageId\" : \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\" , \"Message\" : \"Hello from SNS!\" , \"MessageAttributes\" : { \"Test\" : { \"Type\" : \"String\" , \"Value\" : \"TestString\" }, \"TestBinary\" : { \"Type\" : \"Binary\" , \"Value\" : \"TestBinary\" } }, \"Type\" : \"Notification\" , \"UnsubscribeUrl\" : \"https://sns.us-east-2.amazonaws.com/?Action=Unsubscribe&amp;SubscriptionArn=arn:aws:sns:us-east-2:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\" , \"TopicArn\" : \"arn:aws:sns:us-east-2:123456789012:sns-lambda\" , \"Subject\" : \"TestInvoke\" } } ] }","title":"Input"},{"location":"sns/#generating-sample-events-via-sam-cli","text":"sam local generate-event sns notification","title":"Generating sample events via SAM CLI"},{"location":"sns/#response","text":"N/A","title":"Response"},{"location":"sns/#libraries","text":"Input types for Amazon SNS events Java SNSEvent DotNet - SNSEvent Go - SNS Python - SNSEvent Php - SnsEvent - Composer bref/bref Full handler and infrastructure code solutions Ruby - sns_event - Gem jets Python - on_sns_message - pip chalice","title":"Libraries"},{"location":"sns/#reference-docs","text":"Using AWS Lambda with Amazon SNS","title":"Reference Docs"},{"location":"sqs/","text":"SQS \u00b6 Lambda polls the queue and invokes your Lambda function synchronously with an event that contains queue messages. By default, Lambda polls up to 10 messages in your queue at once and sends that batch to your function. Input \u00b6 Input fields \u00b6 Records - An array of records. messageId (String) A unique identifier for the message. A messageId is considered unique across all AWS accounts for an extended period of time. receiptHandle (String) An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message. body (String) The message's contents (not URL-encoded). attributes (Object) A map of the attributes requested in ReceiveMessage to their respective values. AWSTraceHeader (Optional, String) - Returns the AWS X-Ray trace header string. ApproximateReceiveCount (String) - Returns the number of times a message has been received across all queues but not deleted. SentTimestamp (String) - Returns the time the message was sent to the queue (epoch time in milliseconds). SenderId (String) - For an IAM user, returns the IAM user ID, For an IAM role, returns the IAM role ID ApproximateFirstReceiveTimestamp (String) - Returns the time the message was first received from the queue (epoch time in milliseconds). SequenceNumber (Optional, String) - The large, non-consecutive number that Amazon SQS assigns to each message. MessageGroupId (Optional, String) - The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group (however, messages that belong to different message groups might be processed out of order). MessageDeduplicationId (Optional, String) - The token used for deduplication of sent messages. If a message with a particular message deduplication ID is sent successfully, any messages sent with the same message deduplication ID are accepted successfully but aren't delivered during the 5-minute deduplication interval. messageAttributes (Object) Each message attribute consists of a Name, Type, and Value. md5OfBody (String) An MD5 digest of the non-URL-encoded message body string. eventSource (String) The AWS service from which the SQS record originated. For SQS, this is aws:sqs eventSourceARN (String) The Amazon Resource Name (ARN) of the event sourc awsRegion (String) aws region eg: us-east-1 Generating sample events via SAM CLI \u00b6 sam local generate-event sqs receive-message Example event \u00b6 Example Amazon SQS message event (standard queue) { \"Records\" : [ { \"messageId\" : \"059f36b4-87a3-44ab-83d2-661975830a7d\" , \"receiptHandle\" : \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1545082649183\" , \"SenderId\" : \"AIDAIENQZJOLO23YVJ4VO\" , \"ApproximateFirstReceiveTimestamp\" : \"1545082649185\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:my-queue\" , \"awsRegion\" : \"us-east-2\" }, { \"messageId\" : \"2e1424d4-f796-459a-8184-9c92662be6da\" , \"receiptHandle\" : \"AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1545082650636\" , \"SenderId\" : \"AIDAIENQZJOLO23YVJ4VO\" , \"ApproximateFirstReceiveTimestamp\" : \"1545082650649\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:my-queue\" , \"awsRegion\" : \"us-east-2\" } ] } Example Amazon SQS message event (FIFO queue) { \"Records\" : [ { \"messageId\" : \"11d6ee51-4cc7-4302-9e22-7cd8afdaadf5\" , \"receiptHandle\" : \"AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1573251510774\" , \"SequenceNumber\" : \"18849496460467696128\" , \"MessageGroupId\" : \"1\" , \"SenderId\" : \"AIDAIO23YVJENQZJOL4VO\" , \"MessageDeduplicationId\" : \"1\" , \"ApproximateFirstReceiveTimestamp\" : \"1573251510774\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:fifo.fifo\" , \"awsRegion\" : \"us-east-2\" } ] } Response \u00b6 Success and failure conditions Lambda treats a batch as a complete success if your function returns any of the following: An empty batchItemFailures list A null batchItemFailures list An empty EventResponse A null EventResponse Lambda treats a batch as a complete failure if your function returns any of the following: An invalid JSON response An empty string itemIdentifier A null itemIdentifier An itemIdentifier with a bad key name An itemIdentifier value with a message ID that doesn't exist Example of partial failures { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"244fc6b4-87a3-44ab-83d2-361172410c3a\" } ] } Libraries \u00b6 Typings in different languages SQSEvent - Python - PIP aws-lambda-powertools SQSEvent - Go - Go github.com/aws/aws-lambda-go/events SqsEvent - Php - Composer bref/bref SQSEvent - Java SQSEvent - DotNet SQSEvent - Typescript Full event handler SQS Batch Handler - Python - PIP aws-lambda-powertools SQS Events - Ruby - GEM jets on_sqs_message - Python - PIP chalice Code Examples \u00b6 Example S3 batch handler using AWS Lambda Powertools (Python) import json from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.utilities.batch import BatchProcessor , EventType , batch_processor from aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord from aws_lambda_powertools.utilities.typing import LambdaContext processor = BatchProcessor ( event_type = EventType . SQS ) tracer = Tracer () logger = Logger () @tracer . capture_method def record_handler ( record : SQSRecord ): payload : str = record . body if payload : item : dict = json . loads ( payload ) ... @logger . inject_lambda_context @tracer . capture_lambda_handler @batch_processor ( record_handler = record_handler , processor = processor ) def lambda_handler ( event , context : LambdaContext ): return processor . response () Reference Docs \u00b6 Using Lambda with Amazon SQS Tutorial: Using Lambda with Amazon SQS","title":"SQS"},{"location":"sqs/#sqs","text":"Lambda polls the queue and invokes your Lambda function synchronously with an event that contains queue messages. By default, Lambda polls up to 10 messages in your queue at once and sends that batch to your function.","title":"SQS"},{"location":"sqs/#input","text":"","title":"Input"},{"location":"sqs/#input-fields","text":"Records - An array of records. messageId (String) A unique identifier for the message. A messageId is considered unique across all AWS accounts for an extended period of time. receiptHandle (String) An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message. body (String) The message's contents (not URL-encoded). attributes (Object) A map of the attributes requested in ReceiveMessage to their respective values. AWSTraceHeader (Optional, String) - Returns the AWS X-Ray trace header string. ApproximateReceiveCount (String) - Returns the number of times a message has been received across all queues but not deleted. SentTimestamp (String) - Returns the time the message was sent to the queue (epoch time in milliseconds). SenderId (String) - For an IAM user, returns the IAM user ID, For an IAM role, returns the IAM role ID ApproximateFirstReceiveTimestamp (String) - Returns the time the message was first received from the queue (epoch time in milliseconds). SequenceNumber (Optional, String) - The large, non-consecutive number that Amazon SQS assigns to each message. MessageGroupId (Optional, String) - The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group (however, messages that belong to different message groups might be processed out of order). MessageDeduplicationId (Optional, String) - The token used for deduplication of sent messages. If a message with a particular message deduplication ID is sent successfully, any messages sent with the same message deduplication ID are accepted successfully but aren't delivered during the 5-minute deduplication interval. messageAttributes (Object) Each message attribute consists of a Name, Type, and Value. md5OfBody (String) An MD5 digest of the non-URL-encoded message body string. eventSource (String) The AWS service from which the SQS record originated. For SQS, this is aws:sqs eventSourceARN (String) The Amazon Resource Name (ARN) of the event sourc awsRegion (String) aws region eg: us-east-1","title":"Input fields"},{"location":"sqs/#generating-sample-events-via-sam-cli","text":"sam local generate-event sqs receive-message","title":"Generating sample events via SAM CLI"},{"location":"sqs/#example-event","text":"Example Amazon SQS message event (standard queue) { \"Records\" : [ { \"messageId\" : \"059f36b4-87a3-44ab-83d2-661975830a7d\" , \"receiptHandle\" : \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1545082649183\" , \"SenderId\" : \"AIDAIENQZJOLO23YVJ4VO\" , \"ApproximateFirstReceiveTimestamp\" : \"1545082649185\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:my-queue\" , \"awsRegion\" : \"us-east-2\" }, { \"messageId\" : \"2e1424d4-f796-459a-8184-9c92662be6da\" , \"receiptHandle\" : \"AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1545082650636\" , \"SenderId\" : \"AIDAIENQZJOLO23YVJ4VO\" , \"ApproximateFirstReceiveTimestamp\" : \"1545082650649\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:my-queue\" , \"awsRegion\" : \"us-east-2\" } ] } Example Amazon SQS message event (FIFO queue) { \"Records\" : [ { \"messageId\" : \"11d6ee51-4cc7-4302-9e22-7cd8afdaadf5\" , \"receiptHandle\" : \"AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...\" , \"body\" : \"Test message.\" , \"attributes\" : { \"ApproximateReceiveCount\" : \"1\" , \"SentTimestamp\" : \"1573251510774\" , \"SequenceNumber\" : \"18849496460467696128\" , \"MessageGroupId\" : \"1\" , \"SenderId\" : \"AIDAIO23YVJENQZJOL4VO\" , \"MessageDeduplicationId\" : \"1\" , \"ApproximateFirstReceiveTimestamp\" : \"1573251510774\" }, \"messageAttributes\" : {}, \"md5OfBody\" : \"e4e68fb7bd0e697a0ae8f1bb342846b3\" , \"eventSource\" : \"aws:sqs\" , \"eventSourceARN\" : \"arn:aws:sqs:us-east-2:123456789012:fifo.fifo\" , \"awsRegion\" : \"us-east-2\" } ] }","title":"Example event"},{"location":"sqs/#response","text":"Success and failure conditions Lambda treats a batch as a complete success if your function returns any of the following: An empty batchItemFailures list A null batchItemFailures list An empty EventResponse A null EventResponse Lambda treats a batch as a complete failure if your function returns any of the following: An invalid JSON response An empty string itemIdentifier A null itemIdentifier An itemIdentifier with a bad key name An itemIdentifier value with a message ID that doesn't exist Example of partial failures { \"batchItemFailures\" : [ { \"itemIdentifier\" : \"244fc6b4-87a3-44ab-83d2-361172410c3a\" } ] }","title":"Response"},{"location":"sqs/#libraries","text":"Typings in different languages SQSEvent - Python - PIP aws-lambda-powertools SQSEvent - Go - Go github.com/aws/aws-lambda-go/events SqsEvent - Php - Composer bref/bref SQSEvent - Java SQSEvent - DotNet SQSEvent - Typescript Full event handler SQS Batch Handler - Python - PIP aws-lambda-powertools SQS Events - Ruby - GEM jets on_sqs_message - Python - PIP chalice","title":"Libraries"},{"location":"sqs/#code-examples","text":"Example S3 batch handler using AWS Lambda Powertools (Python) import json from aws_lambda_powertools import Logger , Tracer from aws_lambda_powertools.utilities.batch import BatchProcessor , EventType , batch_processor from aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord from aws_lambda_powertools.utilities.typing import LambdaContext processor = BatchProcessor ( event_type = EventType . SQS ) tracer = Tracer () logger = Logger () @tracer . capture_method def record_handler ( record : SQSRecord ): payload : str = record . body if payload : item : dict = json . loads ( payload ) ... @logger . inject_lambda_context @tracer . capture_lambda_handler @batch_processor ( record_handler = record_handler , processor = processor ) def lambda_handler ( event , context : LambdaContext ): return processor . response ()","title":"Code Examples"},{"location":"sqs/#reference-docs","text":"Using Lambda with Amazon SQS Tutorial: Using Lambda with Amazon SQS","title":"Reference Docs"},{"location":"work-mail/","text":"Amazon WorkMail \u00b6 Can be configured to invoke your function synchrously or asynchrously. Limits \u00b6 Payload size limit 128 KB, before being trancated Input \u00b6 Input fields \u00b6 summaryVersion (String) AWS WorkMail Message Summary Version mailFrom (Object) Mail from email address recipients (List) List of all of the email recipients sender (Object) Sender email address subject (String) Email subject (Truncated to first 256 chars)\" messageId (String) Message id for retrieval using workmail flow API invocationId (String) Id of this lambda invocation. Useful for detecting retries and avoiding duplication flowDirection (String) Indicating direction of email flow. Value is either \"INBOUND\" or \"OUTBOUND\" truncated (Boolean) Boolean indicating if any field in message was truncated due to size limitations Input event structure \u00b6 { \"summaryVersion\" : \"2018-10-10\" , \"envelope\" : { \"mailFrom\" : { \"address\" : \"from@example.com\" }, \"recipients\" : [ { \"address\" : \"recipient1@example.com\" }, { \"address\" : \"recipient2@example.com\" } ] }, \"sender\" : { \"address\" : \"sender@example.com\" }, \"subject\" : \"Hello From Amazon WorkMail!\" , \"messageId\" : \"00000000-0000-0000-0000-000000000000\" , \"invocationId\" : \"00000000000000000000000000000000\" , \"flowDirection\" : \"INBOUND\" , \"truncated\" : false } Response \u00b6 Response fields \u00b6 actions (Array) Required, should contain at least 1 list element type (String) Required. Can be \"BOUNCE\", \"DROP\" or \"DEFAULT\" parameters (String) Optional. For bounce, can be {\"bounceMessage\": \"message that goes in bounce mail\"} recipients (Optional, list of strings) Optional. Indicates list of recipients for which this action applies allRecipients (Optional, boolean) Optional. Indicates whether this action applies to all recipients Synchronous Run Lambda response schema \u00b6 Synchronous Run Lambda response schema { \"actions\" : [ { \"action\" : { \"type\" : \"string\" , \"parameters\" : { various } }, \"recipients\" : lis t o f s tr i n gs , \"allRecipients\" : boolea n } ] } Example bounce response { \"actions\" : [ { \"action\" : { \"type\" : \"BOUNCE\" , \"parameters\" : { \"bounceMessage\" : \"Email in breach of company policy.\" } }, \"allRecipients\" : true } ] } Example response { \"actions\" : [ { \"action\" : { \"type\" : \"DEFAULT\" }, \"allRecipients\" : true }, { \"action\" : { \"type\" : \"DROP\" }, \"recipients\" : [ \"drop-recipient@example.com\" ] } ] } Libraries \u00b6 Amazon WorkMail Lambda Templates - Python Reference Docs \u00b6 Configuring AWS Lambda for Amazon WorkMail","title":"WorkMail"},{"location":"work-mail/#amazon-workmail","text":"Can be configured to invoke your function synchrously or asynchrously.","title":"Amazon WorkMail"},{"location":"work-mail/#limits","text":"Payload size limit 128 KB, before being trancated","title":"Limits"},{"location":"work-mail/#input","text":"","title":"Input"},{"location":"work-mail/#input-fields","text":"summaryVersion (String) AWS WorkMail Message Summary Version mailFrom (Object) Mail from email address recipients (List) List of all of the email recipients sender (Object) Sender email address subject (String) Email subject (Truncated to first 256 chars)\" messageId (String) Message id for retrieval using workmail flow API invocationId (String) Id of this lambda invocation. Useful for detecting retries and avoiding duplication flowDirection (String) Indicating direction of email flow. Value is either \"INBOUND\" or \"OUTBOUND\" truncated (Boolean) Boolean indicating if any field in message was truncated due to size limitations","title":"Input fields"},{"location":"work-mail/#input-event-structure","text":"{ \"summaryVersion\" : \"2018-10-10\" , \"envelope\" : { \"mailFrom\" : { \"address\" : \"from@example.com\" }, \"recipients\" : [ { \"address\" : \"recipient1@example.com\" }, { \"address\" : \"recipient2@example.com\" } ] }, \"sender\" : { \"address\" : \"sender@example.com\" }, \"subject\" : \"Hello From Amazon WorkMail!\" , \"messageId\" : \"00000000-0000-0000-0000-000000000000\" , \"invocationId\" : \"00000000000000000000000000000000\" , \"flowDirection\" : \"INBOUND\" , \"truncated\" : false }","title":"Input event structure"},{"location":"work-mail/#response","text":"","title":"Response"},{"location":"work-mail/#response-fields","text":"actions (Array) Required, should contain at least 1 list element type (String) Required. Can be \"BOUNCE\", \"DROP\" or \"DEFAULT\" parameters (String) Optional. For bounce, can be {\"bounceMessage\": \"message that goes in bounce mail\"} recipients (Optional, list of strings) Optional. Indicates list of recipients for which this action applies allRecipients (Optional, boolean) Optional. Indicates whether this action applies to all recipients","title":"Response fields"},{"location":"work-mail/#synchronous-run-lambda-response-schema","text":"Synchronous Run Lambda response schema { \"actions\" : [ { \"action\" : { \"type\" : \"string\" , \"parameters\" : { various } }, \"recipients\" : lis t o f s tr i n gs , \"allRecipients\" : boolea n } ] } Example bounce response { \"actions\" : [ { \"action\" : { \"type\" : \"BOUNCE\" , \"parameters\" : { \"bounceMessage\" : \"Email in breach of company policy.\" } }, \"allRecipients\" : true } ] } Example response { \"actions\" : [ { \"action\" : { \"type\" : \"DEFAULT\" }, \"allRecipients\" : true }, { \"action\" : { \"type\" : \"DROP\" }, \"recipients\" : [ \"drop-recipient@example.com\" ] } ] }","title":"Synchronous Run Lambda response schema"},{"location":"work-mail/#libraries","text":"Amazon WorkMail Lambda Templates - Python","title":"Libraries"},{"location":"work-mail/#reference-docs","text":"Configuring AWS Lambda for Amazon WorkMail","title":"Reference Docs"}]}